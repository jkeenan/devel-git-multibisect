Reading database from /Users/jimk/tmp/work/List/cover_db


---------------------------- ------ ------ ------ ------ ------ ------ ------
File                           stmt branch   cond    sub    pod   time  total
---------------------------- ------ ------ ------ ------ ------ ------ ------
blib/lib/List/Compare.pm      100.0  100.0   76.2  100.0    0.0   23.0   91.1
...ompare/Base/_Auxiliary.pm   99.4   95.8   78.9  100.0    n/a   64.0   95.8
...t/Compare/Base/_Engine.pm  100.0  100.0  100.0  100.0    n/a    6.0  100.0
...ist/Compare/Functional.pm   99.6   97.8  100.0  100.0    0.0    7.1   92.1
Total                          99.8   98.5   78.2  100.0    0.0  100.0   92.6
---------------------------- ------ ------ ------ ------ ------ ------ ------


blib/lib/List/Compare.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare;
2                                                     $VERSION = 0.31;   # August 15, 2004 
3             18                  100           282   use strict;
              18                                 74   
              18                                690   
4                                                     # use warnings; # commented out so module will run on pre-5.6 versions of Perl
5             18                  100           226   use Carp;
              18                                 67   
              18                                447   
6             18                  100         10172   use List::Compare::Base::_Auxiliary qw(
7                                                         _validate_2_seenhashes
8                                                         _chart_engine_regular
9             18                                136   );
              18                                807   
10                                                    
11                                                    sub new {
12    ***    230                  100      0   2169       my $class = shift;
13           230                               1319       my (@args, $unsorted, $accelerated, $self, $dataref, $unsortflag);
14           230                                926       my ($argument_error_status, $nextarg, @testargs);
15           230    100    100                 4099       if (@_ == 1 and (ref($_[0]) eq 'HASH')) {
16           111                                437          my $argref = shift;
17           111                               1035          die "Need to define 'lists' key properly: $!"
18    ***    111            66                 1168              unless ( ${$argref}{'lists'}
19           111    100                         352                   and (ref(${$argref}{'lists'}) eq 'ARRAY') );
20           110                              39857          @args = @{${$argref}{'lists'}};
             110                                346   
             110                               1072   
21           110    100                         465          $unsorted = ${$argref}{'unsorted'} ? 1 : '';
             110                                832   
22           110    100                         357          $accelerated = ${$argref}{'accelerated'} ? 1 : '';
             110                                821   
23                                                        } else {
24           119                               1326           @args = @_;
25           119    100    100                 2712           $unsorted = ($args[0] eq '-u' or $args[0] eq '--unsorted')
26                                                                ? shift(@args) : '';
27           119    100    100                 2538           $accelerated = shift(@args) 
28                                                                if ($args[0] eq '-a' or $args[0] eq '--accelerated');
29                                                        }
30           229                               1022       $argument_error_status = 1;
31           229                               3571       @testargs = @args[1..$#args];
32           229    100    100                 3139       if (ref($args[0]) eq 'ARRAY' or ref($args[0]) eq 'HASH') {
33           226                               1840           while (defined ($nextarg = shift(@testargs))) {
34           405    100                        4293               unless (ref($nextarg) eq ref($args[0])) {
35            14                                 55                   $argument_error_status = 0;
36            14                                109                   last;
37                                                                }
38                                                            }
39                                                        } else {
40             3                                 17           $argument_error_status = 0;
41                                                        }
42           229    100                        1553       croak "Must pass all array references or all hash references: $!"
43                                                            unless $argument_error_status;
44                                                    
45                                                        # bless a ref to an empty hash into the invoking class
46           212    100                        1857       if (@args > 2) {
                    100                               
47            63    100                         467           if ($accelerated) {
48            28                                180               $class .= '::Multiple::Accelerated';
49    ***     28            33                  928               $self = bless {}, ref($class) || $class;
50                                                            } else {
51            35                                210               $class .= '::Multiple';
52    ***     35            33                  971               $self = bless {}, ref($class) || $class;
53                                                            }
54                                                        } elsif (@args == 2) {
55           148    100                         720           if ($accelerated) {
56            89                                417               $class .= '::Accelerated';
57    ***     89            33                 1925               $self = bless {}, ref($class) || $class;
58                                                            } else {
59    ***     59            33                 1367               $self = bless {}, ref($class) || $class;
60                                                            }
61                                                        } else {
62             1                                 20           croak "Must pass at least 2 references to \&new: $!";
63                                                        }
64                                                    
65                                                        # do necessary calculations and store results in a hash
66                                                        # take a reference to that hash
67           211    100                        1447       $unsortflag = $unsorted ? 1 : 0;
68           211                               1859       $dataref = $self->_init($unsortflag, @args);
69                                                    
70                                                        # initialize the object from the prepared values (Damian, p. 98)
71           187                              34254       %$self = %$dataref;
72           187                               3915       return $self;
73                                                    }
74                                                    
75                                                    sub _init {
76            59                  100           277       my $self = shift;
77            59                                310       my ($unsortflag, $refL, $refR) = @_;
78            59                                297       my (%data, @left, @right,  %seenL, %seenR);
79            59    100                         501       if (ref($refL) eq 'HASH') {
80            35                                369           my ($seenLref, $seenRref) =  _validate_2_seenhashes($refL, $refR);
81            29                                123           foreach my $key (keys %{$seenLref}) {
              29                                266   
82           333                               2166               for (my $j=1; $j <= ${$seenLref}{$key}; $j++) {
83           181                                912                   push(@left, $key);
84           152                                375               }
85                                                            }
86            29                                170           foreach my $key (keys %{$seenRref}) {
              29                                220   
87           300                               7709               for (my $j=1; $j <= ${$seenRref}{$key}; $j++) {
88           161                                956                   push(@right, $key);
89           139                                353               }
90                                                            }
91            29                                175           %seenL = %{$seenLref};
              29                                914   
92            29                                328           %seenR = %{$seenRref};
              29                                706   
93                                                        } else {
94            24                                185           foreach (@$refL) { $seenL{$_}++ } 
             152                                745   
95            24                                162           foreach (@$refR) { $seenR{$_}++ }
             137                                536   
96            24                                404           @left  = @$refL;
97            24                                462           @right = @$refR;
98                                                        } 
99            53    100                        1706       my @bag = $unsortflag ? (@left, @right) : sort(@left, @right);
100           53                                284       my (%intersection, %union, %Lonly, %Ronly, %LorRonly);
101           53                                260       my $LsubsetR_status = my $RsubsetL_status = 1;
102           53                                198       my $LequivalentR_status = 0;
103                                                   
104           53                                571       foreach (keys %seenL) {
105          280                                924           $union{$_}++;
106          280    100                        7447           exists $seenR{$_} ? $intersection{$_}++ : $Lonly{$_}++;
107                                                       }
108                                                   
109           53                                552       foreach (keys %seenR) {
110          257                                712           $union{$_}++;
111          257    100                        1362           $Ronly{$_}++ unless (exists $intersection{$_});
112                                                       }
113                                                   
114           53                                294       $LorRonly{$_}++ foreach ( (keys %Lonly), (keys %Ronly) );
              53                                677   
115                                                   
116           53    100                         547       $LequivalentR_status = 1 if ( (keys %LorRonly) == 0);
117                                                   
118           53                                256       foreach (@left) {
119          182    100                        1097           if (! exists $seenR{$_}) {
120           42                                151               $LsubsetR_status = 0;
121           42                                347               last;
122                                                           }
123                                                       }
124           53                                301       foreach (@right) {
125          254    100                        1231           if (! exists $seenL{$_}) {
126           31                                105               $RsubsetL_status = 0;
127           31                                119               last;
128                                                           }
129                                                       }
130                                                   
131           53                                421       $data{'seenL'}                = \%seenL; 
132           53                                279       $data{'seenR'}                = \%seenR; 
133           53    100                         978       $data{'intersection'}         = $unsortflag ? [      keys %intersection ] 
134                                                                                                   : [ sort keys %intersection ];
135           53    100                        1175       $data{'union'}                = $unsortflag ? [      keys %union ]
136                                                                                                   : [ sort keys %union ];
137           53    100                         959       $data{'unique'}               = $unsortflag ? [      keys %Lonly ] 
138                                                                                                   : [ sort keys %Lonly ];
139           53    100                         699       $data{'complement'}           = $unsortflag ? [      keys %Ronly ] 
140                                                                                                   : [ sort keys %Ronly ];
141           53    100                         781       $data{'symmetric_difference'} = $unsortflag ? [      keys %LorRonly ] 
142                                                                                                   : [ sort keys %LorRonly ];
143           53                                325       $data{'LsubsetR_status'}      = $LsubsetR_status;
144           53                                414       $data{'RsubsetL_status'}      = $RsubsetL_status;
145           53                                258       $data{'LequivalentR_status'}  = $LequivalentR_status;
146           53    100                         433       $data{'LdisjointR_status'}    = keys %intersection == 0 ? 1 : 0;
147           53                                293       $data{'bag'}                  = \@bag;
148           53                               1545       return \%data;
149                                                   }
150                                                   
151                                                   sub get_intersection {
152   ***     20                  100      0    117       return @{ get_intersection_ref(shift) };
              20                                195   
153                                                   }
154                                                   
155                                                   sub get_intersection_ref {
156   ***     40                  100      0    311       my $class = shift;
157           40                               1357       my %data = %$class;
158           40                                946       return $data{'intersection'};
159                                                   }
160                                                   
161                                                   sub get_union {
162   ***     16                  100      0     89       return @{ get_union_ref(shift) };
              16                                175   
163                                                   }
164                                                   
165                                                   sub get_union_ref {
166   ***     32                  100      0    184       my $class = shift;
167           32                               1005       my %data = %$class;
168           32                               7484       return $data{'union'};
169                                                   }
170                                                   
171                                                   sub get_shared {
172   ***      8                  100      0     64       my $class = shift;
173            8                                224       my $method = (caller(0))[3];
174            8                                205       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_union()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
175            8                                361       get_union($class);
176                                                   }
177                                                   
178                                                   sub get_shared_ref {
179   ***      8                  100      0     58       my $class = shift;
180            8                                187       my $method = (caller(0))[3];
181            8                                194       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_union_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
182            8                                267       get_union_ref($class);
183                                                   }
184                                                   
185                                                   sub get_unique {
186   ***     24                  100      0    134       return @{ get_unique_ref(shift) };
              24                                191   
187                                                   }
188                                                   
189                                                   sub get_unique_ref {
190   ***     48                  100      0    343       my $class = shift;
191           48                               1661       my %data = %$class;
192           48                                987       return $data{'unique'};
193                                                   }
194                                                   
195                                                   sub get_unique_all {
196   ***      8                  100      0     69       my $class = shift;
197            8                                339       my %data = %$class;
198            8                                166       return [ $data{'unique'}, $data{'complement'} ];
199                                                   }
200                                                   
201                                                   *get_Lonly = \&get_unique;
202                                                   *get_Aonly = \&get_unique;
203                                                   *get_Lonly_ref = \&get_unique_ref;
204                                                   *get_Aonly_ref = \&get_unique_ref;
205                                                   
206                                                   sub get_complement {
207   ***     24                  100      0    167       return @{ get_complement_ref(shift) };
              24                                193   
208                                                   }
209                                                   
210                                                   sub get_complement_ref {
211   ***     48                  100      0    282       my $class = shift;
212           48                               1758       my %data = %$class;
213           48                                977       return $data{'complement'};
214                                                   }
215                                                   
216                                                   sub get_complement_all {
217   ***      8                  100      0     74       my $class = shift;
218            8                                314       my %data = %$class;
219            8                                174       return [ $data{'complement'}, $data{'unique'} ];
220                                                   }
221                                                   
222                                                   *get_Ronly = \&get_complement;
223                                                   *get_Bonly = \&get_complement;
224                                                   *get_Ronly_ref = \&get_complement_ref;
225                                                   *get_Bonly_ref = \&get_complement_ref;
226                                                   
227                                                   sub get_symmetric_difference {
228   ***     40                  100      0    207       return @{ get_symmetric_difference_ref(shift) };
              40                                299   
229                                                   }
230                                                   
231                                                   sub get_symmetric_difference_ref {
232   ***     80                  100      0    472       my $class = shift;
233           80                               3037       my %data = %$class;
234           80                               1830       return $data{'symmetric_difference'};
235                                                   }
236                                                   
237                                                   *get_symdiff  = \&get_symmetric_difference;
238                                                   *get_LorRonly = \&get_symmetric_difference;
239                                                   *get_AorBonly = \&get_symmetric_difference;
240                                                   *get_symdiff_ref  = \&get_symmetric_difference_ref;
241                                                   *get_LorRonly_ref = \&get_symmetric_difference_ref;
242                                                   *get_AorBonly_ref = \&get_symmetric_difference_ref;
243                                                   
244                                                   sub get_nonintersection {
245   ***      8                  100      0     74       my $class = shift;
246            8                                196       my $method = (caller(0))[3];
247            8                                204       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_symmetric_difference()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
248            8                                285       get_symmetric_difference($class);
249                                                   }
250                                                   
251                                                   sub get_nonintersection_ref {
252   ***      8                  100      0     67       my $class = shift;
253            8                                183       my $method = (caller(0))[3];
254            8                                198       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_symmetric_difference_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
255            8                                204       get_symmetric_difference_ref($class);
256                                                   }
257                                                   
258                                                   sub is_LsubsetR {
259   ***     32                  100      0    255       my $class = shift;
260           32                               1072       my %data = %$class;
261           32                                478       return $data{'LsubsetR_status'};
262                                                   }
263                                                   
264                                                   *is_AsubsetB = \&is_LsubsetR;
265                                                   
266                                                   sub is_RsubsetL {
267   ***     32                  100      0    236       my $class = shift;
268           32                               1165       my %data = %$class;
269           32                                502       return $data{'RsubsetL_status'};
270                                                   }
271                                                   
272                                                   *is_BsubsetA = \&is_RsubsetL;
273                                                   
274                                                   sub is_LequivalentR {
275   ***     48                  100      0    454       my $class = shift;
276           48                               5787       my %data = %$class;
277           48                                761       return $data{'LequivalentR_status'};
278                                                   }
279                                                   
280                                                   *is_LeqvlntR = \&is_LequivalentR;
281                                                   
282                                                   sub is_LdisjointR {
283   ***     36                  100      0    275       my $class = shift;
284           36                               1238       my %data = %$class;
285           36                                537       return $data{'LdisjointR_status'};
286                                                   }
287                                                   
288                                                   sub print_subset_chart {
289   ***      8                  100      0     67       my $class = shift;
290            8                                259       my %data = %$class;
291            8                                168       my @subset_array = ($data{'LsubsetR_status'}, $data{'RsubsetL_status'});
292            8                                 40       my $title = 'Subset';
293            8                                110       _chart_engine_regular(\@subset_array, $title);
294                                                   }
295                                                   
296                                                   sub print_equivalence_chart {
297   ***      8                  100      0     65       my $class = shift;
298            8                                263       my %data = %$class;
299            8                                165       my @equivalent_array = ($data{'LequivalentR_status'}, 
300                                                                               $data{'LequivalentR_status'});
301            8                                 96       my $title = 'Equivalence';
302            8                                156       _chart_engine_regular(\@equivalent_array, $title);
303                                                   }
304                                                   
305                                                   sub is_member_which {
306   ***     88                  100      0    386       return @{ is_member_which_ref(@_) };
              88                                469   
307                                                   }    
308                                                   
309                                                   sub is_member_which_ref {
310   ***    177                  100      0   1058       my $class = shift;
311   ***    177    100     66                 2842       croak "Method call requires exactly 1 argument (no references):  $!"
312                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
313          176                             153125       my %data = %$class;
314          176                               1432       my ($arg, @found);
315          176                                712       $arg = shift;
316          176    100                         518       if (exists ${$data{'seenL'}}{$arg}) { push @found, 0; }
             176                               1550   
             112                                958   
317          176    100                         509       if (exists ${$data{'seenR'}}{$arg}) { push @found, 1; }
             176                               1156   
             112                                744   
318          176    100    100                  440       if ( (! exists ${$data{'seenL'}}{$arg}) &&
             176                               1246   
              64                                590   
319                                                            (! exists ${$data{'seenR'}}{$arg}) )
320           48                                307          { @found = (); }
321          176                               2483       return \@found;
322                                                   }    
323                                                   
324                                                   sub are_members_which {
325   ***      9                  100      0     74       my $class = shift;
326   ***      9    100     66                  308       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
327                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
328            8                                354       my %data = %$class;
329            8                                 84       my (@args, %found);
330            8                                 40       @args = @{$_[0]};
               8                                242   
331                                                       for (my $i=0; $i<=$#args; $i++) {
332           88    100                         212           if (exists ${$data{'seenL'}}{$args[$i]}) { push @{$found{$args[$i]}}, 0; }
              88                                536   
              56                                125   
              56                                758   
333           88    100                         215           if (exists ${$data{'seenR'}}{$args[$i]}) { push @{$found{$args[$i]}}, 1; }
              88                                465   
              56                                124   
              56                                423   
334           88    100    100                  205           if ( (! exists ${$data{'seenL'}}{$args[$i]}) &&
              88                              26994   
              32                                287   
335                                                                (! exists ${$data{'seenR'}}{$args[$i]}) )
336           24                                 69              { @{$found{$args[$i]}} = (); }
              24                                453   
337            8                                473       }
338            8                                199       return \%found;
339                                                   }    
340                                                   
341                                                   sub is_member_any {
342   ***     89                  100      0    604       my $class = shift;
343   ***     89    100     66                 1519       croak "Method call requires exactly 1 argument (no references):  $!"
344                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
345           88                               2836       my %data = %$class;
346           88                                737       my $arg = shift;
347           88    100    100                 7635       ( defined $data{'seenL'}{$arg} ) ||
348                                                       ( defined $data{'seenR'}{$arg} ) ? return 1 : return 0;
349                                                   }    
350                                                   
351                                                   sub are_members_any {
352   ***      9                  100      0    126       my $class = shift;
353   ***      9    100     66                  320       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
354                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
355            8                                253       my %data = %$class;
356            8                                 75       my (@args, %present);
357            8                                 35       @args = @{$_[0]};
               8                                301   
358                                                       for (my $i=0; $i<=$#args; $i++) {
359           88    100    100                 7268       $present{$args[$i]} = ( defined $data{'seenL'}{$args[$i]} ) ||
360                                                                             ( defined $data{'seenR'}{$args[$i]} )     ? 1 : 0;
361            8                                 89       }
362            8                                209       return \%present;
363                                                   }    
364                                                   
365                                                   sub get_bag {
366   ***      8                  100      0     45       return @{ get_bag_ref(shift) };
               8                                 81   
367                                                   }
368                                                   
369                                                   sub get_bag_ref {
370   ***     16                  100      0    104       my $class = shift;
371           16                                687       my %data = %$class;
372           16                                727       return $data{'bag'};
373                                                   }
374                                                   
375                                                   sub get_version {
376   ***      8                  100      0     72       return $List::Compare::VERSION;
377                                                   }
378                                                   
379                                                   1;
380                                                   
381                                                   ################################################################################
382                                                   
383                                                   package List::Compare::Accelerated;
384           18                  100           601   use Carp;
              18                                105   
              18                                431   
385           18                  100           328   use List::Compare::Base::_Auxiliary qw(
386                                                       _validate_2_seenhashes
387                                                       _argument_checker_0
388                                                       _chart_engine_regular
389                                                       _calc_seen
390                                                       _equiv_engine 
391           18                                 76   );
              18                                321   
392                                                   
393                                                   sub _init {
394           89                  100           382       my $self = shift;
395           89                                433       my ($unsortflag, $refL, $refR) = @_;
396           89                                277       my %data = ();
397           89                                701       ($data{'L'}, $data{'R'}) = _argument_checker_0($refL, $refR);
398           83    100                         606       $data{'unsort'} = $unsortflag ? 1 : 0;
399           83                                643       return \%data;
400                                                   }    
401                                                   
402                                                   sub get_intersection {
403   ***     12                  100      0     62       return @{ get_intersection_ref(shift) };
              12                                103   
404                                                   }
405                                                   
406                                                   sub get_intersection_ref {
407   ***     24                  100      0    149       my $class = shift;
408           24                                443       my %data = %$class;
409           16                                128       $data{'unsort'} 
410                                                         ? return          _intersection_engine($data{'L'}, $data{'R'})   
411           24    100                         257         : return [ sort @{_intersection_engine($data{'L'}, $data{'R'})} ];
412                                                   }
413                                                   
414                                                   sub get_union {
415   ***      8                  100      0     45       return @{ get_union_ref(shift) };
               8                                 69   
416                                                   }
417                                                   
418                                                   sub get_union_ref {
419   ***     32                  100      0    200       my $class = shift;
420           32                                494       my %data = %$class;
421           20                                169       $data{'unsort'} 
422                                                         ? return          _union_engine($data{'L'}, $data{'R'})   
423           32    100                         370         : return [ sort @{_union_engine($data{'L'}, $data{'R'})} ];
424                                                   }
425                                                   
426                                                   sub get_shared {
427   ***      8                  100      0     36       return @{ get_shared_ref(shift) };
               8                                 71   
428                                                   }
429                                                   
430                                                   sub get_shared_ref {
431   ***     16                  100      0     95       my $class = shift;
432           16                                329       my $method = (caller(0))[3];
433           16                                714       $method =~ s/.*::(\w*)$/$1/;
434           16                                367       carp "When comparing only 2 lists, \&$method defaults to \n  \&get_union_ref.  Though the results returned are valid, \n    please consider re-coding with that method: $!";
435           16                                579       &get_union_ref($class);
436                                                   }
437                                                   
438                                                   sub get_unique {
439   ***     24                  100      0    109       return @{ get_unique_ref(shift) };
              24                                192   
440                                                   }
441                                                   
442                                                   sub get_unique_ref {
443   ***     64                  100      0    356       my $class = shift;
444           64                               6792       my %data = %$class;
445           38                                303       $data{'unsort'} 
446                                                         ? return          _unique_engine($data{'L'}, $data{'R'})   
447           64    100                         720         : return [ sort @{_unique_engine($data{'L'}, $data{'R'})} ];
448                                                   }
449                                                   
450                                                   sub get_unique_all {
451   ***      8                  100      0   5825       my $class = shift;
452            8                                 76       return [ get_unique_ref($class), get_complement_ref($class) ];
453                                                   }
454                                                   
455                                                   *get_Lonly = \&get_unique;
456                                                   *get_Aonly = \&get_unique;
457                                                   *get_Lonly_ref = \&get_unique_ref;
458                                                   *get_Aonly_ref = \&get_unique_ref;
459                                                   
460                                                   sub get_complement {
461   ***     24                  100      0    117       return @{ get_complement_ref(shift) };
              24                                189   
462                                                   }
463                                                   
464                                                   sub get_complement_ref {
465   ***     64                  100      0    352       my $class = shift;
466           64                                989       my %data = %$class;
467           38                                278       $data{'unsort'} 
468                                                         ? return          _complement_engine($data{'L'}, $data{'R'})   
469           64    100                         728         : return [ sort @{_complement_engine($data{'L'}, $data{'R'})} ];
470                                                   }
471                                                   
472                                                   sub get_complement_all {
473   ***      8                  100      0     70       my $class = shift;
474            8                                 51       return [ get_complement_ref($class), get_unique_ref($class) ];
475                                                   }
476                                                   
477                                                   *get_Ronly = \&get_complement;
478                                                   *get_Bonly = \&get_complement;
479                                                   *get_Ronly_ref = \&get_complement_ref;
480                                                   *get_Bonly_ref = \&get_complement_ref;
481                                                   
482                                                   sub get_symmetric_difference {
483   ***     32                  100      0   4996       return @{ get_symmetric_difference_ref(shift) };
              32                                283   
484                                                   }
485                                                   
486                                                   sub get_symmetric_difference_ref {
487   ***     80                  100      0    477       my $class = shift;
488           80                               1368       my %data = %$class;
489           50                                443       $data{'unsort'} 
490                                                         ? return          _symmetric_difference_engine($data{'L'}, $data{'R'})  
491           80    100                         878         : return [ sort @{_symmetric_difference_engine($data{'L'}, $data{'R'})} ];
492                                                   }
493                                                   
494                                                   *get_symdiff  = \&get_symmetric_difference;
495                                                   *get_LorRonly = \&get_symmetric_difference;
496                                                   *get_AorBonly = \&get_symmetric_difference;
497                                                   *get_symdiff_ref  = \&get_symmetric_difference_ref;
498                                                   *get_LorRonly_ref = \&get_symmetric_difference_ref;
499                                                   *get_AorBonly_ref = \&get_symmetric_difference_ref;
500                                                   
501                                                   sub get_nonintersection {
502   ***      8                  100      0     39       return @{ get_nonintersection_ref(shift) };
               8                                 61   
503                                                   }
504                                                   
505                                                   sub get_nonintersection_ref {
506   ***     16                  100      0    135       my $class = shift;
507           16                                325       my $method = (caller(0))[3];
508           16                                680       $method =~ s/.*::(\w*)$/$1/;
509           16                                348       carp "When comparing only 2 lists, \&$method defaults to \n  \&get_symmetric_difference_ref.  Though the results returned are valid, \n    please consider re-coding with that method: $!";
510           16                                576       &get_symmetric_difference_ref($class);
511                                                   }
512                                                   
513                                                   sub is_LsubsetR {
514   ***     32                  100      0    268       my $class = shift;
515           32                                426       my %data = %$class;
516           32                                319       return _is_LsubsetR_engine($data{'L'}, $data{'R'});
517                                                   }
518                                                   
519                                                   *is_AsubsetB  = \&is_LsubsetR;
520                                                   
521                                                   sub is_RsubsetL {
522   ***     32                  100      0    182       my $class = shift;
523           32                                420       my %data = %$class;
524           32                                264       return _is_RsubsetL_engine($data{'L'}, $data{'R'});
525                                                   }
526                                                   
527                                                   *is_BsubsetA  = \&is_RsubsetL;
528                                                   
529                                                   sub is_LequivalentR {
530   ***     48                  100      0    292       my $class = shift;
531           48                                750       my %data = %$class;
532           48                                429       return _is_LequivalentR_engine($data{'L'}, $data{'R'});
533                                                   }
534                                                   
535                                                   *is_LeqvlntR = \&is_LequivalentR;
536                                                   
537                                                   sub is_LdisjointR {
538   ***     28                  100      0    193       my $class = shift;
539           28                                411       my %data = %$class;
540           28                                272       return _is_LdisjointR_engine($data{'L'}, $data{'R'});
541                                                   }
542                                                   
543                                                   sub print_subset_chart {
544   ***      8                  100      0     50       my $class = shift;
545            8                                115       my %data = %$class;
546            8                                 83       _print_subset_chart_engine($data{'L'}, $data{'R'});
547                                                   }
548                                                   
549                                                   sub print_equivalence_chart {
550   ***      8                  100      0     56       my $class = shift;
551            8                                142       my %data = %$class;
552            8                                 83       _print_equivalence_chart_engine($data{'L'}, $data{'R'});
553                                                   }
554                                                   
555                                                   sub is_member_which {
556   ***     88                  100      0    336       return @{ is_member_which_ref(@_) };
              88                                473   
557                                                   }    
558                                                   
559                                                   sub is_member_which_ref {
560   ***    177                  100      0    963       my $class = shift;
561   ***    177    100     66                 2618       croak "Method call requires exactly 1 argument (no references):  $!"
562                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
563          176                               2567       my %data = %$class;
564          176                               1480       return _is_member_which_engine($data{'L'}, $data{'R'}, shift);
565                                                   }    
566                                                   
567                                                   sub are_members_which {
568   ***      9                  100      0     68       my $class = shift;
569   ***      9    100     66                  286       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
570                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
571            8                                135       my %data = %$class;
572            8                                 45       my (@args);
573            8                                 79       @args = @{$_[0]};
               8                                268   
574            8                                140       return _are_members_which_engine($data{'L'}, $data{'R'}, \@args);
575                                                   }
576                                                   
577                                                   sub is_member_any {
578   ***     89                  100      0    501       my $class = shift;
579   ***     89    100     66                 1312       croak "Method call requires exactly 1 argument (no references):  $!"
580                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
581           88                               1163       my %data = %$class;
582           88                                718       return _is_member_any_engine($data{'L'}, $data{'R'}, shift);
583                                                   }    
584                                                   
585                                                   sub are_members_any {
586   ***      9                  100      0     63       my $class = shift;
587   ***      9    100     66                  221       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
588                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
589            8                                121       my %data = %$class;
590            8                                 44       my (@args);
591            8                                 36       @args = @{$_[0]};
               8                                482   
592            8                                152       return _are_members_any_engine($data{'L'}, $data{'R'}, \@args);
593                                                   }    
594                                                   
595                                                   sub get_bag {
596   ***      8                  100      0     39       return @{ get_bag_ref(shift) };
               8                                 69   
597                                                   }
598                                                   
599                                                   sub get_bag_ref {
600   ***     16                  100      0    118       my $class = shift;
601           16                                499       my %data = %$class;
602           16    100                         235       if (ref($data{'L'}) eq 'ARRAY') {
603            4                                 31           $data{'unsort'} ? return [      @{$data{'L'}}, @{$data{'R'}}  ]
               4                                215   
               4                                 27   
604            8    100                          55                           : return [ sort(@{$data{'L'}}, @{$data{'R'}}) ];
               4                                244   
605                                                       } else {
606            8                                 38           my (@left, @right);
607            8                                 25           foreach my $key (keys %{$data{'L'}}) {
               8                                112   
608          120                                932               for (my $j=1; $j <= ${$data{'L'}}{$key}; $j++) {
609           64                                323                   push(@left, $key);
610           56                                136               }
611                                                           }
612            8                                 59           foreach my $key (keys %{$data{'R'}}) {
               8                                 82   
613          120                              59164               for (my $j=1; $j <= ${$data{'R'}}{$key}; $j++) {
614           64                                411                   push(@right, $key);
615           56                                139               }
616                                                           }
617            8    100                        5531           $data{'unsort'} ? return [      @left, @right  ]
618                                                                           : return [ sort(@left, @right) ];
619                                                       }
620                                                   }
621                                                   
622                                                   sub get_version {
623   ***      8                  100      0     66       return $List::Compare::VERSION;
624                                                   }
625                                                   
626                                                   sub _intersection_engine {
627           24                  100           125       my ($l, $r) = @_;
628           24                                204       my ($hrefL, $hrefR) = _calc_seen($l, $r);
629           24                                 90       my %intersection = ();
630           24                                 81       foreach (keys %{$hrefL}) {
              24                                328   
631          144    100                         307           $intersection{$_}++ if (exists ${$hrefR}{$_});
             144                               1162   
632                                                       }
633           24                               1062       return [ keys %intersection ];
634                                                   }
635                                                   
636                                                   sub _union_engine {
637           32                  100           180       my ($l, $r) = @_;
638           32                                299       my ($hrefL, $hrefR) = _calc_seen($l, $r);
639           32                                125       my %union = ();
640           32                                 89       $union{$_}++ foreach ( (keys %{$hrefL}), (keys %{$hrefR}) );
              32                                108   
              32                                336   
              32                               1052   
641           32                               2143       return [ keys %union ];
642                                                   }
643                                                   
644                                                   sub _unique_engine {
645           64                  100           402       my ($l, $r) = @_;
646           64                                633       my ($hrefL, $hrefR) = _calc_seen($l, $r);
647           64                                325       my (%Lonly);
648           64                                220       foreach (keys %{$hrefL}) {
              64                                871   
649          448    100                         957           $Lonly{$_}++ unless exists ${$hrefR}{$_};
             448                               2833   
650                                                       }
651           64                               1771       return [ keys %Lonly ];
652                                                   }
653                                                   
654                                                   sub _complement_engine {
655           64                  100           325       my ($l, $r) = @_;
656           64                                528       my ($hrefL, $hrefR) = _calc_seen($l, $r);
657           64                                260       my (%Ronly);
658           64                                221       foreach (keys %{$hrefR}) {
              64                                810   
659          448    100                         952           $Ronly{$_}++ unless (exists ${$hrefL}{$_});
             448                               2929   
660                                                       }
661           64                               1743       return [ keys %Ronly ];
662                                                   }
663                                                   
664                                                   sub _symmetric_difference_engine {
665           80                  100           380       my ($l, $r) = @_;
666           80                                699       my ($hrefL, $hrefR) = _calc_seen($l, $r);
667           80                                349       my (%LorRonly);
668           80                               4895       foreach (keys %{$hrefL}) {
              80                               1169   
669          560    100                        6835           $LorRonly{$_}++ unless (exists ${$hrefR}{$_});
             560                               3517   
670                                                       }
671           80                                514       foreach (keys %{$hrefR}) {
              80                                903   
672          560    100                        1163           $LorRonly{$_}++ unless (exists ${$hrefL}{$_});
             560                               7954   
673                                                       }
674           80                               3388       return [ keys %LorRonly ];
675                                                   }
676                                                   
677                                                   sub _is_LsubsetR_engine {
678           32                  100           147       my ($l, $r) = @_;
679           32                                247       my ($hrefL, $hrefR) = _calc_seen($l, $r);
680           32                                150       my $LsubsetR_status = 1;
681           32                                101       foreach (keys %{$hrefL}) {
              32                                398   
682          144    100                         309           if (! exists ${$hrefR}{$_}) {
             144                                904   
683           32                                106               $LsubsetR_status = 0;
684           32                                172               last;
685                                                           }
686                                                       }
687           32                                837       return $LsubsetR_status;
688                                                   }
689                                                   
690                                                   sub _is_RsubsetL_engine {
691           32                  100           144       my ($l, $r) = @_;
692           32                                193       my ($hrefL, $hrefR) = _calc_seen($l, $r);
693           32                                137       my $RsubsetL_status = 1;
694           32                                 99       foreach (keys %{$hrefR}) {
              32                                327   
695          128    100                         278           if (! exists ${$hrefL}{$_}) {
             128                                923   
696           16                                 47               $RsubsetL_status = 0;
697           16                                 73               last;
698                                                           }
699                                                       }
700           32                                500       return $RsubsetL_status;
701                                                   }
702                                                   
703                                                   sub _is_LequivalentR_engine {
704           48                  100           214       my ($l, $r) = @_;
705           48                                303       my ($hrefL, $hrefR) = _calc_seen($l, $r);
706           48                                316       return _equiv_engine($hrefL, $hrefR);
707                                                   }
708                                                   
709                                                   sub _is_LdisjointR_engine {
710           28                  100           148       my ($l, $r) = @_;
711           28                                191       my ($hrefL, $hrefR) = _calc_seen($l, $r);
712           28                                104       my %intersection = ();
713           28                                 81       foreach (keys %{$hrefL}) {
              28                                373   
714          144    100                         307           $intersection{$_}++ if (exists ${$hrefR}{$_});
             144                               1405   
715                                                       }
716           28    100                         588       keys %intersection == 0 ? 1 : 0;
717                                                   }
718                                                   
719                                                   sub _print_subset_chart_engine {
720            8                  100            46       my ($l, $r) = @_;
721            8                                 54       my ($hrefL, $hrefR) = _calc_seen($l, $r);
722            8                                 46       my $LsubsetR_status = my $RsubsetL_status = 1;
723            8                                 29       foreach (keys %{$hrefL}) {
               8                                 99   
724           40    100                          88           if (! exists ${$hrefR}{$_}) {
              40                                300   
725            8                                 27               $LsubsetR_status = 0;
726            8                                 49               last;
727                                                           }
728                                                       }
729            8                                 82       foreach (keys %{$hrefR}) {
               8                                 74   
730           32    100                          73           if (! exists ${$hrefL}{$_}) {
              32                                210   
731            8                                 29               $RsubsetL_status = 0;
732            8                                 35               last;
733                                                           }
734                                                       }
735            8                                 71       my @subset_array = ($LsubsetR_status, $RsubsetL_status);
736            8                                 36       my $title = 'Subset';
737            8                                 78       _chart_engine_regular(\@subset_array, $title);
738                                                   }
739                                                   
740                                                   sub _print_equivalence_chart_engine {
741            8                  100            45       my ($l, $r) = @_;
742            8                                 57       my ($hrefL, $hrefR) = _calc_seen($l, $r);
743            8                                 60       my $LequivalentR_status = _equiv_engine($hrefL, $hrefR);
744            8                                 57       my @equivalent_array = ($LequivalentR_status, $LequivalentR_status);
745            8                                 39       my $title = 'Equivalence';
746            8                                 59       _chart_engine_regular(\@equivalent_array, $title);
747                                                   }    
748                                                   
749                                                   sub _is_member_which_engine {
750          176                  100           833       my ($l, $r, $arg) = @_;
751          176                               1135       my ($hrefL, $hrefR) = _calc_seen($l, $r);
752          176                                590       my (@found);
753          176    100                         470       if (exists ${$hrefL}{$arg}) { push @found, 0; }
             176                               1281   
             112                               1018   
754          176    100                         443       if (exists ${$hrefR}{$arg}) { push @found, 1; }
             176                                958   
             112                                739   
755          176    100    100                  521       if ( (! exists ${$hrefL}{$arg}) &&
             176                               1199   
              64                                607   
756                                                            (! exists ${$hrefR}{$arg}) )
757           48                                306          { @found = (); }
758          176                               2665       return \@found;
759                                                   }    
760                                                   
761                                                   sub _are_members_which_engine {
762            8                  100            51       my ($l, $r, $arg) = @_;
763            8                                 65       my ($hrefL, $hrefR) = _calc_seen($l, $r);
764            8                                 38       my @args = @{$arg};
               8                                102   
765            8                                 34       my (%found);
766                                                       for (my $i=0; $i<=$#args; $i++) {
767           88    100                         181           if (exists ${$hrefL}{$args[$i]}) { push @{$found{$args[$i]}}, 0; }
              88                                436   
              56                                128   
              56                                669   
768           88    100                         216           if (exists ${$hrefR}{$args[$i]}) { push @{$found{$args[$i]}}, 1; }
              88                                420   
              56                                134   
              56                                406   
769           88    100    100                  202           if ( (! exists ${$hrefL}{$args[$i]}) &&
              88                                688   
              32                                300   
770                                                                (! exists ${$hrefR}{$args[$i]}) )
771           24                                 67              { @{$found{$args[$i]}} = (); }
              24                                489   
772            8                                 33       }
773            8                                197       return \%found;
774                                                   }
775                                                   
776                                                   sub _is_member_any_engine {
777           88                  100           423       my ($l, $r, $arg) = @_;
778           88                                533       my ($hrefL, $hrefR) = _calc_seen($l, $r);
779           88                               1192       ( defined ${$hrefL}{$arg} ) ||
              32                                747   
780           88    100    100                  290       ( defined ${$hrefR}{$arg} ) ? return 1 : return 0;
781                                                   }
782                                                   
783                                                   sub _are_members_any_engine {
784            8                  100            53       my ($l, $r, $arg) = @_;
785            8                                 64       my ($hrefL, $hrefR) = _calc_seen($l, $r);
786            8                                 39       my @args = @{$arg};
               8                                160   
787            8                                 74       my (%present);
788                                                       for (my $i=0; $i<=$#args; $i++) {
789           88                                885           $present{$args[$i]} = ( defined ${$hrefL}{$args[$i]} ) ||
              32                                564   
790           88    100    100                  185                                 ( defined ${$hrefR}{$args[$i]} ) ? 1 : 0;
791            8                                 34       }
792            8                                173       return \%present;
793                                                   }
794                                                   
795                                                   1;
796                                                   
797                                                   ################################################################################
798                                                   
799                                                   package List::Compare::Multiple;
800           18                  100           582   use Carp;
              18                                149   
              18                                427   
801           18                  100           274   use List::Compare::Base::_Auxiliary qw(
802                                                       _validate_seen_hash
803                                                       _index_message1
804                                                       _index_message2
805                                                       _chart_engine_multiple
806           18                                 68   );
              18                                301   
807                                                   
808                                                   sub _init {
809           35                  100           196       my $self = shift;
810           35                                165       my $unsortflag = shift;
811           35                                377       my @listrefs = @_;
812           35                                181       my (@arrayrefs);
813           35                                271       my $maxindex = $#listrefs;
814           35    100                         298       if (ref($listrefs[0]) eq 'ARRAY') {
815           15                                176           @arrayrefs = @listrefs;
816                                                       } else {
817           20                                234           _validate_seen_hash(@listrefs);
818           14                                114           foreach my $href (@listrefs) {
819           74                                166               my (@temp);
820           74                                175               foreach my $key (keys %{$href}) {
              74                                495   
821          850                               5174                  for (my $j=1; $j <= ${$href}{$key}; $j++) {
822          460                               2119                      push(@temp, $key);
823          390                                854                  }
824                                                               }
825           74                                581               push(@arrayrefs, \@temp);
826                                                           }
827                                                       }
828                                                   
829           29                                163       my @bag = ();
830           29                                186       foreach my $aref (@arrayrefs) {
831          154                                321           push @bag, $_ foreach @$aref;
             154                               3377   
832                                                       }
833           29    100                        6625       @bag = sort(@bag) unless $unsortflag;
834                                                   
835           29                                132       my (@intersection, @union);
836                                                           # will hold overall intersection/union
837           29                                 93       my @nonintersection = ();
838                                                           # will hold all items except those found in each source list
839                                                           # @intersection + @nonintersection = @union
840           29                                113       my @shared = ();
841                                                           # will hold all items found in at least 2 lists
842           29                                101       my @symmetric_difference = ();
843                                                           # will hold each item found in only one list regardless of list;
844                                                           # equivalent to @union minus all items found in the lists 
845                                                           # underlying %xintersection
846           29                                138       my (%intersection, %union);
847                                                           # will be used to generate @intersection & @union
848           29                                 91       my %seen = ();
849                                                           # will be hash of hashes, holding seen-hashes corresponding to 
850                                                           # the source lists
851           29                                 99       my %xintersection = ();
852                                                           # will be hash of hashes, holding seen-hashes corresponding to 
853                                                           # the lists containing the intersections of each permutation of 
854                                                           # the source lists
855           29                                 92       my %shared = ();
856                                                           # will be used to generate @shared
857           29                                113       my @xunique = ();
858                                                           # will be array of arrays, holding the items that are unique to 
859                                                           # the list whose index number is passed as an argument
860           29                                 98       my @xcomplement = ();
861                                                           # will be array of arrays, holding the items that are found in 
862                                                           # any list other than the list whose index number is passed 
863                                                           # as an argument
864           29                               5828       my @xdisjoint = ();
865                                                           # will be an array of arrays, holding an indicator as to whether 
866                                                           # any pair of lists are disjoint, i.e., have no intersection
867                                                   
868                                                       # Calculate overall union and take steps needed to calculate overall 
869                                                       # intersection, unique, difference, etc.
870                                                       for (my $i = 0; $i <= $#arrayrefs; $i++) {
871          154                                425           my %seenthis = ();
872          154                                367           foreach (@{$arrayrefs[$i]}) {
             154                                816   
873          955                               3338               $seenthis{$_}++;
874          955                               3188               $union{$_}++;
875                                                           }
876          154                               1175           $seen{$i} = \%seenthis;
877                                                           for (my $j = $i+1; $j <=$#arrayrefs; $j++) {
878          335                                946               my (%seenthat, %seenintersect);
879          335                               1641               my $ilabel = $i . '_' . $j;
880          335                               5681               $seenthat{$_}++ foreach (@{$arrayrefs[$j]});
             335                                724   
             335                               4735   
881          335                               2490               foreach (keys %seenthat) {
882         1440    100                        9844                   $seenintersect{$_}++ if (exists $seenthis{$_});
883                                                               }
884          335                               5499               $xintersection{$ilabel} = \%seenintersect;
885          154                                582           }
886           29                                151       }
887           29    100                        1420       @union = $unsortflag ? keys %union : sort(keys %union);
888                                                   
889                                                       # At this point we now have %seen, @union and %xintersection available 
890                                                       # for use in other calculations.
891                                                   
892                                                       # Calculate overall intersection
893                                                       # Inputs:  %xintersection
894           29                                894       my @xkeys = keys %xintersection;
895           29                                220       %intersection = %{$xintersection{$xkeys[0]}};
              29                                396   
896                                                       for (my $m = 1; $m <= $#xkeys; $m++) {
897          306                                708           my %compare = %{$xintersection{$xkeys[$m]}};
             306                               2345   
898          306                                992           my %result = ();
899          306                               1437           foreach (keys %compare) {
900          899    100                        5037               $result{$_}++ if (exists $intersection{$_});
901                                                           }
902          306                               3925           %intersection = %result;
903           29                                189       }
904           29    100                         378       @intersection = $unsortflag ? keys %intersection : sort(keys %intersection);
905                                                   
906                                                       # Calculate nonintersection
907                                                       # Inputs:  @union    %intersection
908           29                                236       foreach (@union) {
909          317    100                        2608           push(@nonintersection, $_) unless (exists $intersection{$_});
910                                                       }
911                                                   
912                                                       # Calculate @xunique and @xdisjoint
913                                                       # Inputs:  @arrayrefs    %seen    %xintersection
914                                                       for (my $i = 0; $i <= $#arrayrefs; $i++) {
915          154                                399           my %seenthis = %{$seen{$i}};
             154                               1816   
916          154                                770           my (@uniquethis, %deductions, %alldeductions);
917                                                           # Get those elements of %xintersection which we'll need 
918                                                           # to subtract from %seenthis
919          154                               1361           foreach (keys %xintersection) {
920         1810                              14875               my ($left, $right) = split /_/, $_;
921         1810    100    100                25978               if ($left == $i || $right == $i) {
922          670                              10095                   $deductions{$_} = $xintersection{$_};
923                                                               }
924         1810                              23661               $xdisjoint[$left][$right] = $xdisjoint[$right][$left] = 
925         1810    100                        8601                   ! (keys %{$xintersection{$_}}) ? 1 : 0;
926                                                           }
927          154                               1869           foreach my $ded (keys %deductions) {
928          670                               1451               foreach (keys %{$deductions{$ded}}) {
             670                               9801   
929         1914                               9150                   $alldeductions{$_}++;
930                                                               }
931                                                           }
932          154                               1152           foreach (keys %seenthis) {
933          810    100                       14240               push(@uniquethis, $_) unless ($alldeductions{$_});
934                                                           }
935          154                               1044           $xunique[$i] = \@uniquethis;
936          154                               2751           $xdisjoint[$i][$i] = 0; 
937           29                                143       }
938                                                       # @xunique is now available for use in further calculations, 
939                                                       # such as returning the items unique to a particular source list.
940                                                   
941                                                       # Calculate @xcomplement
942                                                       # Inputs:  @arrayrefs    %seen    @union
943                                                       for (my $i = 0; $i <= $#arrayrefs; $i++) {
944          154                                396           my %seenthis = %{$seen{$i}};
             154                               7681   
945          154                                657           my @complementthis = ();
946          154                                545           foreach (@union) {
947         1702    100                       10814               push(@complementthis, $_) unless (exists $seenthis{$_});
948                                                           }
949          154                               2187           $xcomplement[$i] = \@complementthis;
950           29                                108       }
951                                                       # @xcomplement is now available for use in further calculations, 
952                                                       # such as returning the items in all lists different from those in a 
953                                                       # particular source list.
954                                                   
955                                                       # Calculate @shared and @symmetric_difference
956                                                       # Inputs:  %xintersection    @union
957           29                                339       foreach my $q (keys %xintersection) {
958          335                                628           $shared{$_}++ foreach (keys %{$xintersection{$q}});
             335                                696   
             335                               3710   
959                                                       }
960           29    100                        7278       @shared = $unsortflag ? keys %shared : sort(keys %shared);
961           29                                402       foreach (@union) {
962          317    100                        1770           push(@symmetric_difference, $_) unless (exists $shared{$_});
963                                                       }
964                                                       # @shared and @symmetric_difference are now available.
965                                                   
966           29                                110       my @xsubset = ();
967           29                                352       foreach my $i (keys %seen) {
968          154                                391           my %tempi = %{$seen{$i}};
             154                               7349   
969          154                               1234           foreach my $j (keys %seen) {
970          824                               1740               my %tempj = %{$seen{$j}};
             824                              19359   
971          824                               5493               $xsubset[$i][$j] = 1;
972          824                               4773               foreach (keys %tempi) {
973         4320    100                       73399                   $xsubset[$i][$j] = 0 if (! $tempj{$_});
974                                                               }
975                                                           }
976                                                       }
977                                                       # @xsubset is now available
978                                                   
979           29                                204       my @xequivalent = ();
980                                                       for (my $f = 0; $f <= $#xsubset; $f++) {
981                                                           for (my $g = 0; $g <= $#xsubset; $g++) {
982          824                               8943               $xequivalent[$f][$g] = 0;
983          824    100    100                10197               $xequivalent[$f][$g] = 1
984                                                                   if ($xsubset[$f][$g] and $xsubset[$g][$f]);
985          154                                409           }
986           29                                112       }
987                                                   
988           29                                113       my (%data);
989           29                                278       $data{'seen'}                   = \%seen;
990           29                                262       $data{'maxindex'}               = $maxindex;
991           29                                195       $data{'intersection'}           = \@intersection;
992           29                                163       $data{'nonintersection'}        = \@nonintersection;
993           29                                245       $data{'union'}                  = \@union;
994           29                                175       $data{'shared'}                 = \@shared;
995           29                                182       $data{'symmetric_difference'}   = \@symmetric_difference;
996           29                                179       $data{'xunique'}                = \@xunique;
997           29                                277       $data{'xcomplement'}            = \@xcomplement;
998           29                                241       $data{'xsubset'}                = \@xsubset;
999           29                                171       $data{'xequivalent'}            = \@xequivalent;
1000          29                                184       $data{'xdisjoint'}              = \@xdisjoint;
1001          29                                184       $data{'bag'}                    = \@bag;
1002          29                               2820       return \%data;
1003                                                  }    
1004                                                  
1005                                                  sub get_intersection {
1006  ***      8                  100      0     59       return @{ get_intersection_ref(shift) };
               8                                 80   
1007                                                  }
1008                                                  
1009                                                  sub get_intersection_ref {
1010  ***     16                  100      0    181       my $class = shift;
1011          16                                814       my %data = %$class;
1012          16                                453       return $data{'intersection'};
1013                                                  }
1014                                                  
1015                                                  sub get_union {
1016  ***      8                  100      0     64       return @{ get_union_ref(shift) };
               8                                 77   
1017                                                  }
1018                                                  
1019                                                  sub get_union_ref {
1020  ***     16                  100      0    113       my $class = shift;
1021          16                                786       my %data = %$class;
1022          16                                556       return $data{'union'};
1023                                                  }
1024                                                  
1025                                                  sub get_shared {
1026  ***      8                  100      0     47       return @{ get_shared_ref(shift) };
               8                                 77   
1027                                                  }
1028                                                  
1029                                                  sub get_shared_ref {
1030  ***     16                  100      0    126       my $class = shift;
1031          16                                854       my %data = %$class;
1032          16                                517       return $data{'shared'};
1033                                                  }
1034                                                  
1035                                                  sub get_unique {
1036  ***     44                  100      0   9767       my $class = shift;
1037          44                               2124       my %data = %$class;
1038          44    100                         673       my $index = defined $_[0] ? shift : 0;
1039          44                                178       return @{ get_unique_ref($class, $index) };
              44                                285   
1040                                                  }
1041                                                  
1042                                                  sub get_unique_ref {
1043  ***     93                  100      0    501       my $class = shift;
1044          93                               3064       my %data = %$class;
1045          93    100                        1364       my $index = defined $_[0] ? shift : 0;
1046          93                               1130       _index_message1($index, \%data);
1047          92                                352       return ${$data{'xunique'}}[$index];
              92                               2798   
1048                                                  }
1049                                                  
1050                                                  sub get_unique_all {
1051  ***      8                  100      0     86       my $class = shift;
1052           8                                381       my %data = %$class;
1053           8                                164       return $data{'xunique'};
1054                                                  }
1055                                                  
1056                                                  sub get_Lonly {
1057  ***     28                  100      0    272       my ($class, $index) = @_;
1058          28                                963       my $method = (caller(0))[3];
1059          28                               1431       $method =~ s/.*::(\w*)$/$1/;
1060          28                                595       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1061          28                                829       get_unique($class, $index);
1062                                                  }    
1063                                                  
1064                                                  sub get_Lonly_ref {
1065  ***     32                  100      0    255       my ($class, $index) = @_;
1066          32                                883       my $method = (caller(0))[3];
1067          32                               1597       $method =~ s/.*::(\w*)$/$1/;
1068          32                                766       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1069          32                               1161       get_unique_ref($class, $index);
1070                                                  }    
1071                                                  
1072                                                  *get_Aonly = \&get_Lonly;
1073                                                  *get_Aonly_ref = \&get_Lonly_ref;
1074                                                  
1075                                                  sub get_complement {
1076  ***     48                  100      0    342       my $class = shift;
1077          48                               2143       my %data = %$class;
1078          48    100                         610       my $index = defined $_[0] ? shift : 0;
1079          48                                201       return @{ get_complement_ref($class, $index) };
              48                                285   
1080                                                  }
1081                                                  
1082                                                  sub get_complement_ref {
1083  ***     97                  100      0    524       my $class = shift;
1084          97                               3270       my %data = %$class;
1085          97    100                        1175       my $index = defined $_[0] ? shift : 0;
1086          97                               1347       _index_message1($index, \%data);
1087          96                                422       return ${$data{'xcomplement'}}[$index];
              96                               3102   
1088                                                  }
1089                                                  
1090                                                  sub get_complement_all {
1091  ***      8                  100      0     77       my $class = shift;
1092           8                                388       my %data = %$class;
1093           8                                141       return $data{'xcomplement'};
1094                                                  }
1095                                                  
1096                                                  sub get_Ronly {
1097  ***     32                  100      0    293       my ($class, $index) = @_;
1098          32                                850       my $method = (caller(0))[3];
1099          32                               1576       $method =~ s/.*::(\w*)$/$1/;
1100          32                                692       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1101          32                                904       &get_complement($class, $index);
1102                                                  }    
1103                                                  
1104                                                  sub get_Ronly_ref {
1105  ***     32                  100      0    323       my ($class, $index) = @_;
1106          32                                959       my $method = (caller(0))[3];
1107          32                               6832       $method =~ s/.*::(\w*)$/$1/;
1108          32                                750       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1109          32                               1077       &get_complement_ref($class, $index);
1110                                                  }    
1111                                                  
1112                                                  *get_Bonly = \&get_Ronly;
1113                                                  *get_Bonly_ref = \&get_Ronly_ref;
1114                                                  
1115                                                  sub get_symmetric_difference {
1116  ***     32                  100      0    184       return @{ get_symmetric_difference_ref(shift) };
              32                                267   
1117                                                  }
1118                                                  
1119                                                  sub get_symmetric_difference_ref {
1120  ***     64                  100      0    397       my $class = shift;
1121          64                               2963       my %data = %$class;
1122          64                               1788       return $data{'symmetric_difference'};
1123                                                  }
1124                                                  
1125                                                  *get_symdiff  = \&get_symmetric_difference;
1126                                                  *get_symdiff_ref  = \&get_symmetric_difference_ref;
1127                                                  
1128                                                  sub get_LorRonly {
1129  ***     16                  100      0    144       my $class = shift;
1130          16                                560       my $method = (caller(0))[3];
1131          16                               1241       $method =~ s/.*::(\w*)$/$1/;
1132          16                                352       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1133          16                                545       get_symmetric_difference($class);
1134                                                  }    
1135                                                  
1136                                                  sub get_LorRonly_ref {
1137  ***     16                  100      0    137       my $class = shift;
1138          16                                498       my $method = (caller(0))[3];
1139          16                                887       $method =~ s/.*::(\w*)$/$1/;
1140          16                                342       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1141          16                               6369       get_symmetric_difference_ref($class);
1142                                                  }    
1143                                                  
1144                                                  *get_AorBonly = \&get_LorRonly;
1145                                                  *get_AorBonly_ref = \&get_LorRonly_ref;
1146                                                  
1147                                                  sub get_nonintersection {
1148  ***      8                  100      0     47       return @{ get_nonintersection_ref(shift) };
               8                                 83   
1149                                                  }
1150                                                  
1151                                                  sub get_nonintersection_ref {
1152  ***     16                  100      0    121       my $class = shift;
1153          16                                763       my %data = %$class;
1154          16                                728       return $data{'nonintersection'};
1155                                                  }
1156                                                  
1157                                                  sub is_LsubsetR {
1158  ***     42                  100      0    344       my $class = shift;
1159          42                               2028       my %data = %$class;
1160          42                                686       my ($index_left, $index_right) = _index_message2(\%data, @_);
1161          40                                189       my @subset_array = @{$data{'xsubset'}};
              40                                413   
1162          40                                254       my $subset_status = $subset_array[$index_left][$index_right];
1163          40                                544       return $subset_status;
1164                                                  }
1165                                                  
1166                                                  *is_AsubsetB = \&is_LsubsetR;
1167                                                  
1168                                                  sub is_RsubsetL {
1169  ***     16                  100      0    109       my $class = shift;
1170          16                                827       my %data = %$class;
1171          16                                486       my $method = (caller(0))[3];
1172          16                                866       $method =~ s/.*::(\w*)$/$1/;
1173          16                                406       carp "When comparing 3 or more lists, \&$method or its alias is restricted to \n  asking if the list which is the 2nd argument to the constructor \n    is a subset of the list which is the 1st argument.\n      For greater flexibility, please re-code with \&is_LsubsetR: $!";
1174          16                                462       @_ = (1,0);
1175          16                                199       my ($index_left, $index_right) = _index_message2(\%data, @_);
1176          16                                150       my @subset_array = @{$data{'xsubset'}};
              16                                179   
1177          16                                182       my $subset_status = $subset_array[$index_left][$index_right];
1178          16                                460       return $subset_status;
1179                                                  }
1180                                                  
1181                                                  *is_BsubsetA = \&is_RsubsetL;
1182                                                  
1183                                                  sub is_LequivalentR {
1184  ***     26                  100      0    211       my $class = shift;
1185          26                               1249       my %data = %$class;
1186          26                                409       my ($index_left, $index_right) = _index_message2(\%data, @_);
1187          24                                121       my @equivalent_array = @{$data{'xequivalent'}};
              24                                250   
1188          24                                146       my $equivalent_status = $equivalent_array[$index_left][$index_right];
1189          24                                315       return $equivalent_status;
1190                                                  }
1191                                                  
1192                                                  *is_LeqvlntR = \&is_LequivalentR;
1193                                                  
1194                                                  sub is_LdisjointR {
1195  ***     29                  100      0    255       my $class = shift;
1196          29                               1280       my %data = %$class;
1197          29                                473       my ($index_left, $index_right) = _index_message2(\%data, @_);
1198          27                                145       my @disjoint_array = @{$data{'xdisjoint'}};
              27                                289   
1199          27                                171       my $disjoint_status = $disjoint_array[$index_left][$index_right];
1200          27                                348       return $disjoint_status;
1201                                                  }
1202                                                  
1203                                                  sub is_member_which {
1204  ***     88                  100      0    442       return @{ is_member_which_ref(@_) };
              88                                614   
1205                                                  }    
1206                                                  
1207                                                  sub is_member_which_ref {
1208  ***    177                  100      0   1229       my $class = shift;
1209  ***    177    100     66                 3678       croak "Method call requires exactly 1 argument (no references):  $!"
1210                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1211         176                              13817       my %data = %$class;
1212         176                               1392       my %seen = %{$data{'seen'}};
             176                               3335   
1213         176                               1081       my ($arg, @found);
1214         176                                981       $arg = shift;
1215         176                               4421       foreach (sort keys %seen) {
1216         880    100                        7918           push @found, $_ if (exists $seen{$_}{$arg});
1217                                                      }
1218         176                               4265       return \@found;
1219                                                  }    
1220                                                  
1221                                                  sub are_members_which {
1222  ***      9                  100      0    125       my $class = shift;
1223  ***      9    100     66                  363       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
1224                                                          unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
1225           8                                437       my %data = %$class;
1226           8                               1450       my %seen = %{$data{'seen'}};
               8                                186   
1227           8                                110       my (@args, %found);
1228           8                               1464       @args = @{$_[0]};
               8                                233   
1229                                                      for (my $i=0; $i<=$#args; $i++) {
1230          88                                186           my (@not_found);
1231          88                                955           foreach (sort keys %seen) {
1232         440                               8539               exists ${$seen{$_}}{$args[$i]}
             216                               1587   
1233         440    100                         941                   ? push @{$found{$args[$i]}}, $_
1234                                                                  : push @not_found, $_;
1235                                                          }
1236          88    100                        1430           $found{$args[$i]} = [] if (@not_found == keys %seen);
1237           8                                100       }
1238           8                                249       return \%found;
1239                                                  }    
1240                                                  
1241                                                  sub is_member_any {
1242  ***     89                  100      0    698       my $class = shift;
1243  ***     89    100     66                 1684       croak "Method call requires exactly 1 argument (no references):  $!"
1244                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1245          88                               3635       my %data = %$class;
1246          88                                693       my %seen = %{$data{'seen'}};
              88                               1769   
1247          88                                487       my ($arg, $k);
1248          88                                416       $arg = shift;
1249          88                                827       while ( $k = each %seen ) {
1250         176    100                        2797           return 1 if (defined $seen{$k}{$arg});
1251                                                      }
1252           8                                144       return 0;
1253                                                  }    
1254                                                  
1255                                                  sub are_members_any {
1256  ***      9                  100      0     69       my $class = shift;
1257  ***      9    100     66                  237       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
1258                                                          unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
1259           8                                328       my %data = %$class;
1260           8                                 75       my %seen = %{$data{'seen'}};
               8                                149   
1261           8                                 58       my (@args, %present);
1262           8                                 29       @args = @{$_[0]};
               8                                308   
1263                                                      for (my $i=0; $i<=$#args; $i++) {
1264          88                                609           foreach (keys %seen) {
1265         440    100                        1945               unless (defined $present{$args[$i]}) {
1266         176    100                        6738                   $present{$args[$i]} = 1 if $seen{$_}{$args[$i]};
1267                                                              }
1268                                                          }
1269          88    100                        1166           $present{$args[$i]} = 0 if (! defined $present{$args[$i]});
1270           8                                154       }
1271           8                                239       return \%present;
1272                                                  }    
1273                                                  
1274                                                  sub print_subset_chart {
1275  ***      8                  100      0     76       my $class = shift;
1276           8                                369       my %data = %$class;
1277           8                                 77       my @subset_array = @{$data{'xsubset'}};
               8                                122   
1278           8                                 43       my $title = 'subset';
1279           8                                115       _chart_engine_multiple(\@subset_array, $title);
1280                                                  }
1281                                                  
1282                                                  sub print_equivalence_chart {
1283  ***      8                  100      0   4984       my $class = shift;
1284           8                                401       my %data = %$class;
1285           8                                 84       my @equivalent_array = @{$data{'xequivalent'}};
               8                                176   
1286           8                                 87       my $title = 'Equivalence';
1287           8                                121       _chart_engine_multiple(\@equivalent_array, $title);
1288                                                  }
1289                                                  
1290                                                  sub get_bag {
1291  ***      8                  100      0     46       return @{ get_bag_ref(shift) };
               8                                 79   
1292                                                  }
1293                                                  
1294                                                  sub get_bag_ref {
1295  ***     16                  100      0    125       my $class = shift;
1296          16                                849       my %data = %$class;
1297          16                               1309       return $data{'bag'};
1298                                                  }
1299                                                  
1300                                                  sub get_version {
1301  ***      8                  100      0     82       return $List::Compare::VERSION;
1302                                                  }
1303                                                  
1304                                                  1;
1305                                                  
1306                                                  ################################################################################
1307                                                  
1308                                                  package List::Compare::Multiple::Accelerated;
1309          18                  100           659   use Carp;
              18                                500   
              18                                471   
1310          18                  100           638   use List::Compare::Base::_Auxiliary qw(
1311                                                      _argument_checker_0
1312                                                      _prepare_listrefs
1313                                                      _subset_subengine
1314                                                      _chart_engine_multiple
1315                                                      _equivalent_subengine
1316                                                      _index_message3
1317                                                      _index_message4
1318                                                      _prepare_listrefs 
1319                                                      _subset_engine_multaccel 
1320          18                                108   );
              18                                350   
1321          18                  100           261   use List::Compare::Base::_Auxiliary qw(:calculate);
              18                                 75   
              18                                193   
1322          18                  100         13672   use List::Compare::Base::_Engine    qw(
1323                                                      _unique_all_engine
1324                                                      _complement_all_engine
1325          18                                167   );
              18                                542   
1326                                                  
1327                                                  sub _init {
1328          28                  100           223       my $self = shift;
1329          28                                133       my $unsortflag = shift;
1330          28                                315       my @listrefs = _argument_checker_0(@_);
1331          22                                 99       my %data = ();
1332                                                      for (my $i=0; $i<=$#listrefs; $i++) {
1333         109                               1214           $data{$i} = $listrefs[$i]; 
1334          22                                172       }
1335          22    100                         206       $data{'unsort'} = $unsortflag ? 1 : 0;
1336          22                                212       return \%data;
1337                                                  }    
1338                                                  
1339                                                  sub get_union {
1340  ***      8                  100      0     54       return @{ get_union_ref(shift) };
               8                                 72   
1341                                                  }
1342                                                  
1343                                                  sub get_union_ref {
1344  ***     16                  100      0    109       my $class = shift;
1345          16                                443       my %data = %$class;
1346          16                                127       my $unsortflag = $data{'unsort'};
1347          16                                187       my $aref = _prepare_listrefs(\%data);
1348                                                  
1349          16                                151       my $unionref = _calculate_union_only($aref);
1350          16    100                         116       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
               8                                166   
               8                                214   
1351          16                                563       return \@union;
1352                                                  }
1353                                                  
1354                                                  sub get_intersection {
1355  ***      8                  100      0     43       return @{ get_intersection_ref(shift) };
               8                                 75   
1356                                                  }
1357                                                  
1358                                                  sub get_intersection_ref {
1359  ***     16                  100      0    185       my $class = shift;
1360          16                                541       my %data = %$class;
1361          16                                127       my $unsortflag = $data{'unsort'};
1362          16                                240       my $aref = _prepare_listrefs(\%data);
1363                                                  
1364                                                      # Calculate overall intersection
1365                                                      # Inputs:  %xintersection
1366          16                                178       my $xintersectionref = _calculate_xintersection_only($aref);
1367          16                                155       my $intersectionref = _calculate_hash_intersection($xintersectionref);
1368           8                                 79       my @intersection = 
1369          16    100                         123           $unsortflag ? keys %{$intersectionref} : sort(keys %{$intersectionref});
               8                                140   
1370          16                                819       return \@intersection;
1371                                                  }
1372                                                  
1373                                                  sub get_nonintersection {
1374  ***      8                  100      0     45       return @{ get_nonintersection_ref(shift) };
               8                                 71   
1375                                                  }
1376                                                  
1377                                                  sub get_nonintersection_ref {
1378  ***     16                  100      0    116       my $class = shift;
1379          16                                554       my %data = %$class;
1380          16                                126       my $unsortflag = $data{'unsort'};
1381          16                                195       my $aref = _prepare_listrefs(\%data);
1382                                                  
1383          16                                159       my ($unionref, $xintersectionref) = 
1384                                                          _calculate_union_xintersection_only($aref);
1385          16    100                         146       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
               8                                168   
               8                                293   
1386          16                                204       my $intersectionref = _calculate_hash_intersection($xintersectionref);
1387                                                  
1388                                                      # Calculate nonintersection
1389                                                      # Inputs:  @union    %intersection
1390          16                                 73       my (@nonintersection);
1391          16                                 86       foreach (@union) {
1392         160    100                         339           push(@nonintersection, $_) unless exists ${$intersectionref}{$_};
             160                               1472   
1393                                                      }
1394          16                              13211       return \@nonintersection;
1395                                                  }
1396                                                  
1397                                                  sub get_shared {
1398  ***      8                  100      0     42       return @{ get_shared_ref(shift) };
               8                                 81   
1399                                                  }
1400                                                  
1401                                                  sub get_shared_ref {
1402  ***     16                  100      0    110       my $class = shift;
1403          16                                502       my %data = %$class;
1404          16                                146       my $unsortflag = $data{'unsort'};
1405          16                                196       my $aref = _prepare_listrefs(\%data);
1406                                                  
1407                                                      # Calculate @shared
1408                                                      # Inputs:  %xintersection
1409          16                                162       my $xintersectionref = _calculate_xintersection_only($aref);
1410          16                                141       my $sharedref = _calculate_hash_shared($xintersectionref);
1411          16    100                         119       my @shared = $unsortflag ? keys %{$sharedref} : sort(keys %{$sharedref});
               8                                135   
               8                                220   
1412          16                                935       return \@shared;
1413                                                  }
1414                                                  
1415                                                  sub get_symmetric_difference {
1416  ***     32                  100      0    173       return @{ get_symmetric_difference_ref(shift) };
              32                                287   
1417                                                  }
1418                                                  
1419                                                  sub get_symmetric_difference_ref {
1420  ***     64                  100      0    410       my $class = shift;
1421          64                               1884       my %data = %$class;
1422          64                                454       my $unsortflag = $data{'unsort'};
1423          64                                730       my $aref = _prepare_listrefs(\%data);
1424                                                  
1425          64                                651       my ($unionref, $xintersectionref) = 
1426                                                          _calculate_union_xintersection_only($aref);
1427          64    100                         447       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
              32                                621   
              32                               1104   
1428                                                  
1429          64                                768       my $sharedref = _calculate_hash_shared($xintersectionref);
1430          64                                249       my (@symmetric_difference);
1431          64                                356       foreach (@union) {
1432         640    100                        1294           push(@symmetric_difference, $_) unless exists ${$sharedref}{$_};
             640                              10121   
1433                                                      }
1434          64                               4760       return \@symmetric_difference;
1435                                                  }
1436                                                  
1437                                                  *get_symdiff = \&get_symmetric_difference;
1438                                                  *get_symdiff_ref = \&get_symmetric_difference_ref;
1439                                                  
1440                                                  sub get_LorRonly {
1441  ***     16                  100      0    122       my $class = shift;
1442          16                                448       my $method = (caller(0))[3];
1443          16                                783       $method =~ s/.*::(\w*)$/$1/;
1444          16                                391       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1445          16                                475       get_symmetric_difference($class);
1446                                                  }    
1447                                                  
1448                                                  sub get_LorRonly_ref {
1449  ***     16                  100      0    134       my $class = shift;
1450          16                                468       my $method = (caller(0))[3];
1451          16                                814       $method =~ s/.*::(\w*)$/$1/;
1452          16                                346       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1453          16                                438       get_symmetric_difference_ref($class);
1454                                                  }    
1455                                                  
1456                                                  *get_AorBonly = \&get_LorRonly;
1457                                                  *get_AorBonly_ref = \&get_LorRonly_ref;
1458                                                  
1459                                                  sub get_unique {
1460  ***     44                  100      0    346       my $class = shift;
1461          44                               1230       my %data = %$class;
1462          44    100                         557       my $index = defined $_[0] ? shift : 0;
1463          44                                197       return @{ get_unique_ref($class, $index) };
              44                                256   
1464                                                  }
1465                                                  
1466                                                  sub get_unique_ref {
1467  ***     93                  100      0    510       my $class = shift;
1468          93                               1885       my %data = %$class;
1469          93    100                         949       my $index = defined $_[0] ? shift : 0;
1470          93                               1065       my $aref = _prepare_listrefs(\%data);
1471          93                                438       _index_message3($index, $#{$aref});
              93                               1353   
1472                                                  
1473          92                               1146       my $unique_all_ref = _unique_all_engine($aref);
1474          92                                369       return ${$unique_all_ref}[$index];
              92                               2649   
1475                                                  }
1476                                                  
1477                                                  sub get_unique_all {
1478  ***      8                  100      0     76       my $class = shift;
1479           8                                252       my %data = %$class;
1480           8                                117       my $aref = _prepare_listrefs(\%data);
1481           8                                106       return _unique_all_engine($aref);
1482                                                  }
1483                                                  
1484                                                  sub get_Lonly {
1485  ***     28                  100      0    230       my ($class, $index) = @_;
1486          28                               1104       my $method = (caller(0))[3];
1487          28                               1480       $method =~ s/.*::(\w*)$/$1/;
1488          28                                662       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1489          28                                897       get_unique($class, $index);
1490                                                  }    
1491                                                  
1492                                                  sub get_Lonly_ref {
1493  ***     32                  100      0    249       my ($class, $index) = @_;
1494          32                               1010       my $method = (caller(0))[3];
1495          32                               1769       $method =~ s/.*::(\w*)$/$1/;
1496          32                                733       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1497          32                               1153       get_unique_ref($class, $index);
1498                                                  }    
1499                                                  
1500                                                  *get_Aonly = \&get_Lonly;
1501                                                  *get_Aonly_ref = \&get_Lonly_ref;
1502                                                  
1503                                                  sub get_complement {
1504  ***     48                  100      0    355       my $class = shift;
1505          48                               1326       my %data = %$class;
1506          48    100                         567       my $index = defined $_[0] ? shift : 0;
1507          48                                190       return @{ get_complement_ref($class, $index) };
              48                                302   
1508                                                  }
1509                                                  
1510                                                  sub get_complement_ref {
1511  ***     97                  100      0    535       my $class = shift;
1512          97                               2046       my %data = %$class;
1513          97    100                         983       my $index = defined $_[0] ? shift : 0;
1514          97                                497       my $unsortflag = $data{'unsort'};
1515          97                               1071       my $aref = _prepare_listrefs(\%data);
1516          97                                469       _index_message3($index, $#{$aref});
              97                               1306   
1517                                                  
1518          96                               1060       my $complement_all_ref = _complement_all_engine($aref, $unsortflag );
1519          96                                430       return ${$complement_all_ref}[$index];
              96                               2718   
1520                                                  }
1521                                                  
1522                                                  sub get_complement_all {
1523  ***      8                  100      0     74       my $class = shift;
1524           8                                307       my %data = %$class;
1525           8                                118       my $aref = _prepare_listrefs(\%data);
1526           8                                 97       return _complement_all_engine($aref);
1527                                                  }
1528                                                  
1529                                                  sub get_Ronly {
1530  ***     32                  100      0    355       my ($class, $index) = @_;
1531          32                                794       my $method = (caller(0))[3];
1532          32                               1624       $method =~ s/.*::(\w*)$/$1/;
1533          32                                659       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1534          32                               6857       &get_complement($class, $index);
1535                                                  }    
1536                                                  
1537                                                  sub get_Ronly_ref {
1538  ***     32                  100      0    250       my ($class, $index) = @_;
1539          32                                942       my $method = (caller(0))[3];
1540          32                               1624       $method =~ s/.*::(\w*)$/$1/;
1541          32                                716       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1542          32                                880       &get_complement_ref($class, $index);
1543                                                  }    
1544                                                  
1545                                                  *get_Bonly = \&get_Ronly;
1546                                                  *get_Bonly_ref = \&get_Ronly_ref;
1547                                                  
1548                                                  sub is_LsubsetR {
1549  ***     42                  100      0    361       my $class = shift;
1550          42                               1542       my %data = %$class;
1551          42                                688       my $subset_status = _subset_engine_multaccel(\%data, @_);
1552          40                                697       return $subset_status;
1553                                                  }
1554                                                  
1555                                                  *is_AsubsetB = \&is_LsubsetR;
1556                                                  
1557                                                  sub is_RsubsetL {
1558  ***     16                  100      0    128       my $class = shift;
1559          16                                535       my %data = %$class;
1560                                                  
1561          16                                516       my $method = (caller(0))[3];
1562          16                               2364       $method =~ s/.*::(\w*)$/$1/;
1563          16                               1907       carp "When comparing 3 or more lists, \&$method or its alias is restricted to \n  asking if the list which is the 2nd argument to the constructor \n    is a subset of the list which is the 1st argument.\n      For greater flexibility, please re-code with \&is_LsubsetR: $!";
1564          16                                520       @_ = (1,0);
1565                                                  
1566          16                                206       my $subset_status = _subset_engine_multaccel(\%data, @_);
1567          16                                578       return $subset_status;
1568                                                  }
1569                                                  
1570                                                  *is_BsubsetA = \&is_RsubsetL;
1571                                                  
1572                                                  sub is_LequivalentR {
1573  ***     26                  100      0    271       my $class = shift;
1574          26                                945       my %data = %$class;
1575          26                                461       my $aref = _prepare_listrefs(\%data);
1576          26                                124       my ($index_left, $index_right) = _index_message4($#{$aref}, @_);
              26                                365   
1577                                                  
1578          24                                229       my $xequivalentref = _equivalent_subengine($aref);
1579          24                                101       return ${$xequivalentref}[$index_left][$index_right];
              24                                407   
1580                                                  }
1581                                                  
1582                                                  *is_LeqvlntR = \&is_LequivalentR;
1583                                                  
1584                                                  sub is_LdisjointR {
1585  ***      3                  100      0     29       my $class = shift;
1586           3                                103       my %data = %$class;
1587           3                                101       my $aref = _prepare_listrefs(\%data);
1588           3                                 14       my ($index_left, $index_right) = _index_message4($#{$aref}, @_);
               3                                 45   
1589                                                  
1590           3                                 16       my (@xdisjoint);
1591           3                                 26       my $xintersectionref = _calculate_xintersection_only($aref);
1592          21                                150       for (my $i = 0; $i <= $#{$aref}; $i++) {
1593          18                                 40           foreach (keys %{$xintersectionref}) {
              18                                204   
1594         270                               1238               my ($left, $right) = split /_/, $_;
1595         270                               2195               $xdisjoint[$left][$right] = $xdisjoint[$right][$left] = 
1596         270    100                         841                   ! scalar(keys %{${$xintersectionref}{$_}}) ? 1 : 0;
             270                                514   
1597                                                          }
1598          18                                161           $xdisjoint[$i][$i] = 0; 
1599           3                                 14       }
1600           3                                 14       my $disjoint_status = $xdisjoint[$index_left][$index_right];
1601           3                                169       return $disjoint_status;
1602                                                  }
1603                                                  
1604                                                  sub is_member_which {
1605  ***     88                  100      0    526       return @{ is_member_which_ref(@_) };
              88                                648   
1606                                                  }    
1607                                                  
1608                                                  sub is_member_which_ref {
1609  ***    177                  100      0   1347       my $class = shift;
1610  ***    177    100     66                15353       croak "Method call requires exactly 1 argument (no references):  $!"
1611                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1612         176                                646       my %data = %{$class};
             176                              17233   
1613         176                               8211       my $aref = _prepare_listrefs(\%data);
1614         176                               7100       my $seenref = _calculate_seen_only($aref);
1615         176                                829       my ($arg, @found);
1616         176                                906       $arg = shift;
1617         176                                542       foreach (sort keys %{$seenref}) {
             176                               3245   
1618         880    100                        1906           push @found, $_ if (exists ${$seenref}{$_}{$arg});
             880                               7517   
1619                                                      }
1620         176                               6704       return \@found;
1621                                                  }    
1622                                                  
1623                                                  sub are_members_which {
1624  ***      9                  100      0     85       my $class = shift;
1625                                                  #    croak "Method call needs at least one argument:  $!" unless (@_);
1626  ***      9    100     66                  295       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
1627                                                          unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
1628           8                                 40       my %data = %{$class};
               8                                306   
1629           8                                112       my $aref = _prepare_listrefs(\%data);
1630           8                                 71       my $seenref = _calculate_seen_only($aref);
1631           8                                 49       my (@args, %found);
1632           8                                 35       @args = @{$_[0]};
               8                                341   
1633                                                  #    @args = (@_ == 1 and ref($_[0]) eq 'ARRAY') 
1634                                                  #        ?  @{$_[0]}
1635                                                  #        :  @_;
1636                                                      for (my $i=0; $i<=$#args; $i++) {
1637          88                                183           my (@not_found);
1638          88                                207           foreach (sort keys %{$seenref}) {
              88                                936   
1639         440                                858               exists ${${$seenref}{$_}}{$args[$i]}
             440                               8639   
             216                               1713   
1640         440    100                         856                   ? push @{$found{$args[$i]}}, $_
1641                                                                  : push @not_found, $_;
1642                                                          }
1643          88    100                         474           $found{$args[$i]} = [] if (@not_found == keys %{$seenref});
              88                               1228   
1644           8                                152       }
1645           8                                318       return \%found;
1646                                                  }    
1647                                                  
1648                                                  sub is_member_any {
1649  ***     89                  100      0    820       my $class = shift;
1650  ***     89    100     66                 2122       croak "Method call requires exactly 1 argument (no references):  $!"
1651                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1652          88                               2309       my %data = %$class;
1653          88                               1143       my $aref = _prepare_listrefs(\%data);
1654          88                                698       my $seenref = _calculate_seen_only($aref);
1655          88                                398       my ($arg, $k);
1656          88                                433       $arg = shift;
1657          88                                304       while ( $k = each %{$seenref} ) {
             216                               1817   
1658         208    100                         637           return 1 if (defined ${$seenref}{$k}{$arg});
             208                               2402   
1659                                                      }
1660           8                                268       return 0;
1661                                                  }    
1662                                                  
1663                                                  sub are_members_any {
1664  ***      9                  100      0     81       my $class = shift;
1665                                                  #    croak "Method call needs at least one argument:  $!" unless (@_);
1666  ***      9    100     66                  359       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
1667                                                          unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
1668           8                                258       my %data = %$class;
1669           8                                113       my $aref = _prepare_listrefs(\%data);
1670           8                                 74       my $seenref = _calculate_seen_only($aref);
1671           8                                 48       my (@args, %present);
1672           8                                 37       @args = @{$_[0]};
               8                                385   
1673                                                  #    @args = (@_ == 1 and ref($_[0]) eq 'ARRAY') 
1674                                                  #        ?  @{$_[0]}
1675                                                  #        :  @_;
1676                                                      for (my $i=0; $i<=$#args; $i++) {
1677          88                                193           foreach (keys %{$seenref}) {
              88                                606   
1678         440    100                        1810               unless (defined $present{$args[$i]}) {
1679         208    100                         450                   $present{$args[$i]} = 1 if ${$seenref}{$_}{$args[$i]};
             208                               2216   
1680                                                              }
1681                                                          }
1682          88    100                        1134           $present{$args[$i]} = 0 if (! defined $present{$args[$i]});
1683           8                                 89       }
1684           8                                318       return \%present;
1685                                                  }    
1686                                                  
1687                                                  sub print_subset_chart {
1688  ***      8                  100      0     82       my $class = shift;
1689           8                                280       my %data = %$class;
1690           8                                119       my $aref = _prepare_listrefs(\%data);
1691           8                                 73       my $xsubsetref = _subset_subengine($aref);
1692           8                                 53       my $title = 'subset';
1693           8                                 91       _chart_engine_multiple($xsubsetref, $title);
1694                                                  }
1695                                                  
1696                                                  sub print_equivalence_chart {
1697  ***      8                  100      0    133       my $class = shift;
1698           8                                361       my %data = %$class;
1699           8                                133       my $aref = _prepare_listrefs(\%data);
1700           8                                 79       my $xequivalentref = _equivalent_subengine($aref);
1701           8                                 49       my $title = 'Equivalence';
1702           8                                 70       _chart_engine_multiple($xequivalentref, $title);
1703                                                  }
1704                                                  
1705                                                  sub get_bag {
1706  ***      8                  100      0     47       return @{ get_bag_ref(shift) };
               8                                160   
1707                                                  }
1708                                                  
1709                                                  sub get_bag_ref {
1710  ***     16                  100      0    167       my $class = shift;
1711          16                                515       my %data = %$class;
1712          16                                136       my $unsortflag = $data{'unsort'};
1713          16                                195       my $aref = _prepare_listrefs(\%data);
1714          16                                 79       my (@bag);
1715          16                                 62       my @listrefs = @{$aref};
              16                                129   
1716          16    100                         220       if (ref($listrefs[0]) eq 'ARRAY') { 
1717           8                                 38           foreach my $lref (@listrefs) {
1718          40                                 93               foreach my $el (@{$lref}) {
              40                                205   
1719         256                               1257                   push(@bag, $el);
1720                                                              }
1721                                                          }
1722                                                      } else {
1723           8                                 95           foreach my $lref (@listrefs) {
1724          40                                102               foreach my $key (keys %{$lref}) {
              40                                316   
1725         472                               3302                   for (my $j=1; $j <= ${$lref}{$key}; $j++) {
1726         256                               1305                       push(@bag, $key);
1727         216                                473                   }
1728                                                              }
1729                                                          }
1730                                                      }
1731          16    100                         342       @bag = sort(@bag) unless $unsortflag;
1732          16                               1247       return \@bag;
1733                                                  }
1734                                                  
1735                                                  sub get_version {
1736  ***      8                  100      0     84       return $List::Compare::VERSION;
1737                                                  }
1738                                                  
1739                                                  1;
1740                                                  
1741                                                  
1742                                                  __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
15           100    111    119   if (@_ == 1 and ref $_[0] eq 'HASH') { }
19           100      1    110   unless ${$argref;}{'lists'} and ref ${$argref;}{'lists'} eq 'ARRAY'
21           100     54     56   ${$argref;}{'unsorted'} ? :
22           100     64     46   ${$argref;}{'accelerated'} ? :
25           100     54     65   $args[0] eq '-u' || $args[0] eq '--unsorted' ? :
27           100     65     54   if $args[0] eq '-a' or $args[0] eq '--accelerated'
32           100    226      3   if (ref $args[0] eq 'ARRAY' or ref $args[0] eq 'HASH') { }
34           100     14    391   unless (ref $nextarg eq ref $args[0])
42           100     17    212   unless $argument_error_status
46           100     63    149   if (@args > 2) { }
             100    148      1   elsif (@args == 2) { }
47           100     28     35   if ($accelerated) { }
55           100     89     59   if ($accelerated) { }
67           100    108    103   $unsorted ? :
79           100     35     24   if (ref $refL eq 'HASH') { }
99           100     32     21   $unsortflag ? :
106          100    202     78   exists $seenR{$_} ? :
111          100     55    202   unless exists $intersection{$_}
116          100     11     42   if keys %LorRonly == 0
119          100     42    140   if (not exists $seenR{$_})
125          100     31    223   if (not exists $seenL{$_})
133          100     32     21   $unsortflag ? :
135          100     32     21   $unsortflag ? :
137          100     32     21   $unsortflag ? :
139          100     32     21   $unsortflag ? :
141          100     32     21   $unsortflag ? :
146          100     12     41   keys %intersection == 0 ? :
311          100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
316          100    112     64   if (exists ${$data{'seenL'};}{$arg})
317          100    112     64   if (exists ${$data{'seenR'};}{$arg})
318          100     48    128   if (not exists ${$data{'seenL'};}{$arg} and not exists ${$data{'seenR'};}{$arg})
326          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
332          100     56     32   if (exists ${$data{'seenL'};}{$args[$i]})
333          100     56     32   if (exists ${$data{'seenR'};}{$args[$i]})
334          100     24     64   if (not exists ${$data{'seenL'};}{$args[$i]} and not exists ${$data{'seenR'};}{$args[$i]})
343          100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
347          100     64     24   defined $data{'seenL'}{$arg} || defined $data{'seenR'}{$arg} ? :
353          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
359          100     64     24   defined $data{'seenL'}{$args[$i]} || defined $data{'seenR'}{$args[$i]} ? :
398          100     49     34   $unsortflag ? :
411          100      8     16   $data{'unsort'} ? :
423          100     12     20   $data{'unsort'} ? :
447          100     26     38   $data{'unsort'} ? :
469          100     26     38   $data{'unsort'} ? :
491          100     30     50   $data{'unsort'} ? :
561          100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
569          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
579          100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
587          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
602          100      8      8   if (ref $data{'L'} eq 'ARRAY') { }
604          100      4      4   $data{'unsort'} ? :
617          100      2      6   $data{'unsort'} ? :
631          100     96     48   if exists ${$hrefR;}{$_}
649          100     64    384   unless exists ${$hrefR;}{$_}
659          100     64    384   unless exists ${$hrefL;}{$_}
669          100     80    480   unless exists ${$hrefR;}{$_}
672          100     80    480   unless exists ${$hrefL;}{$_}
682          100     32    112   if (not exists ${$hrefR;}{$_})
695          100     16    112   if (not exists ${$hrefL;}{$_})
714          100    112     32   if exists ${$hrefR;}{$_}
716          100      4     24   keys %intersection == 0 ? :
724          100      8     32   if (not exists ${$hrefR;}{$_})
730          100      8     24   if (not exists ${$hrefL;}{$_})
753          100    112     64   if (exists ${$hrefL;}{$arg})
754          100    112     64   if (exists ${$hrefR;}{$arg})
755          100     48    128   if (not exists ${$hrefL;}{$arg} and not exists ${$hrefR;}{$arg})
767          100     56     32   if (exists ${$hrefL;}{$args[$i]})
768          100     56     32   if (exists ${$hrefR;}{$args[$i]})
769          100     24     64   if (not exists ${$hrefL;}{$args[$i]} and not exists ${$hrefR;}{$args[$i]})
780          100     64     24   defined ${$hrefL;}{$arg} || defined ${$hrefR;}{$arg} ? :
790          100     64     24   defined ${$hrefL;}{$args[$i]} || defined ${$hrefR;}{$args[$i]} ? :
814          100     15     20   if (ref $listrefs[0] eq 'ARRAY') { }
833          100     15     14   unless $unsortflag
882          100    957    483   if exists $seenthis{$_}
887          100     14     15   $unsortflag ? :
900          100    378    521   if exists $intersection{$_}
904          100     14     15   $unsortflag ? :
909          100    277     40   unless exists $intersection{$_}
921          100    670   1140   if ($left == $i or $right == $i)
925          100    270   1540   !keys(%{$xintersection{$_};}) ? :
933          100     85    725   unless $alldeductions{$_}
947          100    892    810   unless exists $seenthis{$_}
960          100     14     15   $unsortflag ? :
962          100     85    232   unless exists $shared{$_}
973          100   1596   2724   if not $tempj{$_}
983          100    212    612   if $xsubset[$f][$g] and $xsubset[$g][$f]
1038         100     20     24   defined $_[0] ? :
1045         100     69     24   defined $_[0] ? :
1078         100     24     24   defined $_[0] ? :
1085         100     73     24   defined $_[0] ? :
1209         100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1216         100    432    448   if exists $seen{$_}{$arg}
1223         100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
1233         100    216    224   exists ${$seen{$_};}{$args[$i]} ? :
1236         100      8     80   if @not_found == keys %seen
1243         100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1250         100     80     96   if defined $seen{$k}{$arg}
1257         100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
1265         100    176    264   unless (defined $present{$args[$i]})
1266         100     80     96   if $seen{$_}{$args[$i]}
1269         100      8     80   if not defined $present{$args[$i]}
1335         100     13      9   $unsortflag ? :
1350         100      8      8   $unsortflag ? :
1369         100      8      8   $unsortflag ? :
1385         100      8      8   $unsortflag ? :
1392         100    128     32   unless exists ${$intersectionref;}{$_}
1411         100      8      8   $unsortflag ? :
1427         100     32     32   $unsortflag ? :
1432         100    128    512   unless exists ${$sharedref;}{$_}
1462         100     20     24   defined $_[0] ? :
1469         100     69     24   defined $_[0] ? :
1506         100     24     24   defined $_[0] ? :
1513         100     73     24   defined $_[0] ? :
1596         100     90    180   !scalar(keys %{${$xintersectionref;}{$_};}) ? :
1610         100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1618         100    432    448   if exists ${$seenref;}{$_}{$arg}
1626         100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
1640         100    216    224   exists ${${$seenref;}{$_};}{$args[$i]} ? :
1643         100      8     80   if @not_found == keys %{$seenref;}
1650         100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1658         100     80    128   if defined ${$seenref;}{$k}{$arg}
1666         100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
1678         100    208    232   unless (defined $present{$args[$i]})
1679         100     80    128   if ${$seenref;}{$_}{$args[$i]}
1682         100      8     80   if not defined $present{$args[$i]}
1716         100      8      8   if (ref $listrefs[0] eq 'ARRAY') { }
1731         100      8      8   unless $unsortflag


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
15           100    118      1    111   @_ == 1 and ref $_[0] eq 'HASH'
18    ***     66      0      1    110   ${$argref;}{'lists'} and ref ${$argref;}{'lists'} eq 'ARRAY'
311   ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
318          100    112     16     48   not exists ${$data{'seenL'};}{$arg} and not exists ${$data{'seenR'};}{$arg}
326   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
334          100     56      8     24   not exists ${$data{'seenL'};}{$args[$i]} and not exists ${$data{'seenR'};}{$args[$i]}
343   ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
353   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
561   ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
569   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
579   ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
587   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
755          100    112     16     48   not exists ${$hrefL;}{$arg} and not exists ${$hrefR;}{$arg}
769          100     56      8     24   not exists ${$hrefL;}{$args[$i]} and not exists ${$hrefR;}{$args[$i]}
983          100    554     58    212   $xsubset[$f][$g] and $xsubset[$g][$f]
1209  ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
1223  ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
1243  ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
1257  ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
1610  ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
1626  ***     66      1      0      8   @_ == 1 and ref $_[0] eq 'ARRAY'
1650  ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
1666  ***     66      1      0      8   @_ == 1 and ref $_[0] eq 'ARRAY'

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
25           100     32     22     65   $args[0] eq '-u' || $args[0] eq '--unsorted'
27           100     45     20     54   $args[0] eq '-a' or $args[0] eq '--accelerated'
32           100    101    125      3   ref $args[0] eq 'ARRAY' or ref $args[0] eq 'HASH'
49    ***     33      0     28      0   ref $class || $class
52    ***     33      0     35      0   ref $class || $class
57    ***     33      0     89      0   ref $class || $class
59    ***     33      0     59      0   ref $class || $class
347          100     56      8     24   defined $data{'seenL'}{$arg} || defined $data{'seenR'}{$arg}
359          100     56      8     24   defined $data{'seenL'}{$args[$i]} || defined $data{'seenR'}{$args[$i]}
780          100     56      8     24   defined ${$hrefL;}{$arg} || defined ${$hrefR;}{$arg}
790          100     56      8     24   defined ${$hrefL;}{$args[$i]} || defined ${$hrefR;}{$args[$i]}
921          100    335    335   1140   $left == $i or $right == $i


Covered Subroutines
-------------------

Subroutine                      Location                     
------------------------------- -----------------------------
BEGIN                           blib/lib/List/Compare.pm:1309
BEGIN                           blib/lib/List/Compare.pm:1310
BEGIN                           blib/lib/List/Compare.pm:1321
BEGIN                           blib/lib/List/Compare.pm:1322
BEGIN                           blib/lib/List/Compare.pm:3   
BEGIN                           blib/lib/List/Compare.pm:384 
BEGIN                           blib/lib/List/Compare.pm:385 
BEGIN                           blib/lib/List/Compare.pm:5   
BEGIN                           blib/lib/List/Compare.pm:6   
BEGIN                           blib/lib/List/Compare.pm:800 
BEGIN                           blib/lib/List/Compare.pm:801 
_are_members_any_engine         blib/lib/List/Compare.pm:784 
_are_members_which_engine       blib/lib/List/Compare.pm:762 
_complement_engine              blib/lib/List/Compare.pm:655 
_init                           blib/lib/List/Compare.pm:1328
_init                           blib/lib/List/Compare.pm:394 
_init                           blib/lib/List/Compare.pm:76  
_init                           blib/lib/List/Compare.pm:809 
_intersection_engine            blib/lib/List/Compare.pm:627 
_is_LdisjointR_engine           blib/lib/List/Compare.pm:710 
_is_LequivalentR_engine         blib/lib/List/Compare.pm:704 
_is_LsubsetR_engine             blib/lib/List/Compare.pm:678 
_is_RsubsetL_engine             blib/lib/List/Compare.pm:691 
_is_member_any_engine           blib/lib/List/Compare.pm:777 
_is_member_which_engine         blib/lib/List/Compare.pm:750 
_print_equivalence_chart_engine blib/lib/List/Compare.pm:741 
_print_subset_chart_engine      blib/lib/List/Compare.pm:720 
_symmetric_difference_engine    blib/lib/List/Compare.pm:665 
_union_engine                   blib/lib/List/Compare.pm:637 
_unique_engine                  blib/lib/List/Compare.pm:645 
are_members_any                 blib/lib/List/Compare.pm:1256
are_members_any                 blib/lib/List/Compare.pm:1664
are_members_any                 blib/lib/List/Compare.pm:352 
are_members_any                 blib/lib/List/Compare.pm:586 
are_members_which               blib/lib/List/Compare.pm:1222
are_members_which               blib/lib/List/Compare.pm:1624
are_members_which               blib/lib/List/Compare.pm:325 
are_members_which               blib/lib/List/Compare.pm:568 
get_Lonly                       blib/lib/List/Compare.pm:1057
get_Lonly                       blib/lib/List/Compare.pm:1485
get_Lonly_ref                   blib/lib/List/Compare.pm:1065
get_Lonly_ref                   blib/lib/List/Compare.pm:1493
get_LorRonly                    blib/lib/List/Compare.pm:1129
get_LorRonly                    blib/lib/List/Compare.pm:1441
get_LorRonly_ref                blib/lib/List/Compare.pm:1137
get_LorRonly_ref                blib/lib/List/Compare.pm:1449
get_Ronly                       blib/lib/List/Compare.pm:1097
get_Ronly                       blib/lib/List/Compare.pm:1530
get_Ronly_ref                   blib/lib/List/Compare.pm:1105
get_Ronly_ref                   blib/lib/List/Compare.pm:1538
get_bag                         blib/lib/List/Compare.pm:1291
get_bag                         blib/lib/List/Compare.pm:1706
get_bag                         blib/lib/List/Compare.pm:366 
get_bag                         blib/lib/List/Compare.pm:596 
get_bag_ref                     blib/lib/List/Compare.pm:1295
get_bag_ref                     blib/lib/List/Compare.pm:1710
get_bag_ref                     blib/lib/List/Compare.pm:370 
get_bag_ref                     blib/lib/List/Compare.pm:600 
get_complement                  blib/lib/List/Compare.pm:1076
get_complement                  blib/lib/List/Compare.pm:1504
get_complement                  blib/lib/List/Compare.pm:207 
get_complement                  blib/lib/List/Compare.pm:461 
get_complement_all              blib/lib/List/Compare.pm:1091
get_complement_all              blib/lib/List/Compare.pm:1523
get_complement_all              blib/lib/List/Compare.pm:217 
get_complement_all              blib/lib/List/Compare.pm:473 
get_complement_ref              blib/lib/List/Compare.pm:1083
get_complement_ref              blib/lib/List/Compare.pm:1511
get_complement_ref              blib/lib/List/Compare.pm:211 
get_complement_ref              blib/lib/List/Compare.pm:465 
get_intersection                blib/lib/List/Compare.pm:1006
get_intersection                blib/lib/List/Compare.pm:1355
get_intersection                blib/lib/List/Compare.pm:152 
get_intersection                blib/lib/List/Compare.pm:403 
get_intersection_ref            blib/lib/List/Compare.pm:1010
get_intersection_ref            blib/lib/List/Compare.pm:1359
get_intersection_ref            blib/lib/List/Compare.pm:156 
get_intersection_ref            blib/lib/List/Compare.pm:407 
get_nonintersection             blib/lib/List/Compare.pm:1148
get_nonintersection             blib/lib/List/Compare.pm:1374
get_nonintersection             blib/lib/List/Compare.pm:245 
get_nonintersection             blib/lib/List/Compare.pm:502 
get_nonintersection_ref         blib/lib/List/Compare.pm:1152
get_nonintersection_ref         blib/lib/List/Compare.pm:1378
get_nonintersection_ref         blib/lib/List/Compare.pm:252 
get_nonintersection_ref         blib/lib/List/Compare.pm:506 
get_shared                      blib/lib/List/Compare.pm:1026
get_shared                      blib/lib/List/Compare.pm:1398
get_shared                      blib/lib/List/Compare.pm:172 
get_shared                      blib/lib/List/Compare.pm:427 
get_shared_ref                  blib/lib/List/Compare.pm:1030
get_shared_ref                  blib/lib/List/Compare.pm:1402
get_shared_ref                  blib/lib/List/Compare.pm:179 
get_shared_ref                  blib/lib/List/Compare.pm:431 
get_symmetric_difference        blib/lib/List/Compare.pm:1116
get_symmetric_difference        blib/lib/List/Compare.pm:1416
get_symmetric_difference        blib/lib/List/Compare.pm:228 
get_symmetric_difference        blib/lib/List/Compare.pm:483 
get_symmetric_difference_ref    blib/lib/List/Compare.pm:1120
get_symmetric_difference_ref    blib/lib/List/Compare.pm:1420
get_symmetric_difference_ref    blib/lib/List/Compare.pm:232 
get_symmetric_difference_ref    blib/lib/List/Compare.pm:487 
get_union                       blib/lib/List/Compare.pm:1016
get_union                       blib/lib/List/Compare.pm:1340
get_union                       blib/lib/List/Compare.pm:162 
get_union                       blib/lib/List/Compare.pm:415 
get_union_ref                   blib/lib/List/Compare.pm:1020
get_union_ref                   blib/lib/List/Compare.pm:1344
get_union_ref                   blib/lib/List/Compare.pm:166 
get_union_ref                   blib/lib/List/Compare.pm:419 
get_unique                      blib/lib/List/Compare.pm:1036
get_unique                      blib/lib/List/Compare.pm:1460
get_unique                      blib/lib/List/Compare.pm:186 
get_unique                      blib/lib/List/Compare.pm:439 
get_unique_all                  blib/lib/List/Compare.pm:1051
get_unique_all                  blib/lib/List/Compare.pm:1478
get_unique_all                  blib/lib/List/Compare.pm:196 
get_unique_all                  blib/lib/List/Compare.pm:451 
get_unique_ref                  blib/lib/List/Compare.pm:1043
get_unique_ref                  blib/lib/List/Compare.pm:1467
get_unique_ref                  blib/lib/List/Compare.pm:190 
get_unique_ref                  blib/lib/List/Compare.pm:443 
get_version                     blib/lib/List/Compare.pm:1301
get_version                     blib/lib/List/Compare.pm:1736
get_version                     blib/lib/List/Compare.pm:376 
get_version                     blib/lib/List/Compare.pm:623 
is_LdisjointR                   blib/lib/List/Compare.pm:1195
is_LdisjointR                   blib/lib/List/Compare.pm:1585
is_LdisjointR                   blib/lib/List/Compare.pm:283 
is_LdisjointR                   blib/lib/List/Compare.pm:538 
is_LequivalentR                 blib/lib/List/Compare.pm:1184
is_LequivalentR                 blib/lib/List/Compare.pm:1573
is_LequivalentR                 blib/lib/List/Compare.pm:275 
is_LequivalentR                 blib/lib/List/Compare.pm:530 
is_LsubsetR                     blib/lib/List/Compare.pm:1158
is_LsubsetR                     blib/lib/List/Compare.pm:1549
is_LsubsetR                     blib/lib/List/Compare.pm:259 
is_LsubsetR                     blib/lib/List/Compare.pm:514 
is_RsubsetL                     blib/lib/List/Compare.pm:1169
is_RsubsetL                     blib/lib/List/Compare.pm:1558
is_RsubsetL                     blib/lib/List/Compare.pm:267 
is_RsubsetL                     blib/lib/List/Compare.pm:522 
is_member_any                   blib/lib/List/Compare.pm:1242
is_member_any                   blib/lib/List/Compare.pm:1649
is_member_any                   blib/lib/List/Compare.pm:342 
is_member_any                   blib/lib/List/Compare.pm:578 
is_member_which                 blib/lib/List/Compare.pm:1204
is_member_which                 blib/lib/List/Compare.pm:1605
is_member_which                 blib/lib/List/Compare.pm:306 
is_member_which                 blib/lib/List/Compare.pm:556 
is_member_which_ref             blib/lib/List/Compare.pm:1208
is_member_which_ref             blib/lib/List/Compare.pm:1609
is_member_which_ref             blib/lib/List/Compare.pm:310 
is_member_which_ref             blib/lib/List/Compare.pm:560 
new                             blib/lib/List/Compare.pm:12  
print_equivalence_chart         blib/lib/List/Compare.pm:1283
print_equivalence_chart         blib/lib/List/Compare.pm:1697
print_equivalence_chart         blib/lib/List/Compare.pm:297 
print_equivalence_chart         blib/lib/List/Compare.pm:550 
print_subset_chart              blib/lib/List/Compare.pm:1275
print_subset_chart              blib/lib/List/Compare.pm:1688
print_subset_chart              blib/lib/List/Compare.pm:289 
print_subset_chart              blib/lib/List/Compare.pm:544 


blib/lib/List/Compare/Base/_Auxiliary.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare::Base::_Auxiliary;
2                                                     $VERSION = 0.31;
3                                                     # As of:  08/15/2004
4             28                  100           441   use Carp;
              28                                115   
              28                                579   
5                                                     @ISA = qw(Exporter);
6                                                     @EXPORT_OK = qw|
7                                                         _validate_2_seenhashes
8                                                         _validate_seen_hash
9                                                         _validate_multiple_seenhashes
10                                                        _calculate_union_xintersection_only
11                                                        _calculate_seen_xintersection_only
12                                                        _calculate_seen_only
13                                                        _calculate_xintersection_only
14                                                        _calculate_union_only
15                                                        _calculate_union_seen_only
16                                                        _calculate_hash_intersection
17                                                        _calculate_hash_shared
18                                                        _subset_subengine
19                                                        _chart_engine_regular 
20                                                        _chart_engine_multiple
21                                                        _equivalent_subengine
22                                                        _index_message1
23                                                        _index_message2
24                                                        _index_message3
25                                                        _index_message4
26                                                        _prepare_listrefs 
27                                                        _subset_engine_multaccel 
28                                                        _calc_seen
29                                                        _calc_seen1
30                                                        _equiv_engine 
31                                                        _argument_checker_0 
32                                                        _argument_checker 
33                                                        _argument_checker_1 
34                                                        _argument_checker_2 
35                                                        _argument_checker_3 
36                                                        _argument_checker_3a 
37                                                        _argument_checker_4
38                                                        _alt_construct_tester 
39                                                        _alt_construct_tester_1 
40                                                        _alt_construct_tester_2 
41                                                        _alt_construct_tester_3 
42                                                        _alt_construct_tester_4 
43                                                        _alt_construct_tester_5 
44                                                    |;
45                                                    %EXPORT_TAGS = (
46                                                        calculate => [ qw(
47                                                            _calculate_union_xintersection_only
48                                                            _calculate_seen_xintersection_only
49                                                            _calculate_seen_only
50                                                            _calculate_xintersection_only
51                                                            _calculate_union_only
52                                                            _calculate_union_seen_only
53                                                            _calculate_hash_intersection
54                                                            _calculate_hash_shared
55                                                        ) ],
56                                                        checker => [ qw(
57                                                            _argument_checker_0 
58                                                            _argument_checker 
59                                                            _argument_checker_1 
60                                                            _argument_checker_2 
61                                                            _argument_checker_3 
62                                                            _argument_checker_3a 
63                                                            _argument_checker_4
64                                                        ) ],
65                                                        tester => [ qw(
66                                                            _alt_construct_tester 
67                                                            _alt_construct_tester_1 
68                                                            _alt_construct_tester_2 
69                                                            _alt_construct_tester_3 
70                                                            _alt_construct_tester_4 
71                                                            _alt_construct_tester_5 
72                                                        ) ],
73                                                    );
74            28                  100           493   use strict;
              28                                419   
              28                                295   
75                                                    
76                                                    sub _validate_2_seenhashes {
77            35                  100           171       my ($refL, $refR) = @_;
78            35                                141       my (%seenL, %seenR);
79            35                                133       my (%badentriesL, %badentriesR);
80            35                                706       foreach (keys %$refL) {
81    ***    174    100     66                  389           if (${$refL}{$_} =~ /^\d+$/ and ${$refL}{$_} > 0) {
             174                               2118   
             174                               1471   
82           170                                379               $seenL{$_} = ${$refL}{$_};
             170                               1332   
83                                                            } else {
84             4                                 15               $badentriesL{$_} = ${$refL}{$_};
               4                                 41   
85                                                            }
86                                                        } 
87            35                                432       foreach (keys %$refR) {
88           161    100    100                  385           if (${$refR}{$_} =~ /^\d+$/ and ${$refR}{$_} > 0) {
             161                               1321   
             159                             110932   
89           157                                338               $seenR{$_} = ${$refR}{$_};
             157                               2068   
90                                                            } else {
91             4                                 19               $badentriesR{$_} = ${$refR}{$_};
               4                                 41   
92                                                            }
93                                                        }
94            35    100    100                  548       if ( (keys %badentriesL) or (keys %badentriesR) ) {
95             6                                938           print "\nValues in a 'seen-hash' may only be positive integers.\n";
96             6                                462           print "  These elements have invalid values:\n\n";
97             6    100                          71           if (keys %badentriesL) {
98             4                                272               print "  First hash in arguments:\n\n";
99                                                                print "     Key:  $_\tValue:  $badentriesL{$_}\n" 
100            4                                 18                   foreach (sort keys %badentriesL);
               4                                294   
101                                                           } 
102            6    100                          94           if (keys %badentriesR) {
103            4                                280               print "  Second hash in arguments:\n\n";
104                                                               print "     Key:  $_\tValue:  $badentriesR{$_}\n" 
105            4                                 17                   foreach (sort keys %badentriesR);
               4                                290   
106                                                           }
107            6                              13981           croak "Correct invalid values before proceeding:  $!";
108                                                       }
109           29                                394       return (\%seenL, \%seenR);
110                                                   }
111                                                   
112                                                   sub _validate_seen_hash {
113          503    100           100          3740       if (@_ > 2) {
114          258                               2823           _validate_multiple_seenhashes( [@_] );
115                                                       } else { 
116          245                               1118           my ($l, $r) = @_;
117          245                                885           my (%badentriesL, %badentriesR);
118          245                               3907           foreach (keys %$l) {
119            4                                 55               $badentriesL{$_} = ${$l}{$_} 
            1592                              11381   
120   ***   1592    100     66                 3308                   unless (${$l}{$_} =~ /^\d+$/ and ${$l}{$_} > 0);
            1592                             138400   
121                                                           } 
122          245                               8823           foreach (keys %$r) {
123            4                                128               $badentriesR{$_} = ${$r}{$_} 
            1569                               9044   
124         1569    100    100                 3208                   unless (${$r}{$_} =~ /^\d+$/ and ${$r}{$_} > 0);
            1567                              12187   
125                                                           }
126          245    100    100               104975           if ( (keys %badentriesL) or (keys %badentriesR) ) {
127            6                                907               print "\nValues in a 'seen-hash' may only be numeric.\n";
128            6                                456               print "  These elements have invalid values:\n\n";
129            6    100                          77               if (keys %badentriesL) {
130            4                                265                   print "  First hash in arguments:\n\n";
131                                                                   print "     Key:  $_\tValue:  $badentriesL{$_}\n" 
132            4                                 15                       foreach (sort keys %badentriesL);
               4                                293   
133                                                               } 
134            6    100                        4893               if (keys %badentriesR) {
135            4                                597                   print "  Second hash in arguments:\n\n";
136                                                                   print "     Key:  $_\tValue:  $badentriesR{$_}\n" 
137            4                                 19                       foreach (sort keys %badentriesR);
               4                                606   
138                                                               }
139            6                                138               croak "Correct invalid values before proceeding:  $!";
140                                                           }
141                                                       }
142                                                   }
143                                                   
144                                                   sub _validate_multiple_seenhashes {
145          258                  100          1255       my $hashrefsref = shift;
146          258                               1011       my @hashrefs = @{$hashrefsref};
             258                               1828   
147          258                               1289       my (%badentries, $badentriesflag);
148                                                       for (my $i = 0; $i <= $#hashrefs; $i++) {
149         1276                               3193           my %seenhash = %{$hashrefs[$i]};
            1276                              24557   
150         1276                              22378           foreach (keys %seenhash) {
151         6804    100    100               142513               unless ($seenhash{$_} =~ /^\d+$/ and $seenhash{$_} > 0) {
152           24                                222                   $badentries{$i}{$_} = $seenhash{$_};
153           24                               5302                   $badentriesflag++;
154                                                               }
155                                                           }
156          258                               1053       }
157          258    100                        3459       if ($badentriesflag) {
158           12                               9145           print "\nValues in a 'seen-hash' may only be positive integers.\n";
159           12                               1669           print "  These elements have invalid values:\n\n";
160           12                                500           foreach (sort keys %badentries) {
161           24                               2081               print "    Hash $_:\n";
162           24                                 99               my %pairs = %{$badentries{$_}};
              24                                270   
163           24                                181               foreach my $val (sort keys %pairs) {
164           24                               2184                   print "        Bad key-value pair:  $val\t$pairs{$val}\n";
165                                                               }
166                                                           }
167           12                                312           croak "Correct invalid values before proceeding:  $!";
168                                                       }
169                                                   }
170                                                   
171                                                   sub _list_builder {
172        10467                  100        107811       my ($aref, $x) = @_;
173        10467    100                       23214       if (ref(${$aref}[$x]) eq 'HASH') {
           10467                              91514   
174         7474                              22673           return keys %{${$aref}[$x]};
            7474                              50362   
            7474                             146435   
175                                                       } else {
176         2993                               6559           return      @{${$aref}[$x]};
            2993                              12388   
            2993                              59881   
177                                                       }
178                                                   }
179                                                   
180                                                   sub _calculate_union_xintersection_only {
181          200                  100          1004       my $aref = shift;
182          200                                855       my (%union, %xintersection);
183         1020                              15171       for (my $i = 0; $i <= $#{$aref}; $i++) {
184          820                               1941           my %seenthis = ();
185          820                               3357           foreach my $h ( _list_builder($aref, $i) ) {
186         4820                              14372               $seenthis{$h}++;
187         4820                              35437               $union{$h}++;
188                                                           }
189         2280                              24425           for (my $j = $i+1; $j <=$#{$aref}; $j++) {
190         1460                               3017               my %seenthat = ();
191         1460                               2984               my %seenintersect = ();
192         1460                              12259               my $ilabel = $i . '_' . $j;
193         1460                               2728               $seenthat{$_}++ foreach ( _list_builder($aref, $j) );
            1460                               5573   
194         1460                              12842               foreach my $k (keys %seenthat) {
195         6720    100                       91693                   $seenintersect{$k}++ if (exists $seenthis{$k});
196                                                               }
197         1460                              17967               $xintersection{$ilabel} = \%seenintersect;
198          820                               6119           }
199          200                                860       }
200          200                               2373       return (\%union, \%xintersection);
201                                                   }
202                                                   
203                                                   sub _calculate_seen_xintersection_only {
204          179                  100           724       my $aref = shift;
205          179                                842       my (%xintersection, %seen);
206          990                               7860       for (my $i = 0; $i <= $#{$aref}; $i++) {
207          811                               1911           my %seenthis = ();
208          811                               3406           foreach my $h ( _list_builder($aref, $i) ) {
209         4747                              42531               $seenthis{$h}++;
210                                                           }
211          811                              19652           $seen{$i} = \%seenthis;
212         2349                              24207           for (my $j = $i+1; $j <=$#{$aref}; $j++) {
213         1538                               9614               my (%seenthat, %seenintersect);
214         1538                               6175               my $ilabel = $i . '_' . $j;
215         1538                               2945               $seenthat{$_}++ foreach ( _list_builder($aref, $j) );
            1538                              16777   
216         1538                              26496               foreach (keys %seenthat) {
217         6991    100                       73994                   $seenintersect{$_}++ if (exists $seenthis{$_});
218                                                               }
219         1538                              38723               $xintersection{$ilabel} = \%seenintersect;
220          811                               8927           }
221          179                                750       }
222          179                               2436       return (\%seen, \%xintersection);
223                                                   }
224                                                   
225                                                   sub _calculate_seen_only {
226          754                  100          9409       my $aref = shift;
227          754                               2372       my (%seen);
228         3960                             129815       for (my $i = 0; $i <= $#{$aref}; $i++) {
229         3206                               7165           my %seenthis = ();
230         3206                              23540           foreach my $h ( _list_builder($aref, $i) ) {
231        18726                             125530               $seenthis{$h}++;
232                                                           }
233         3206                              71661           $seen{$i} = \%seenthis;
234          754                               2800       }
235          754                               7997       return \%seen;
236                                                   }
237                                                   
238                                                   sub _calculate_xintersection_only {
239          142                  100           759       my $aref = shift;
240          142                                558       my (%xintersection);
241          711                               6246       for (my $i = 0; $i <= $#{$aref}; $i++) {
242          569                               7070           my %seenthis = ();
243          569                               2428           foreach my $h ( _list_builder($aref, $i) ) {
244         3246                              17545               $seenthis{$h}++;
245                                                           }
246         1596                              18833           for (my $j = $i+1; $j <=$#{$aref}; $j++) {
247         1027                               2708               my (%seenthat, %seenintersect);
248         1027                              22630               my $ilabel = $i . '_' . $j;
249         1027                               1916               $seenthat{$_}++ foreach ( _list_builder($aref, $j) );
            1027                               3496   
250         1027                               8919               foreach (keys %seenthat) {
251         4611    100                       82368                   $seenintersect{$_}++ if (exists $seenthis{$_});
252                                                               }
253         1027                              18305               $xintersection{$ilabel} = \%seenintersect;
254          569                               3992           }
255          142                                635       }
256          142                               1268       return \%xintersection;
257                                                   }
258                                                   
259                                                   sub _calculate_union_only {
260           56                  100           264       my $aref = shift;
261           56                                183       my (%union);
262          276                               2522       for (my $i = 0; $i <= $#{$aref}; $i++) {
263          220                                898           foreach my $h ( _list_builder($aref, $i) ) {
264         1292                               5576               $union{$h}++;
265                                                           }
266           56                                225       }
267           56                                459       return \%union;
268                                                   }
269                                                   
270                                                   sub _calculate_union_seen_only {
271          180                  100           786       my $aref = shift;
272          180                                980       my (%union, %seen);
273          996                               9023       for (my $i = 0; $i <= $#{$aref}; $i++) {
274          816                               1862           my %seenthis = ();
275          816                               3408           foreach my $h ( _list_builder($aref, $i) ) {
276         4784                              17333               $seenthis{$h}++;
277         4784                              28014               $union{$h}++;
278                                                           }
279          816                               9560           $seen{$i} = \%seenthis;
280          180                                713       }
281          180                               2780       return (\%union, \%seen);
282                                                   }
283                                                   
284                                                   sub _calculate_hash_intersection {
285          115                  100           588       my $xintersectionref = shift;
286          115                                421       my @xkeys = keys %{$xintersectionref};
             115                               1775   
287          115                                701       my %intersection = %{${$xintersectionref}{$xkeys[0]}};
             115                                413   
             115                               1555   
288                                                       for (my $m = 1; $m <= $#xkeys; $m++) {
289          675                               1584           my %compare = %{${$xintersectionref}{$xkeys[$m]}};
             675                               7187   
             675                               6054   
290          675                               8134           my %result = ();
291          675                               9613           foreach (keys %compare) {
292         2325    100                       33287               $result{$_}++ if (exists $intersection{$_});
293                                                           }
294          675                              15884           %intersection = %result;
295          115                                643       }
296          115                               1543       return \%intersection;
297                                                   }
298                                                   
299                                                   sub _calculate_hash_shared {
300          200                  100          1012       my $xintersectionref = shift;
301          200                               6413       my (%shared);
302          200                                710       foreach my $q (keys %{$xintersectionref}) {
             200                               2123   
303         1460                               2897           $shared{$_}++ foreach (keys %{${$xintersectionref}{$q}});
            1460                               3262   
            1460                               3403   
            1460                              55899   
304                                                       }
305          200                               2330       return \%shared;
306                                                   }
307                                                   
308                                                   sub _subset_subengine {
309          194                  100           882       my $aref = shift;
310          194                                638       my (@xsubset);
311          194                               1169       my $seenref = _calculate_seen_only($aref);
312          194                                710       my %seen = %{$seenref};
             194                               2491   
313          194                               1571       foreach my $i (keys %seen) {
314          826                               2027           my %tempi = %{$seen{$i}};
             826                              14477   
315          826                               7861           foreach my $j (keys %seen) {
316         3842                               8430               my %tempj = %{$seen{$j}};
            3842                             120220   
317         3842                              43811               $xsubset[$i][$j] = 1;
318         3842                             122056               foreach my $k (keys %tempi) {
319        20798    100                      166112                   $xsubset[$i][$j] = 0 if (! $tempj{$k});
320                                                               }
321                                                           }
322                                                       }
323          194                               5114       return \@xsubset;
324                                                   }
325                                                   
326                                                   sub _chart_engine_regular {
327           32                  100           162       my $aref = shift;
328           32                                229       my @sub_or_eqv = @$aref;
329           32                                145       my $title = shift;
330           32                                125       my ($v, $w, $t);
331           32                               3013       print "\n";
332           32                               2268       print $title, ' Relationships', "\n\n";
333           32                               6789       print '   Right:    0    1', "\n\n";
334           32                               2270       print 'Left:  0:    1    ', $sub_or_eqv[0], "\n\n";
335           32                               2354       print '       1:    ', $sub_or_eqv[1], '    1', "\n\n";
336                                                   }
337                                                   
338                                                   sub _chart_engine_multiple {
339           48                  100           256       my $aref = shift;
340           48                                333       my @sub_or_eqv = @$aref;
341           48                                229       my $title = shift;
342           48                                217       my ($v, $w, $t);
343           48                              10078       print "\n";
344           48                              18753       print $title, ' Relationships', "\n\n";
345           48                               1374       print '   Right:';
346                                                       for ($v = 0; $v <= $#sub_or_eqv; $v++) {
347          216                              12613           print '    ', $v;
348           48                                262       }
349           48                               5664       print "\n\n";
350           48                               1227       print 'Left:  0:';
351           48                                221       my @firstrow = @{$sub_or_eqv[0]};
              48                                609   
352                                                       for ($t = 0; $t <= $#firstrow; $t++) {
353          216                               8116           print '    ', $firstrow[$t];
354           48                                306       }
355           48                               5003       print "\n\n";
356                                                       for ($w = 1; $w <= $#sub_or_eqv; $w++) {
357          168                                774           my $length_left = length($w);
358          168                                519           my $x = '';
359          168                              16749           print ' ' x (8 - $length_left), $w, ':';
360          168                                583           my @row = @{$sub_or_eqv[$w]};
             168                               1407   
361                                                           for ($x = 0; $x <= $#row; $x++) {
362          816                              40594               print '    ', $row[$x];
363          168                                625           }
364          168                              33656           print "\n\n";
365           48                                246       }
366           48                               1641       1; # force return true value
367                                                   }
368                                                   
369                                                   sub _equivalent_subengine {
370           80                  100           428       my $aref = shift;
371           80                                495       my $xsubsetref = _subset_subengine($aref);
372           80                                336       my @xsubset = @{$xsubsetref};
              80                                561   
373           80                                290       my (@xequivalent);
374                                                       for (my $f = 0; $f <= $#xsubset; $f++) {
375                                                           for (my $g = 0; $g <= $#xsubset; $g++) {
376         1412                               4999               $xequivalent[$f][$g] = 0;
377         1412    100    100                17711               $xequivalent[$f][$g] = 1
378                                                                   if ($xsubset[$f][$g] and $xsubset[$g][$f]);
379          316                                812           }
380           80                                311       }
381           80                               1519       return \@xequivalent;
382                                                   }
383                                                   
384                                                   sub _index_message1 {
385          190                  100          1030       my ($index, $dataref) = @_;
386          190                               4441       my $method = (caller(1))[3];
387   ***    188            66                 2898       croak "Argument to method $method must be the array index of the target list \n  in list of arrays passed as arguments to the constructor: $!"
388                                                           unless (
389                                                                   $index =~ /^\d+$/ 
390                                                              and  0 <= $index 
391   ***    190    100     66                94843              and  $index <= ${$dataref}{'maxindex'}
392                                                           );
393                                                   }
394                                                   
395                                                   sub _index_message2 {
396          113                  100           532       my $dataref = shift;
397          113                                500       my ($index_left, $index_right);
398          113                               2868       my $method = (caller(1))[3];
399          113    100    100                 2213       croak "Method $method requires 2 arguments: $!"
400                                                           unless (@_ == 0 || @_ == 2);
401          109    100                         778       if (@_ == 0) {
402           17                                 87           $index_left = 0;
403           17                                 95           $index_right = 1;
404                                                       } else {
405           92                                600           ($index_left, $index_right) = @_;
406           92                                778           foreach ($index_left, $index_right) {
407   ***    182            66                 2209               croak "Each argument to method $method must be a valid array index for the target list \n  in list of arrays passed as arguments to the constructor: $!"
408                                                                   unless (
409                                                                           $_ =~ /^\d+$/ 
410                                                                      and  0 <= $_ 
411   ***    182    100     33                 3725                      and  $_ <= ${$dataref}{'maxindex'}
412                                                                   );
413                                                           }
414                                                       }
415          107                               1259       return ($index_left, $index_right);
416                                                   }
417                                                   
418                                                   sub _index_message3 {
419          190                  100          1968       my ($index, $maxindex) = @_;
420          190                               4415       my $method = (caller(1))[3];
421   ***    190    100     33                51385       croak "Argument to method $method must be the array index of the target list \n  in list of arrays passed as arguments to the constructor: $!"
      ***                   66                        
422                                                           unless (
423                                                                   $index =~ /^\d+$/ 
424                                                              and  0 <= $index 
425                                                              and  $index <= $maxindex
426                                                           );
427                                                   }
428                                                   
429                                                   sub _index_message4 {
430           87                  100           703       my $maxindex = shift;
431           87                                427       my ($index_left, $index_right);
432           87                               2347       my $method = (caller(1))[3];
433           87    100    100                 1827       croak "Method $method requires 2 arguments: $!"
434                                                           unless (@_ == 0 || @_ == 2);
435           85    100                         549       if (@_ == 0) {
436            9                                 42           $index_left = 0;
437            9                                 49           $index_right = 1;
438                                                       } else {
439           76                                476           ($index_left, $index_right) = @_;
440           76                                482           foreach ($index_left, $index_right) {
441   ***    150    100     33                 4256               croak "Each argument to method $method must be a valid array index for the target list \n  in list of arrays passed as arguments to the constructor: $!"
      ***                   66                        
442                                                                   unless (
443                                                                           $_ =~ /^\d+$/ 
444                                                                      and  0 <= $_ 
445                                                                      and  $_ <= $maxindex
446                                                                   );
447                                                           }
448                                                       }
449           83                                928       return ($index_left, $index_right);
450                                                   }
451                                                   
452                                                   sub _prepare_listrefs {
453          733                  100          3666       my $dataref = shift;
454          733                               3009       delete ${$dataref}{'unsort'};
             733                               7269   
455          733                               3494       my (@listrefs);
456          733                               2907       foreach my $lref (sort {$a <=> $b} keys %{$dataref}) {
            5873                              52546   
             733                               5853   
457         3668                              14763           push(@listrefs, ${$dataref}{$lref});
            3668                              23886   
458                                                       };
459          733                              21866       return \@listrefs;
460                                                   }
461                                                   
462                                                   sub _subset_engine_multaccel {
463           58                  100           247       my $dataref = shift;
464           58                                339       my $aref = _prepare_listrefs($dataref);
465           58                                258       my ($index_left, $index_right) = _index_message4($#{$aref}, @_);
              58                                723   
466                                                   
467           56                               6420       my $xsubsetref = _subset_subengine($aref);
468           56                              12705       return ${$xsubsetref}[$index_left][$index_right];
              56                                800   
469                                                   }
470                                                   
471                                                   sub _calc_seen {
472          700                  100          3212       my ($refL, $refR) = @_;
473   ***    700    100     66                71992       if (ref($refL) eq 'ARRAY' and ref($refR) eq 'ARRAY') {
      ***            50     33                        
474          353                               1301           my (%seenL, %seenR);
475          353                               2024           foreach (@$refL) { $seenL{$_}++ }
            2705                              11690   
476          353                               1842           foreach (@$refR) { $seenR{$_}++ }
            2659                              10101   
477          353                               4201           return (\%seenL, \%seenR); 
478                                                       } elsif (ref($refL) eq 'HASH' and ref($refR) eq 'HASH') {
479          347                               7516           return ($refL, $refR);
480                                                       } else {
481   ***      0                                  0           croak "Improper mixing of arguments; accelerated calculation not possible:  $!";
482                                                       }
483                                                   }
484                                                   
485                                                   sub _equiv_engine {
486           56                  100           233       my ($hrefL, $hrefR) = @_;
487           56                                228       my (%intersection, %Lonly, %Ronly, %LorRonly);
488           56                                203       my $LequivalentR_status = 0;
489                                                       
490           56                                176       foreach (keys %{$hrefL}) {
              56                                621   
491          312    100                         656           exists ${$hrefR}{$_} ? $intersection{$_}++ : $Lonly{$_}++;
             312                               2269   
492                                                       }
493                                                   
494           56                                340       foreach (keys %{$hrefR}) {
              56                                401   
495          296    100                        1322           $Ronly{$_}++ unless (exists $intersection{$_});
496                                                       }
497                                                   
498           56                                339       $LorRonly{$_}++ foreach ( (keys %Lonly), (keys %Ronly) );
              56                                501   
499           56    100                         517       $LequivalentR_status = 1 if ( (keys %LorRonly) == 0);
500           56                                777       return $LequivalentR_status;
501                                                   }
502                                                   
503                                                   sub _argument_checker_0 {
504          960                  100          5899       my @args = @_;
505          960                               5591       my $first_ref = ref($args[0]);
506   ***    960     50     66                10274       die "Improper argument: $!" 
507                                                           unless ($first_ref eq 'ARRAY' or $first_ref eq 'HASH');
508          960                              14937       my @temp = @args[1..$#args];
509          960                               9371       my ($testing);
510          960                               3572       my $condition = 1;
511          960                               7415       while (defined ($testing = shift(@temp)) ) {
512         2378    100                       22364           unless (ref($testing) eq $first_ref) {
513            2                                  6               $condition = 0;
514            2                                 15               last;
515                                                           }
516                                                       }
517          960    100                        4427       croak "Arguments must be either all array references or all hash references: $!"
518                                                           unless $condition;
519          958    100                        7285       _validate_seen_hash(@args) if $first_ref eq 'HASH';
520          946                               9948       return (@args);
521                                                   }
522                                                   
523                                                   sub _argument_checker {
524          845                  100          3833       my $argref = shift;
525          845                               3051       my @args = _argument_checker_0(@{$argref});
             845                               6017   
526          841                               9378       return (@args);
527                                                   }
528                                                   
529                                                   sub _argument_checker_1 {
530          270                  100          1214       my $argref = shift;
531          270                                884       my @args = @{$argref};
             270                               1434   
532          270    100                        1504       croak "Subroutine call requires 2 references as arguments:  $!"
533                                                           unless @args == 2;
534          266                               1490       return (_argument_checker($args[0]), ${$args[1]}[0]);
             264                               2835   
535                                                   }
536                                                   
537                                                   sub _argument_checker_2 {
538           18                  100           103       my $argref = shift;
539           18                                118       my @args = @$argref;
540           18    100                         251       croak "Subroutine call requires 2 references as arguments:  $!"
541                                                           unless @args == 2;
542           16                                120       return (_argument_checker($args[0]), $args[1]);
543                                                   }
544                                                   
545                                                   # _argument_checker_3 is currently set-up to handle either 1 or 2 arguments
546                                                   # in get_unique and get_complement
547                                                   # The first argument is an arrayref holding refs to lists ('unsorted' has been 
548                                                   # stripped off).
549                                                   # The second argument is an arrayref holding a single item (index number of 
550                                                   # item being tested)
551                                                   sub _argument_checker_3 {
552          125                  100           764       my $argref = shift;
553          125                                501       my @args = @{$argref};
             125                                771   
554          125    100                       20644       if (@args == 1) {
                    100                               
555           80                                636           return (_argument_checker($args[0]), 0);
556                                                       } elsif (@args == 2) {
557           43                                361           return (_argument_checker($args[0]), ${$args[1]}[0]);
              43                                569   
558                                                       } else {
559   ***      2     50     33                   59           croak "Subroutine call requires 1 or 2 references as arguments:  $!"
560                                                               unless (@args == 1 or @args == 2);
561                                                       }
562                                                   }
563                                                   
564                                                   sub _argument_checker_3a {
565           36                  100           191       my $argref = shift;
566           36                                136       my @args = @{$argref};
              36                                206   
567           36    100                         249       if (@args == 1) {
568           34                                246           return [ _argument_checker($args[0]) ];
569                                                       } else {
570            2                                 39           croak "Subroutine call requires exactly 1 reference as argument:  $!";
571                                                       }
572                                                   }
573                                                   
574                                                   sub _argument_checker_4 {
575          116                  100           607       my $argref = shift;
576          116                                580       my @args = @{$argref};
             116                                670   
577          116    100                         891       if (@args == 1) {
                    100                               
578           73                                474           return (_argument_checker($args[0]), [0,1]);
579                                                       } elsif (@args == 2) {
580           40    100                         136           if (@{$args[1]} == 2) {
              40                              64077   
581           38                                123               my $last_index = $#{$args[0]};
              38                                525   
582           38                                138               foreach my $i (@{$args[1]}) {
              38                                308   
583   ***     73    100     66                 2129   		croak "No element in index position $i in list of list references passed as first argument to function: $!"
584                                                                       unless ($i =~ /^\d+$/ and $i <= $last_index);
585                                                               }
586           33                                318               return (_argument_checker($args[0]), $args[1]);
587                                                           } else {
588            2                                 51               croak "Must provide index positions corresponding to two lists: $!";
589                                                           }
590                                                       } else {
591   ***      3     50     33                  117           croak "Subroutine call requires 1 or 2 references as arguments: $!"
592                                                               unless (@args == 1 or @args == 2);
593                                                       }
594                                                   }
595                                                   
596                                                   sub _calc_seen1 {
597          768                  100         10619       my @listrefs = @_;
598                                                       # _calc_seen1() is applied after _argument_checker(), which checks to make
599                                                       # sure that the references in its output are either all arrayrefs 
600                                                       # or all seenhashrefs
601                                                       # hence, _calc_seen1 only needs to determine whether it's dealing with 
602                                                       # arrayrefs or seenhashrefs, then, if arrayrefs, calculate seenhashes
603          768    100                        7144       if (ref($listrefs[0]) eq 'ARRAY') {
      ***            50                               
604          384                               1166           my (@seenrefs);
605          384                               2606           foreach my $aref (@listrefs) {
606         1386                               3294               my (%seenthis);
607         1386                               3394               foreach my $j (@{$aref}) {
            1386                               6210   
608         9334                              49827                   $seenthis{$j}++;
609                                                               }
610         1386                              10880               push(@seenrefs, \%seenthis);
611                                                           }
612          384                               3993           return \@seenrefs;
613                                                       } elsif (ref($listrefs[0]) eq 'HASH') {
614          384                               8585           return \@listrefs;
615                                                       } else {
616   ***      0                                  0           croak "Indeterminate case in _calc_seen1: $!";
617                                                       }
618                                                   }
619                                                   
620                                                   # _alt_construct_tester prepares for _argument_checker in 
621                                                   # get_union get_intersection get_symmetric_difference get_shared get_nonintersection
622                                                   sub _alt_construct_tester {
623          286                  100          2085       my @args = @_;
624          286                              39254       my ($argref, $unsorted);
625          286    100    100                 5256       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
626          115                                682          my $hashref = shift;
627          115                                968          die "Need to define 'lists' key properly: $!"
628          114           100                29689              unless ( ${$hashref}{'lists'}
629          115    100                         381                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
630          113                                469          $argref = ${$hashref}{'lists'};
             113                                510   
631          113    100                         365          $unsorted = ${$hashref}{'unsorted'} ? 1 : '';
             113                                885   
632                                                       } else {
633          171    100    100                 4397           $unsorted = shift(@args) 
634                                                               if ($args[0] eq '-u' or $args[0] eq '--unsorted');
635          171                               1041           $argref = shift(@args); 
636                                                       }
637          284                               2771       return ($argref, $unsorted);
638                                                   }
639                                                   
640                                                   # _alt_construct_tester_1 prepares for _argument_checker_1 in
641                                                   # is_member_which is_member_which_ref is_member_any
642                                                   sub _alt_construct_tester_1 {
643          279                  100          2122       my @args = @_;
644          279                                847       my ($argref);
645          279    100    100                 4338       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
646          141                                397           my (@returns);
647          141                                464           my $hashref = $args[0];
648          141                               1266           die "Need to define 'lists' key properly: $!"
649          138           100                 7206              unless ( ${$hashref}{'lists'}
650          141    100                         421                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
651          135                                730           die "Need to define 'item' key properly: $!"
652          135    100                         471              unless ${$hashref}{'item'};
653          132                                452           @returns = ( ${$hashref}{'lists'}, [${$hashref}{'item'}] );
             132                                580   
             132                               1260   
654          132                                904           $argref = \@returns;
655                                                       } else {
656          138                                576           $argref = \@args; 
657                                                       }
658          270                               1725       return $argref;
659                                                   }
660                                                   
661                                                   # _alt_construct_tester_2 prepares for _argument_checker_2 in
662                                                   # are_members_which are_members_any
663                                                   sub _alt_construct_tester_2 {
664           24                  100           227       my @args = @_;
665           24                                 97       my ($argref);
666   ***     24    100     66                  602       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
667           14                                 45           my (@returns);
668           14                                 60           my $hashref = $args[0];
669           14                                213           die "Need to define 'lists' key properly: $!"
670           12           100                  166              unless ( ${$hashref}{'lists'}
671           14    100                          46                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
672           10                                121           die "Need to define 'items' key properly: $!"
673   ***      8            66                  100              unless ( ${$hashref}{'items'}
674           10    100                          44                   and (ref(${$hashref}{'items'}) eq 'ARRAY') );
675            8                                 76           @returns = defined ${$hashref}{'items'}
               8                                 38   
676            8                                 70                           ? (${$hashref}{'lists'}, ${$hashref}{'items'})
      ***      0                                  0   
677   ***      8     50                          33                           : (${$hashref}{'lists'});
678            8                                 52           $argref = \@returns;
679                                                       } else {
680           10                                 66           $argref = \@args; 
681                                                       }
682           18                                131       return $argref;
683                                                   }
684                                                   
685                                                   # _alt_construct_tester_3 prepares for _argument_checker_3 in
686                                                   # get_unique get_complement 
687                                                   sub _alt_construct_tester_3 {
688          163                  100          1421       my @args = @_;
689          163                                778       my ($argref, $unsorted);
690          163    100    100                 3293       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
691           67                                197           my (@returns);
692           67                                260           my $hashref = $args[0];
693           67                                660           die "Need to define 'lists' key properly: $!"
694           66           100                  803              unless ( ${$hashref}{'lists'}
695           67    100                         208                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
696           65                                516           @returns = defined ${$hashref}{'item'}
              17                                 97   
697           17                                204                           ? (${$hashref}{'lists'}, [${$hashref}{'item'}])
              48                                349   
698           65    100                         356                           : (${$hashref}{'lists'});
699           65                                298           $argref = \@returns;
700           65    100                         221           $unsorted = ${$hashref}{'unsorted'} ? 1 : '';
              65                                573   
701                                                       } else {
702           96    100    100                 2519           $unsorted = shift(@args) if ($args[0] eq '-u' or $args[0] eq '--unsorted');
703           96                                583           $argref = \@args; 
704                                                       }
705          161                               1553       return ($argref, $unsorted);
706                                                   }
707                                                   
708                                                   # _alt_construct_tester_4 prepares for _argument_checker_4 in
709                                                   # is_LsubsetR is_RsubsetL is_LequivalentR is_LdisjointR
710                                                   sub _alt_construct_tester_4 {
711          118                  100          1065       my @args = @_;
712          118                                374       my ($argref);
713          118    100    100                 2284       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
714           54                                150           my (@returns);
715           54                                189           my $hashref = $args[0];
716           54                                476           die "Need to define 'lists' key properly: $!"
717           53           100                  540              unless ( ${$hashref}{'lists'}
718           54    100                         155                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
719           52                               2064           @returns = defined ${$hashref}{'pair'}
              16                                 73   
720           16                                150                           ? (${$hashref}{'lists'}, ${$hashref}{'pair'})
              36                                238   
721           52    100                         198                           : (${$hashref}{'lists'});
722           52                                317           $argref = \@returns;
723                                                       } else {
724           64                                302           $argref = \@args; 
725                                                       }
726          116                              40595       return $argref;
727                                                   }
728                                                   
729                                                   # _alt_construct_tester_5 prepares for _argument_checker in
730                                                   # print_subset_chart print_equivalence_chart
731                                                   sub _alt_construct_tester_5 {
732           20                  100           168       my @args = @_;
733           20                                 79       my ($argref);
734           20    100                         222       if (@args == 1) {
735           18    100                         291           if (ref($args[0]) eq 'HASH') {
736           10                                 67              my $hashref = shift;
737           10                                118              die "Need to define 'lists' key properly: $!"
738            9           100                  166                  unless ( ${$hashref}{'lists'}
739           10    100                          33                       and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
740            8                                 35              $argref = ${$hashref}{'lists'};
               8                                 54   
741                                                           } else {
742            8                                109              $argref = shift(@args); 
743                                                           }
744                                                       } else {
745            2                                 42           croak "Subroutine call requires exactly 1 reference as argument:  $!";
746                                                       }
747           16                                119       return $argref;
748                                                   }
749                                                   
750                                                   1;
751                                                   
752                                                   __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
81           100    170      4   if (${$refL;}{$_} =~ /^\d+$/ and ${$refL;}{$_} > 0) { }
88           100    157      4   if (${$refR;}{$_} =~ /^\d+$/ and ${$refR;}{$_} > 0) { }
94           100      6     29   if (keys %badentriesL or keys %badentriesR)
97           100      4      2   if (keys %badentriesL)
102          100      4      2   if (keys %badentriesR)
113          100    258    245   if (@_ > 2) { }
120          100      4   1588   unless ${$l;}{$_} =~ /^\d+$/ and ${$l;}{$_} > 0
124          100      4   1565   unless ${$r;}{$_} =~ /^\d+$/ and ${$r;}{$_} > 0
126          100      6    239   if (keys %badentriesL or keys %badentriesR)
129          100      4      2   if (keys %badentriesL)
134          100      4      2   if (keys %badentriesR)
151          100     24   6780   unless ($seenhash{$_} =~ /^\d+$/ and $seenhash{$_} > 0)
157          100     12    246   if ($badentriesflag)
173          100   7474   2993   if (ref ${$aref;}[$x] eq 'HASH') { }
195          100   4980   1740   if exists $seenthis{$k}
217          100   5151   1840   if exists $seenthis{$_}
251          100   3250   1361   if exists $seenthis{$_}
292          100   1350    975   if exists $intersection{$_}
319          100   6196  14602   if not $tempj{$k}
377          100    436    976   if $xsubset[$f][$g] and $xsubset[$g][$f]
391          100      2    188   unless $index =~ /^\d+$/ and 0 <= $index and $index <= ${$dataref;}{'maxindex'}
399          100      4    109   unless @_ == 0 or @_ == 2
401          100     17     92   if (@_ == 0) { }
411          100      2    180   unless $_ =~ /^\d+$/ and 0 <= $_ and $_ <= ${$dataref;}{'maxindex'}
421          100      2    188   unless $index =~ /^\d+$/ and 0 <= $index and $index <= $maxindex
433          100      2     85   unless @_ == 0 or @_ == 2
435          100      9     76   if (@_ == 0) { }
441          100      2    148   unless $_ =~ /^\d+$/ and 0 <= $_ and $_ <= $maxindex
473          100    353    347   if (ref $refL eq 'ARRAY' and ref $refR eq 'ARRAY') { }
      ***     50    347      0   elsif (ref $refL eq 'HASH' and ref $refR eq 'HASH') { }
491          100    272     40   exists ${$hrefR;}{$_} ? :
495          100     24    272   unless exists $intersection{$_}
499          100     16     40   if keys %LorRonly == 0
506   ***     50      0    960   unless $first_ref eq 'ARRAY' or $first_ref eq 'HASH'
512          100      2   2376   unless (ref $testing eq $first_ref)
517          100      2    958   unless $condition
519          100    483    475   if $first_ref eq 'HASH'
532          100      4    266   unless @args == 2
540          100      2     16   unless @args == 2
554          100     80     45   if (@args == 1) { }
             100     43      2   elsif (@args == 2) { }
559   ***     50      2      0   unless @args == 1 or @args == 2
567          100     34      2   if (@args == 1) { }
577          100     73     43   if (@args == 1) { }
             100     40      3   elsif (@args == 2) { }
580          100     38      2   if (@{$args[1];} == 2) { }
583          100      5     68   unless $i =~ /^\d+$/ and $i <= $last_index
591   ***     50      3      0   unless @args == 1 or @args == 2
603          100    384    384   if (ref $listrefs[0] eq 'ARRAY') { }
      ***     50    384      0   elsif (ref $listrefs[0] eq 'HASH') { }
625          100    115    171   if (@args == 1 and ref $args[0] eq 'HASH') { }
629          100      2    113   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
631          100     57     56   ${$hashref;}{'unsorted'} ? :
633          100    114     57   if $args[0] eq '-u' or $args[0] eq '--unsorted'
645          100    141    138   if (@args == 1 and ref $args[0] eq 'HASH') { }
650          100      6    135   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
652          100      3    132   unless ${$hashref;}{'item'}
666          100     14     10   if (@args == 1 and ref $args[0] eq 'HASH') { }
671          100      4     10   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
674          100      2      8   unless ${$hashref;}{'items'} and ref ${$hashref;}{'items'} eq 'ARRAY'
677   ***     50      8      0   defined ${$hashref;}{'items'} ? :
690          100     67     96   if (@args == 1 and ref $args[0] eq 'HASH') { }
695          100      2     65   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
698          100     17     48   defined ${$hashref;}{'item'} ? :
700          100     33     32   ${$hashref;}{'unsorted'} ? :
702          100     58     38   if $args[0] eq '-u' or $args[0] eq '--unsorted'
713          100     54     64   if (@args == 1 and ref $args[0] eq 'HASH') { }
718          100      2     52   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
721          100     16     36   defined ${$hashref;}{'pair'} ? :
734          100     18      2   if (@args == 1) { }
735          100     10      8   if (ref $args[0] eq 'HASH') { }
739          100      2      8   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
81    ***     66      0      4    170   ${$refL;}{$_} =~ /^\d+$/ and ${$refL;}{$_} > 0
88           100      2      2    157   ${$refR;}{$_} =~ /^\d+$/ and ${$refR;}{$_} > 0
120   ***     66      0      4   1588   ${$l;}{$_} =~ /^\d+$/ and ${$l;}{$_} > 0
124          100      2      2   1565   ${$r;}{$_} =~ /^\d+$/ and ${$r;}{$_} > 0
151          100      8     16   6780   $seenhash{$_} =~ /^\d+$/ and $seenhash{$_} > 0
377          100    864    112    436   $xsubset[$f][$g] and $xsubset[$g][$f]
387   ***     66      2      0    188   $index =~ /^\d+$/ and 0 <= $index and $index <= ${$dataref;}{'maxindex'}
391   ***     66      2      0    188   $index =~ /^\d+$/ and 0 <= $index
407   ***     66      0      2    180   $_ =~ /^\d+$/ and 0 <= $_ and $_ <= ${$dataref;}{'maxindex'}
411   ***     33      0      0    182   $_ =~ /^\d+$/ and 0 <= $_
421   ***     33      0      0    190   $index =~ /^\d+$/ and 0 <= $index
      ***     66      0      2    188   $index =~ /^\d+$/ and 0 <= $index and $index <= $maxindex
441   ***     33      0      0    150   $_ =~ /^\d+$/ and 0 <= $_
      ***     66      0      2    148   $_ =~ /^\d+$/ and 0 <= $_ and $_ <= $maxindex
473   ***     66    347      0    353   ref $refL eq 'ARRAY' and ref $refR eq 'ARRAY'
      ***     33      0      0    347   ref $refL eq 'HASH' and ref $refR eq 'HASH'
583   ***     66      0      5     68   $i =~ /^\d+$/ and $i <= $last_index
625          100    114     57    115   @args == 1 and ref $args[0] eq 'HASH'
628          100      1      1    113   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
645          100    136      2    141   @args == 1 and ref $args[0] eq 'HASH'
649          100      3      3    135   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
666   ***     66     10      0     14   @args == 1 and ref $args[0] eq 'HASH'
670          100      2      2     10   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
673   ***     66      2      0      8   ${$hashref;}{'items'} and ref ${$hashref;}{'items'} eq 'ARRAY'
690          100     70     26     67   @args == 1 and ref $args[0] eq 'HASH'
694          100      1      1     65   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
713          100     27     37     54   @args == 1 and ref $args[0] eq 'HASH'
717          100      1      1     52   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
738          100      1      1      8   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
94           100      4      2     29   keys %badentriesL or keys %badentriesR
126          100      4      2    239   keys %badentriesL or keys %badentriesR
399          100     17     92      4   @_ == 0 or @_ == 2
433          100      9     76      2   @_ == 0 or @_ == 2
506   ***     66    477    483      0   $first_ref eq 'ARRAY' or $first_ref eq 'HASH'
559   ***     33      0      0      2   @args == 1 or @args == 2
591   ***     33      0      0      3   @args == 1 or @args == 2
633          100     56     58     57   $args[0] eq '-u' or $args[0] eq '--unsorted'
702          100     32     26     38   $args[0] eq '-u' or $args[0] eq '--unsorted'


Covered Subroutines
-------------------

Subroutine                          Location                                    
----------------------------------- --------------------------------------------
BEGIN                               blib/lib/List/Compare/Base/_Auxiliary.pm:4  
BEGIN                               blib/lib/List/Compare/Base/_Auxiliary.pm:74 
_alt_construct_tester               blib/lib/List/Compare/Base/_Auxiliary.pm:623
_alt_construct_tester_1             blib/lib/List/Compare/Base/_Auxiliary.pm:643
_alt_construct_tester_2             blib/lib/List/Compare/Base/_Auxiliary.pm:664
_alt_construct_tester_3             blib/lib/List/Compare/Base/_Auxiliary.pm:688
_alt_construct_tester_4             blib/lib/List/Compare/Base/_Auxiliary.pm:711
_alt_construct_tester_5             blib/lib/List/Compare/Base/_Auxiliary.pm:732
_argument_checker                   blib/lib/List/Compare/Base/_Auxiliary.pm:524
_argument_checker_0                 blib/lib/List/Compare/Base/_Auxiliary.pm:504
_argument_checker_1                 blib/lib/List/Compare/Base/_Auxiliary.pm:530
_argument_checker_2                 blib/lib/List/Compare/Base/_Auxiliary.pm:538
_argument_checker_3                 blib/lib/List/Compare/Base/_Auxiliary.pm:552
_argument_checker_3a                blib/lib/List/Compare/Base/_Auxiliary.pm:565
_argument_checker_4                 blib/lib/List/Compare/Base/_Auxiliary.pm:575
_calc_seen                          blib/lib/List/Compare/Base/_Auxiliary.pm:472
_calc_seen1                         blib/lib/List/Compare/Base/_Auxiliary.pm:597
_calculate_hash_intersection        blib/lib/List/Compare/Base/_Auxiliary.pm:285
_calculate_hash_shared              blib/lib/List/Compare/Base/_Auxiliary.pm:300
_calculate_seen_only                blib/lib/List/Compare/Base/_Auxiliary.pm:226
_calculate_seen_xintersection_only  blib/lib/List/Compare/Base/_Auxiliary.pm:204
_calculate_union_only               blib/lib/List/Compare/Base/_Auxiliary.pm:260
_calculate_union_seen_only          blib/lib/List/Compare/Base/_Auxiliary.pm:271
_calculate_union_xintersection_only blib/lib/List/Compare/Base/_Auxiliary.pm:181
_calculate_xintersection_only       blib/lib/List/Compare/Base/_Auxiliary.pm:239
_chart_engine_multiple              blib/lib/List/Compare/Base/_Auxiliary.pm:339
_chart_engine_regular               blib/lib/List/Compare/Base/_Auxiliary.pm:327
_equiv_engine                       blib/lib/List/Compare/Base/_Auxiliary.pm:486
_equivalent_subengine               blib/lib/List/Compare/Base/_Auxiliary.pm:370
_index_message1                     blib/lib/List/Compare/Base/_Auxiliary.pm:385
_index_message2                     blib/lib/List/Compare/Base/_Auxiliary.pm:396
_index_message3                     blib/lib/List/Compare/Base/_Auxiliary.pm:419
_index_message4                     blib/lib/List/Compare/Base/_Auxiliary.pm:430
_list_builder                       blib/lib/List/Compare/Base/_Auxiliary.pm:172
_prepare_listrefs                   blib/lib/List/Compare/Base/_Auxiliary.pm:453
_subset_engine_multaccel            blib/lib/List/Compare/Base/_Auxiliary.pm:463
_subset_subengine                   blib/lib/List/Compare/Base/_Auxiliary.pm:309
_validate_2_seenhashes              blib/lib/List/Compare/Base/_Auxiliary.pm:77 
_validate_multiple_seenhashes       blib/lib/List/Compare/Base/_Auxiliary.pm:145
_validate_seen_hash                 blib/lib/List/Compare/Base/_Auxiliary.pm:113


blib/lib/List/Compare/Base/_Engine.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare::Base::_Engine;
2                                                     $VERSION = 0.31;
3                                                     # Holds subroutines used within 
4                                                     # List::Compare::Base::Accelerated and List::Compare::Functional
5                                                     # As of 08/15/2004
6             28                  100           512   use Carp;
              28                                124   
              28                                706   
7             28                  100           441   use List::Compare::Base::_Auxiliary qw(
8                                                         _equiv_engine 
9                                                         _calculate_seen_xintersection_only
10                                                        _calculate_union_seen_only
11            28                                129   );
              28                                417   
12                                                    @ISA = qw(Exporter);
13                                                    @EXPORT_OK = qw|
14                                                        _unique_all_engine
15                                                        _complement_all_engine
16                                                    |;
17            28                  100           389   use strict;
              28                                135   
              28                                313   
18                                                    
19                                                    sub _unique_all_engine {
20           116                  100           590       my $aref = shift;
21           116                                899       my ($seenref, $xintersectionref) = 
22                                                            _calculate_seen_xintersection_only($aref);
23           116                                512       my %seen = %{$seenref};
             116                               1628   
24           116                                627       my %xintersection = %{$xintersectionref};
             116                               2066   
25                                                    
26                                                        # Calculate @xunique
27                                                        # Inputs:  $aref    %seen    %xintersection
28           116                                754       my (@xunique);
29           672                              11492       for (my $i = 0; $i <= $#{$aref}; $i++) {
30           556                               1405           my %seenthis = %{$seen{$i}};
             556                               6354   
31           556                               2619           my (@uniquethis, %deductions, %alldeductions);
32                                                            # Get those elements of %xintersection which we'll need 
33                                                            # to subtract from %seenthis
34           556                               4335           foreach (keys %xintersection) {
35          5416                              32828               my ($left, $right) = split /_/, $_;
36          5416    100    100                71167               if ($left == $i || $right == $i) {
37          2176                              20944                   $deductions{$_} = $xintersection{$_};
38                                                                }
39                                                            }
40           556                               4968           foreach my $ded (keys %deductions) {
41          2176                               4749               foreach (keys %{$deductions{$ded}}) {
            2176                              12361   
42          7224                              55017                   $alldeductions{$_}++;
43                                                                }
44                                                            }
45           556                              10588           foreach (keys %seenthis) {
46          3028    100                       12700               push(@uniquethis, $_) unless ($alldeductions{$_});
47                                                            }
48           556                               7478           $xunique[$i] = \@uniquethis;
49           116                                526       }
50           116                               6612       return \@xunique;
51                                                    }
52                                                    
53                                                    sub _complement_all_engine {
54           120                  100           696       my ($aref, $unsortflag) = @_;
55           120                                987       my ($unionref, $seenref) = _calculate_union_seen_only($aref);
56           120                                490       my %seen = %{$seenref};
             120                               1617   
57           120    100                         967       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
              56                               1319   
              64                               1978   
58                                                    
59                                                        # Calculate @xcomplement
60                                                        # Inputs:  $aref @union %seen
61           120                                844       my (@xcomplement);
62           696                               5229       for (my $i = 0; $i <= $#{$aref}; $i++) {
63           576                               1355           my %seenthis = %{$seen{$i}};
             576                               7108   
64           576                               2279           my @complementthis = ();
65           576                               7957           foreach (@union) {
66          5728    100                       77343               push(@complementthis, $_) unless (exists $seenthis{$_});
67                                                            }
68           576                               5503           $xcomplement[$i] = \@complementthis;
69           120                                538       }
70           120                               4437       return \@xcomplement;
71                                                    }
72                                                    
73                                                    1;
74                                                    
75                                                    
76                                                    __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
36           100   2176   3240   if ($left == $i or $right == $i)
46           100    232   2796   unless $alldeductions{$_}
57           100     56     64   $unsortflag ? :
66           100   2592   3136   unless exists $seenthis{$_}


Conditions
----------

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
36           100   1088   1088   3240   $left == $i or $right == $i


Covered Subroutines
-------------------

Subroutine             Location                                
---------------------- ----------------------------------------
BEGIN                  blib/lib/List/Compare/Base/_Engine.pm:17
BEGIN                  blib/lib/List/Compare/Base/_Engine.pm:6 
BEGIN                  blib/lib/List/Compare/Base/_Engine.pm:7 
_complement_all_engine blib/lib/List/Compare/Base/_Engine.pm:54
_unique_all_engine     blib/lib/List/Compare/Base/_Engine.pm:20


blib/lib/List/Compare/Functional.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare::Functional;
2                                                     $VERSION = 0.31;   # August 15, 2004 
3                                                     @ISA = qw(Exporter);
4                                                     @EXPORT_OK = qw|
5                                                         get_intersection
6                                                         get_intersection_ref
7                                                         get_union
8                                                         get_union_ref
9                                                         get_unique
10                                                        get_unique_ref
11                                                        get_unique_all
12                                                        get_complement
13                                                        get_complement_ref
14                                                        get_complement_all
15                                                        get_symmetric_difference
16                                                        get_symmetric_difference_ref
17                                                        is_LsubsetR
18                                                        is_RsubsetL
19                                                        is_LequivalentR
20                                                        is_LdisjointR
21                                                        is_member_which
22                                                        is_member_which_ref
23                                                        are_members_which
24                                                        is_member_any
25                                                        are_members_any
26                                                        print_subset_chart
27                                                        print_equivalence_chart
28                                                        get_shared
29                                                        get_shared_ref
30                                                        get_nonintersection
31                                                        get_nonintersection_ref
32                                                        get_symdiff
33                                                        get_symdiff_ref
34                                                        is_LeqvlntR
35                                                        get_bag
36                                                        get_bag_ref
37                                                        get_version
38                                                    |;
39                                                    %EXPORT_TAGS = (
40                                                        main => [ qw(
41                                                            get_intersection
42                                                            get_union
43                                                            get_unique
44                                                            get_complement
45                                                            get_symmetric_difference
46                                                            is_LsubsetR
47                                                        ) ],
48                                                        mainrefs => [ qw(
49                                                            get_intersection_ref
50                                                            get_union_ref
51                                                            get_unique_ref
52                                                            get_complement_ref
53                                                            get_symmetric_difference_ref
54                                                        ) ],
55                                                        originals => [ qw(
56                                                            get_intersection
57                                                            get_intersection_ref
58                                                            get_union
59                                                            get_union_ref
60                                                            get_unique
61                                                            get_unique_ref
62                                                            get_unique_all
63                                                            get_complement
64                                                            get_complement_ref
65                                                            get_complement_all
66                                                            get_symmetric_difference
67                                                            get_symmetric_difference_ref
68                                                            get_shared
69                                                            get_shared_ref
70                                                            get_nonintersection
71                                                            get_nonintersection_ref
72                                                            is_LsubsetR
73                                                            is_RsubsetL
74                                                            is_LequivalentR
75                                                            is_LdisjointR
76                                                            is_member_which
77                                                            is_member_which_ref
78                                                            are_members_which
79                                                            is_member_any
80                                                            are_members_any
81                                                            print_subset_chart
82                                                            print_equivalence_chart
83                                                            get_bag
84                                                            get_bag_ref
85                                                            get_version
86                                                        ) ],
87                                                        aliases => [ qw(
88                                                            get_symdiff
89                                                            get_symdiff_ref
90                                                            is_LeqvlntR
91                                                        ) ],
92                                                    );
93            10                  100           230   use strict;
              10                                 42   
              10                                147   
94            10                  100           124   use Carp;
              10                                 41   
              10                                238   
95            10                  100          5629   use List::Compare::Base::_Auxiliary qw(
96                                                        _subset_subengine
97                                                        _chart_engine_multiple
98                                                        _equivalent_subengine
99                                                        _calc_seen1
100           10                                 74   );
              10                                464   
101           10                  100           244   use List::Compare::Base::_Auxiliary qw(:calculate :checker :tester);
              10                                 42   
              10                                115   
102           10                  100          6501   use List::Compare::Base::_Engine qw( 
103                                                       _unique_all_engine 
104                                                       _complement_all_engine
105           10                                 62   );
              10                                285   
106                                                   
107                                                   
108                                                   sub get_union {
109   ***     20                  100      0    112       return @{ get_union_ref(@_) };
              20                                153   
110                                                   }
111                                                   
112                                                   sub get_union_ref {
113   ***     40                  100      0    449       my ($argref, $unsorted) = _alt_construct_tester(@_);
114           16                                128       $unsorted  
115                                                           ? return          _union_engine(_argument_checker($argref))
116           40    100                         445           : return [ sort @{_union_engine(_argument_checker($argref))} ];
117                                                   }
118                                                   
119                                                   sub _union_engine {
120           40                  100           333       my $seenrefsref = _calc_seen1(@_);
121           40                                305       my $unionhashref = _calculate_union_only($seenrefsref);
122           40                                159       return [ keys %{$unionhashref} ];
              40                               2174   
123                                                   }
124                                                   
125                                                   sub get_intersection {
126   ***     25                  100      0    171       return @{ get_intersection_ref(@_) };
              25                                180   
127                                                   }
128                                                   
129                                                   sub get_intersection_ref {
130   ***     45                  100      0    521       my ($argref, $unsorted) = _alt_construct_tester(@_);
131           16                                135       $unsorted  
132                                                           ? return          _intersection_engine(_argument_checker($argref))
133           43    100                         507           : return [ sort @{_intersection_engine(_argument_checker($argref))} ];
134                                                   }
135                                                   
136                                                   sub _intersection_engine {
137           43                  100           364       my $seenrefsref = _calc_seen1(@_);
138           43                                351       my $xintersectionref = _calculate_xintersection_only($seenrefsref);
139           43                                373       my $intersectionref = _calculate_hash_intersection($xintersectionref);
140           43                                189       return [ keys %{$intersectionref} ];
              43                               2365   
141                                                   }
142                                                   
143                                                   sub get_unique {
144   ***     35                  100      0    179       return @{ get_unique_ref(@_) };
              35                                231   
145                                                   }
146                                                   
147                                                   sub get_unique_ref {
148   ***     66                  100      0    725       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
149           25                                193       $unsorted
150                                                           ? return          _unique_engine(_argument_checker_3($argref))
151           64    100                         702           : return [ sort @{_unique_engine(_argument_checker_3($argref))} ];
152                                                   }
153                                                   
154                                                   sub get_unique_all {
155   ***     18                  100      0    213       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
156                                                       # currently it doesn't appear that &_unique_all_engine can make use of
157                                                       # $unsorted
158           18                                150       return _unique_all_engine(_argument_checker_3a($argref));
159                                                   }
160                                                   
161                                                   sub _unique_engine {
162           63                  100           324       my $tested = pop(@_);
163           63                                874       my $seenrefsref = _calc_seen1(@_);
164           63                                538       my ($seenref, $xintersectionref) = 
165                                                           _calculate_seen_xintersection_only($seenrefsref);
166           63                                236       my %seen = %{$seenref};
              63                                796   
167           63                                313       my %xintersection = %{$xintersectionref};
              63                                864   
168                                                   
169                                                       # Calculate %xunique
170           63                                470       my (%xunique);
171          318                               2437       for (my $i = 0; $i <= $#{$seenrefsref}; $i++) {
172          255                                602           my %seenthis = %{$seen{$i}};
             255                               2880   
173          255                               1231           my (@uniquethis, %deductions, %alldeductions);
174                                                           # Get those elements of %xintersection which we'll need 
175                                                           # to subtract from %seenthis
176          255                               1969           foreach (keys %xintersection) {
177         2190                              10907               my ($left, $right) = split /_/, $_;
178         2190    100    100                24620               if ($left == $i || $right == $i) {
179          900                              60469                   $deductions{$_} = $xintersection{$_};
180                                                               }
181                                                           }
182          255                               2236           foreach my $ded (keys %deductions) {
183          900                               1904               foreach (keys %{$deductions{$ded}}) {
             900                              10951   
184         3078                              12107                   $alldeductions{$_}++;
185                                                               }
186                                                           }
187          255                               1870           foreach (keys %seenthis) {
188         1441    100                        6175               push(@uniquethis, $_) unless ($alldeductions{$_});
189                                                           }
190          255                               3351           $xunique{$i} = \@uniquethis;
191           63                                251       }
192           63                                272       return [ @{$xunique{$tested}} ];
              63                               4281   
193                                                   }
194                                                   
195                                                   sub get_complement {
196   ***     30                  100      0    219       return @{ get_complement_ref(@_) };
              30                                234   
197                                                   }
198                                                   
199                                                   sub get_complement_ref {
200   ***     61                  100      0    706       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
201           25                                199       $unsorted
202                                                           ? return          _complement_engine(_argument_checker_3($argref))
203           61    100                         667           : return [ sort @{_complement_engine(_argument_checker_3($argref))} ];
204                                                   }
205                                                   
206                                                   sub get_complement_all {
207   ***     18                  100      0    206       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
208           18                                170       return _complement_all_engine(_argument_checker_3a($argref), $unsorted);
209                                                   }
210                                                   
211                                                   sub _complement_engine {
212           60                  100           375       my $tested = pop(@_);
213           60                                515       my $seenrefsref = _calc_seen1(@_);
214           60                                569       my ($unionref, $seenref) = _calculate_union_seen_only($seenrefsref);
215           60                                232       my %seen = %{$seenref};
              60                                908   
216           60                                315       my @union = keys %{$unionref};
              60                               1268   
217                                                   
218                                                       # Calculate %xcomplement
219                                                       # Inputs:  $seenrefsref @union %seen
220           60                                366       my (%xcomplement);
221          300                               2319       for (my $i = 0; $i <= $#{$seenrefsref}; $i++) {
222          240                                575           my %seenthis = %{$seen{$i}};
             240                               3173   
223          240                               1070           my @complementthis = ();
224          240                                899           foreach (@union) {
225         2320    100                       19934               push(@complementthis, $_) unless (exists $seenthis{$_});
226                                                           }
227          240                               2156           $xcomplement{$i} = \@complementthis;
228           60                                250       }
229           60                                229       return [ @{$xcomplement{$tested}} ];
              60                              15743   
230                                                   }
231                                                   
232                                                   sub get_symmetric_difference {
233   ***     40                  100      0    193       return @{ get_symmetric_difference_ref(@_) };
              40                                259   
234                                                   }
235                                                   
236                                                   sub get_symmetric_difference_ref {
237   ***     80                  100      0    937       my ($argref, $unsorted) = _alt_construct_tester(@_);
238           32                                245       $unsorted  
239                                                           ? return          _symmetric_difference_engine(_argument_checker($argref))
240           80    100                         843           : return [ sort @{_symmetric_difference_engine(_argument_checker($argref))} ];
241                                                   }
242                                                   
243                                                   sub _symmetric_difference_engine {
244           80                  100           625       my $seenrefsref = _calc_seen1(@_);
245           80                                712       my ($unionref, $xintersectionref) = 
246                                                           _calculate_union_xintersection_only($seenrefsref);
247           80                                278       my @union = keys %{$unionref};
              80                               1497   
248                                                   
249           80                                880       my $sharedref = _calculate_hash_shared($xintersectionref);
250           80                                305       my (@symmetric_difference);
251           80                                401       foreach (@union) {
252          720    100                        1478           push(@symmetric_difference, $_) unless exists ${$sharedref}{$_};
             720                               4487   
253                                                       }
254           80                              10379       return \@symmetric_difference;
255                                                   }
256                                                   
257                                                   *get_symdiff  = \&get_symmetric_difference;
258                                                   *get_symdiff_ref  = \&get_symmetric_difference_ref;
259                                                   
260                                                   sub get_shared {
261   ***     20                  100      0    153       return @{ get_shared_ref(@_) };
              20                                158   
262                                                   }
263                                                   
264                                                   sub get_shared_ref {
265   ***     40                  100      0    507       my ($argref, $unsorted) = _alt_construct_tester(@_);
266           16                                125       $unsorted  
267                                                           ? return          _shared_engine(_argument_checker($argref))
268           40    100                         459           : return [ sort @{_shared_engine(_argument_checker($argref))} ];
269                                                   }
270                                                   
271                                                   sub _shared_engine {
272           40                  100           341       my $seenrefsref = _calc_seen1(@_);
273                                                       # Calculate @shared
274                                                       # Inputs:  %xintersection
275           40                                337       my $xintersectionref = _calculate_xintersection_only($seenrefsref);
276           40                                312       my $sharedref = _calculate_hash_shared($xintersectionref);
277           40                                182       my @shared = keys %{$sharedref};
              40                               6558   
278           40                               2490       return \@shared;
279                                                   }
280                                                   
281                                                   sub get_nonintersection {
282   ***     20                  100      0    106       return @{ get_nonintersection_ref(@_) };
              20                                212   
283                                                   }
284                                                   
285                                                   sub get_nonintersection_ref {
286   ***     40                  100      0    453       my ($argref, $unsorted) = _alt_construct_tester(@_);
287           16                                130       $unsorted  
288                                                           ? return          _nonintersection_engine(_argument_checker($argref))
289           40    100                         473           : return [ sort @{_nonintersection_engine(_argument_checker($argref))} ];
290                                                   }
291                                                   
292                                                   sub _nonintersection_engine {
293           40                  100           342       my $seenrefsref = _calc_seen1(@_);
294           40                                330       my ($unionref, $xintersectionref) = 
295                                                           _calculate_union_xintersection_only($seenrefsref);
296           40                                213       my @union = keys %{$unionref};
              40                                806   
297           40                                429       my $intersectionref = _calculate_hash_intersection($xintersectionref);
298                                                       # Calculate nonintersection
299                                                       # Inputs:  @union    %intersection
300           40                                197       my (@nonintersection);
301           40                                213       foreach (@union) {
302          360    100                         738           push(@nonintersection, $_) unless exists ${$intersectionref}{$_};
             360                               2986   
303                                                       }
304           40                               2283       return \@nonintersection;
305                                                   }
306                                                   
307                                                   sub is_LsubsetR {
308   ***     28                  100      0    351       my $argref = _alt_construct_tester_4(@_);
309           26                                228       return _is_LsubsetR_engine(_argument_checker_4($argref));
310                                                   }
311                                                   
312                                                   sub _is_LsubsetR_engine {
313           22                  100           112       my $testedref = pop(@_);
314           22                                159       my $xsubsetref = _subset_engine(@_);
315           22                                 91       return ${$xsubsetref}[${$testedref}[0]][${$testedref}[1]];
              22                                 86   
              22                                122   
              22                                247   
316                                                   }
317                                                   
318                                                   sub is_RsubsetL {
319   ***     20                  100      0    223       my $argref = _alt_construct_tester_4(@_);
320           20                                143       return _is_RsubsetL_engine(_argument_checker_4($argref));
321                                                   }
322                                                   
323                                                   sub _is_RsubsetL_engine {
324           20                  100            96       my $testedref = pop(@_);
325           20                                124       my $xsubsetref = _subset_engine(@_);
326           20                                 90       return ${$xsubsetref}[${$testedref}[1]][${$testedref}[0]];
              20                               5918   
              20                                125   
              20                                215   
327                                                   }
328                                                   
329                                                   sub _subset_engine {
330           42                  100           376       my $seenrefsref = _calc_seen1(@_);
331           42                                306       my $xsubsetref = _subset_subengine($seenrefsref);
332           42                                578       return $xsubsetref;
333                                                   }
334                                                   
335                                                   sub is_LequivalentR {
336   ***     44                  100      0    544       my $argref = _alt_construct_tester_4(@_);
337           44                                318       return _is_LequivalentR_engine(_argument_checker_4($argref));
338                                                   }
339                                                   
340                                                   *is_LeqvlntR = \&is_LequivalentR;
341                                                   
342                                                   sub _is_LequivalentR_engine {
343           40                  100           185       my $testedref = pop(@_);
344           40                               1986       my $seenrefsref = _calc_seen1(@_);
345           40                                362       my $xequivalentref = _equivalent_subengine($seenrefsref);
346           40                                150       return ${$xequivalentref}[${$testedref}[1]][${$testedref}[0]];
              40                                154   
              40                                206   
              40                                712   
347                                                   }
348                                                   
349                                                   sub is_LdisjointR {
350   ***     26                  100      0    310       my $argref = _alt_construct_tester_4(@_);
351           26                                191       return _is_LdisjointR_engine(_argument_checker_4($argref));
352                                                   }
353                                                   
354                                                   sub _is_LdisjointR_engine {
355           24                  100           141       my $testedref = pop(@_);
356           24                                183       my $seenrefsref = _calc_seen1(@_);
357           24                                204       my $xintersectionref = _calculate_xintersection_only($seenrefsref);
358           24                                 99       my (@xdisjoint);
359          144                                990       for (my $i = 0; $i <= @{$seenrefsref}; $i++) {
360          120                                280           foreach (keys %{$xintersectionref}) {
             120                               1164   
361         1296                               6433               my ($left, $right) = split /_/, $_;
362         1296                              17393               $xdisjoint[$left][$right] = $xdisjoint[$right][$left] = 
363         1296    100                        4093                   ! scalar(keys %{${$xintersectionref}{$_}}) ? 1 : 0;
            1296                               2570   
364                                                           }
365          120                               1123           $xdisjoint[$i][$i] = 0; 
366           24                                 98       }
367           24                                 90       my $disjoint_status = $xdisjoint[${$testedref}[1]][${$testedref}[0]];
              24                                133   
              24                                113   
368           24                               1073       return $disjoint_status;
369                                                   }
370                                                   
371                                                   sub print_subset_chart {
372   ***     11                  100      0    140       my $argref = _alt_construct_tester_5(@_);
373            8                                 69       _print_subset_chart_engine(_argument_checker($argref));
374                                                   }
375                                                   
376                                                   sub _print_subset_chart_engine {
377            8                  100            78       my $seenrefsref = _calc_seen1(@_);
378            8                                 64       my $xsubsetref = _subset_subengine($seenrefsref);
379            8                                 50       my $title = 'Subset';
380            8                                 84       _chart_engine_multiple($xsubsetref, $title);
381                                                   }
382                                                   
383                                                   sub print_equivalence_chart {
384   ***      9                  100      0    110       my $argref = _alt_construct_tester_5(@_);
385            8                                 74       _print_equivalence_chart_engine(_argument_checker($argref));
386                                                   }
387                                                   
388                                                   sub _print_equivalence_chart_engine {
389            8                  100            82       my $seenrefsref = _calc_seen1(@_);
390            8                                 71       my $xequivalentref = _equivalent_subengine($seenrefsref);
391            8                                 48       my $title = 'Subset';
392            8                                 71       _chart_engine_multiple($xequivalentref, $title);
393                                                   }    
394                                                   
395                                                   sub is_member_which {
396   ***     91                  100      0    406       return @{ is_member_which_ref(@_) };
              91                                490   
397                                                   }    
398                                                   
399                                                   sub is_member_which_ref {
400   ***    185                  100      0   1631       my $argref = _alt_construct_tester_1(@_);
401          179                               1182       return _is_member_which_engine(_argument_checker_1($argref));
402                                                   }    
403                                                   
404                                                   sub _is_member_which_engine {
405          176                  100           710       my $arg = pop(@_);
406          176                               1120       my $seenrefsref = _calc_seen1(@_);
407          176                               1106       my $seenref = _calculate_seen_only($seenrefsref);
408          176                                565       my (@found);
409          176                                509       foreach (sort keys %{$seenref}) {
             176                               3570   
410          616    100                        1306           push @found, $_ if (exists ${$seenref}{$_}{$arg});
             616                               5710   
411                                                       }
412          176                              54598       return \@found;
413                                                   }
414                                                   
415                                                   sub is_member_any {
416   ***     94                  100      0   1037       my $argref = _alt_construct_tester_1(@_);
417           91                                669       return _is_member_any_engine(_argument_checker_1($argref));
418                                                   }    
419                                                   
420                                                   sub _is_member_any_engine {
421           88                  100           421       my $tested = pop(@_);
422           88                                619       my $seenrefsref = _calc_seen1(@_);
423           88                                597       my $seenref = _calculate_seen_only($seenrefsref);
424           88                                274       my ($k);
425           88                                326       while ( $k = each %{$seenref} ) {
             180                               1608   
426          164    100                         488           return 1 if (defined ${$seenref}{$k}{$tested});
             164                               2348   
427                                                       }
428           16                                463       return 0;
429                                                   }
430                                                   
431                                                   sub are_members_which {
432   ***     12                  100      0    157       my $argref = _alt_construct_tester_2(@_);
433            9                                 86       return _are_members_which_engine(_argument_checker_2($argref));
434                                                   }
435                                                   
436                                                   sub _are_members_which_engine {
437            8                  100            54       my $testedref = pop(@_);
438            8                                 80       my @tested = @{$testedref};
               8                                132   
439            8                                 74       my $seenrefsref = _calc_seen1(@_);
440            8                                 65       my $seenref = _calculate_seen_only($seenrefsref);
441            8                                 42       my (%found);
442                                                       for (my $i=0; $i<=$#tested; $i++) {
443           88                                190           my (@not_found);
444           88                               5920           foreach (sort keys %{$seenref}) {
              88                               1015   
445          308                                590               exists ${${$seenref}{$_}}{$tested[$i]}
             308                               2095   
             164                               7201   
446          308    100                         685                   ? push @{$found{$tested[$i]}}, $_
447                                                                   : push @not_found, $_;
448                                                           }
449           88    100                         418           $found{$tested[$i]} = [] if (@not_found == keys %{$seenref});
              88                               1305   
450            8                                 40       }
451            8                                390       return \%found;
452                                                   }
453                                                   
454                                                   sub are_members_any {
455   ***     12                  100      0    151       my $argref = _alt_construct_tester_2(@_);
456            9                                 90       return _are_members_any_engine(_argument_checker_2($argref));
457                                                   }    
458                                                   
459                                                   sub _are_members_any_engine {
460            8                  100            60       my $testedref = pop(@_);
461            8                                 40       my @tested = @{$testedref};
               8                                124   
462            8                                 79       my $seenrefsref = _calc_seen1(@_);
463            8                                 81       my $seenref = _calculate_seen_only($seenrefsref);
464            8                                 42       my (%present);
465                                                       for (my $i=0; $i<=$#tested; $i++) {
466           88                                206           foreach (keys %{$seenref}) {
              88                                515   
467          308    100                        1342               unless (defined $present{$tested[$i]}) {
468          164    100                         316                   $present{$tested[$i]} = 1 if ${$seenref}{$_}{$tested[$i]};
             164                               1952   
469                                                               }
470                                                           }
471           88    100                        1090           $present{$tested[$i]} = 0 if (! defined $present{$tested[$i]});
472            8                                107       }
473            8                                376       return \%present;
474                                                   }
475                                                   
476                                                   sub get_bag {
477   ***     20                  100      0    133       return @{ get_bag_ref(@_) };
              20                                164   
478                                                   }
479                                                   
480                                                   sub get_bag_ref {
481   ***     41                  100      0    509       my ($argref, $unsorted) = _alt_construct_tester(@_);
482           17                                145       $unsorted  
483                                                           ? return          _bag_engine(_argument_checker($argref))
484           41    100                         589           : return [ sort @{_bag_engine(_argument_checker($argref))} ];
485                                                   }
486                                                   
487                                                   sub _bag_engine {
488           41                  100           275       my @listrefs = @_;
489           41                                145       my (@bag);
490           41    100                         460       if (ref($listrefs[0]) eq 'ARRAY') { 
      ***            50                               
491           21                                137           foreach my $lref (@listrefs) {
492           75                                181               foreach my $el (@{$lref}) {
              75                                307   
493          512                               2717                   push(@bag, $el);
494                                                               }
495                                                           }
496                                                       } elsif (ref($listrefs[0]) eq 'HASH') {
497           20                                104           foreach my $lref (@listrefs) {
498           70                               1869               foreach my $key (keys %{$lref}) {
              70                                568   
499          890                              11610                   for (my $j=1; $j <= ${$lref}{$key}; $j++) {
500          480                               2671                       push(@bag, $key);
501          410                                909                   }
502                                                               }
503                                                           }
504                                                       } else {
505   ***      0                                  0           croak "Indeterminate case in _bag_engine: $!";
506                                                       }
507           41                               8658       return \@bag;
508                                                   }
509                                                   
510                                                   sub get_version {
511   ***      8                  100      0     87       return $List::Compare::Functional::VERSION;
512                                                   }
513                                                   
514                                                   1;
515                                                   
516                                                   __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
116          100     24     16   $unsorted ? :
133          100     27     16   $unsorted ? :
151          100     39     25   $unsorted ? :
178          100    900   1290   if ($left == $i or $right == $i)
188          100    126   1315   unless $alldeductions{$_}
203          100     36     25   $unsorted ? :
225          100    960   1360   unless exists $seenthis{$_}
240          100     48     32   $unsorted ? :
252          100    160    560   unless exists ${$sharedref;}{$_}
268          100     24     16   $unsorted ? :
289          100     24     16   $unsorted ? :
302          100    200    160   unless exists ${$intersectionref;}{$_}
363          100    432    864   !scalar(keys %{${$xintersectionref;}{$_};}) ? :
410          100    328    288   if exists ${$seenref;}{$_}{$arg}
426          100     72     92   if defined ${$seenref;}{$k}{$tested}
446          100    164    144   exists ${${$seenref;}{$_};}{$tested[$i]} ? :
449          100     16     72   if @not_found == keys %{$seenref;}
467          100    164    144   unless (defined $present{$tested[$i]})
468          100     72     92   if ${$seenref;}{$_}{$tested[$i]}
471          100     16     72   if not defined $present{$tested[$i]}
484          100     24     17   $unsorted ? :
490          100     21     20   if (ref $listrefs[0] eq 'ARRAY') { }
      ***     50     20      0   elsif (ref $listrefs[0] eq 'HASH') { }


Conditions
----------

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
178          100    450    450   1290   $left == $i or $right == $i


Covered Subroutines
-------------------

Subroutine                      Location                               
------------------------------- ---------------------------------------
BEGIN                           blib/lib/List/Compare/Functional.pm:101
BEGIN                           blib/lib/List/Compare/Functional.pm:102
BEGIN                           blib/lib/List/Compare/Functional.pm:93 
BEGIN                           blib/lib/List/Compare/Functional.pm:94 
BEGIN                           blib/lib/List/Compare/Functional.pm:95 
_are_members_any_engine         blib/lib/List/Compare/Functional.pm:460
_are_members_which_engine       blib/lib/List/Compare/Functional.pm:437
_bag_engine                     blib/lib/List/Compare/Functional.pm:488
_complement_engine              blib/lib/List/Compare/Functional.pm:212
_intersection_engine            blib/lib/List/Compare/Functional.pm:137
_is_LdisjointR_engine           blib/lib/List/Compare/Functional.pm:355
_is_LequivalentR_engine         blib/lib/List/Compare/Functional.pm:343
_is_LsubsetR_engine             blib/lib/List/Compare/Functional.pm:313
_is_RsubsetL_engine             blib/lib/List/Compare/Functional.pm:324
_is_member_any_engine           blib/lib/List/Compare/Functional.pm:421
_is_member_which_engine         blib/lib/List/Compare/Functional.pm:405
_nonintersection_engine         blib/lib/List/Compare/Functional.pm:293
_print_equivalence_chart_engine blib/lib/List/Compare/Functional.pm:389
_print_subset_chart_engine      blib/lib/List/Compare/Functional.pm:377
_shared_engine                  blib/lib/List/Compare/Functional.pm:272
_subset_engine                  blib/lib/List/Compare/Functional.pm:330
_symmetric_difference_engine    blib/lib/List/Compare/Functional.pm:244
_union_engine                   blib/lib/List/Compare/Functional.pm:120
_unique_engine                  blib/lib/List/Compare/Functional.pm:162
are_members_any                 blib/lib/List/Compare/Functional.pm:455
are_members_which               blib/lib/List/Compare/Functional.pm:432
get_bag                         blib/lib/List/Compare/Functional.pm:477
get_bag_ref                     blib/lib/List/Compare/Functional.pm:481
get_complement                  blib/lib/List/Compare/Functional.pm:196
get_complement_all              blib/lib/List/Compare/Functional.pm:207
get_complement_ref              blib/lib/List/Compare/Functional.pm:200
get_intersection                blib/lib/List/Compare/Functional.pm:126
get_intersection_ref            blib/lib/List/Compare/Functional.pm:130
get_nonintersection             blib/lib/List/Compare/Functional.pm:282
get_nonintersection_ref         blib/lib/List/Compare/Functional.pm:286
get_shared                      blib/lib/List/Compare/Functional.pm:261
get_shared_ref                  blib/lib/List/Compare/Functional.pm:265
get_symmetric_difference        blib/lib/List/Compare/Functional.pm:233
get_symmetric_difference_ref    blib/lib/List/Compare/Functional.pm:237
get_union                       blib/lib/List/Compare/Functional.pm:109
get_union_ref                   blib/lib/List/Compare/Functional.pm:113
get_unique                      blib/lib/List/Compare/Functional.pm:144
get_unique_all                  blib/lib/List/Compare/Functional.pm:155
get_unique_ref                  blib/lib/List/Compare/Functional.pm:148
get_version                     blib/lib/List/Compare/Functional.pm:511
is_LdisjointR                   blib/lib/List/Compare/Functional.pm:350
is_LequivalentR                 blib/lib/List/Compare/Functional.pm:336
is_LsubsetR                     blib/lib/List/Compare/Functional.pm:308
is_RsubsetL                     blib/lib/List/Compare/Functional.pm:319
is_member_any                   blib/lib/List/Compare/Functional.pm:416
is_member_which                 blib/lib/List/Compare/Functional.pm:396
is_member_which_ref             blib/lib/List/Compare/Functional.pm:400
print_equivalence_chart         blib/lib/List/Compare/Functional.pm:384
print_subset_chart              blib/lib/List/Compare/Functional.pm:372


