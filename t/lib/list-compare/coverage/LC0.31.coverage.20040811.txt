Reading database from /Users/jimk/tmp/work/List/cover_db


---------------------------- ------ ------ ------ ------ ------ ------ ------
File                           stmt branch   cond    sub    pod   time  total
---------------------------- ------ ------ ------ ------ ------ ------ ------
blib/lib/List/Compare.pm      100.0   99.2   74.3  100.0    0.0   30.8   90.9
...ompare/Base/_Auxiliary.pm   98.4   90.7   77.2  100.0    n/a   57.9   94.0
...t/Compare/Base/_Engine.pm  100.0  100.0  100.0  100.0    n/a    4.6  100.0
...ist/Compare/Functional.pm   99.6   97.8  100.0  100.0    0.0    6.8   92.1
Total                          99.5   96.5   76.4  100.0    0.0  100.0   92.0
---------------------------- ------ ------ ------ ------ ------ ------ ------


blib/lib/List/Compare.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare;
2                                                     $VERSION = 0.31;   # August 15, 2004 
3             26                  100           408   use strict;
              26                                114   
              26                                396   
4                                                     # use warnings; # commented out so module will run on pre-5.6 versions of Perl
5             26                  100           321   use Carp;
              26                                106   
              26                                641   
6             26                  100         17310   use List::Compare::Base::_Auxiliary qw(
7                                                         _validate_2_seenhashes
8                                                         _chart_engine_regular
9             26                                221   );
              26                               2047   
10                                                    
11                                                    sub new {
12    ***    230                  100      0   2227       my $class = shift;
13           230                               1309       my (@args, $unsorted, $accelerated, $self, $dataref, $unsortflag);
14           230                                949       my ($argument_error_status, $nextarg, @testargs);
15           230    100    100                 5971       if (@_ == 1 and (ref($_[0]) eq 'HASH')) {
16           111                                452          my $argref = shift;
17           111                               1029          die "Need to define 'lists' key properly: $!"
18    ***    111            66                 1423              unless ( ${$argref}{'lists'}
19           111    100                         423                   and (ref(${$argref}{'lists'}) eq 'ARRAY') );
20           110                                463          @args = @{${$argref}{'lists'}};
             110                                340   
             110                               1168   
21           110    100                         485          $unsorted = ${$argref}{'unsorted'} ? 1 : '';
             110                                821   
22           110    100                         344          $accelerated = ${$argref}{'accelerated'} ? 1 : '';
             110                               1382   
23                                                        } else {
24           119                               1546           @args = @_;
25           119    100    100                 2714           $unsorted = ($args[0] eq '-u' or $args[0] eq '--unsorted')
26                                                                ? shift(@args) : '';
27           119    100    100                 2609           $accelerated = shift(@args) 
28                                                                if ($args[0] eq '-a' or $args[0] eq '--accelerated');
29                                                        }
30           229                               1163       $argument_error_status = 1;
31           229                               4679       @testargs = @args[1..$#args];
32           229    100    100               212911       if (ref($args[0]) eq 'ARRAY' or ref($args[0]) eq 'HASH') {
33           226                               2041           while (defined ($nextarg = shift(@testargs))) {
34           405    100                        4471               unless (ref($nextarg) eq ref($args[0])) {
35            14                                 58                   $argument_error_status = 0;
36            14                                107                   last;
37                                                                }
38                                                            }
39                                                        } else {
40             3                                 18           $argument_error_status = 0;
41                                                        }
42           229    100                        2007       croak "Must pass all array references or all hash references: $!"
43                                                            unless $argument_error_status;
44                                                    
45                                                        # bless a ref to an empty hash into the invoking class
46           212    100                        1891       if (@args > 2) {
                    100                               
47            63    100                         404           if ($accelerated) {
48            28                                189               $class .= '::Multiple::Accelerated';
49    ***     28            33                  884               $self = bless {}, ref($class) || $class;
50                                                            } else {
51            35                                204               $class .= '::Multiple';
52    ***     35            33                  931               $self = bless {}, ref($class) || $class;
53                                                            }
54                                                        } elsif (@args == 2) {
55           148    100                         733           if ($accelerated) {
56            89                                502               $class .= '::Accelerated';
57    ***     89            33                 7427               $self = bless {}, ref($class) || $class;
58                                                            } else {
59    ***     59            33                 1479               $self = bless {}, ref($class) || $class;
60                                                            }
61                                                        } else {
62             1                                 23           croak "Must pass at least 2 references to \&new: $!";
63                                                        }
64                                                    
65                                                        # do necessary calculations and store results in a hash
66                                                        # take a reference to that hash
67           211    100                        1418       $unsortflag = $unsorted ? 1 : 0;
68           211                               1933       $dataref = $self->_init($unsortflag, @args);
69                                                    
70                                                        # initialize the object from the prepared values (Damian, p. 98)
71           187                               5836       %$self = %$dataref;
72           187                               4074       return $self;
73                                                    }
74                                                    
75                                                    sub _init {
76            59                  100           259       my $self = shift;
77            59                                353       my ($unsortflag, $refL, $refR) = @_;
78            59                                307       my (%data, @left, @right,  %seenL, %seenR);
79            59    100                         424       if (ref($refL) eq 'HASH') {
80            35                                361           my ($seenLref, $seenRref) =  _validate_2_seenhashes($refL, $refR);
81            29                                139           foreach my $key (keys %{$seenLref}) {
              29                                269   
82           333                               2218               for (my $j=1; $j <= ${$seenLref}{$key}; $j++) {
83           181                               8048                   push(@left, $key);
84           152                                375               }
85                                                            }
86            29                                195           foreach my $key (keys %{$seenRref}) {
              29                                245   
87           300                               2057               for (my $j=1; $j <= ${$seenRref}{$key}; $j++) {
88           161                                711                   push(@right, $key);
89           139                                342               }
90                                                            }
91            29                                185           %seenL = %{$seenLref};
              29                                965   
92            29                                361           %seenR = %{$seenRref};
              29                                719   
93                                                        } else {
94            24                                200           foreach (@$refL) { $seenL{$_}++ } 
             152                                834   
95            24                                162           foreach (@$refR) { $seenR{$_}++ }
             137                              31093   
96            24                                395           @left  = @$refL;
97            24                                371           @right = @$refR;
98                                                        } 
99            53    100                        1786       my @bag = $unsortflag ? (@left, @right) : sort(@left, @right);
100           53                                328       my (%intersection, %union, %Lonly, %Ronly, %LorRonly);
101           53                                255       my $LsubsetR_status = my $RsubsetL_status = 1;
102           53                                196       my $LequivalentR_status = 0;
103                                                   
104           53                                546       foreach (keys %seenL) {
105          280                                913           $union{$_}++;
106          280    100                        1623           exists $seenR{$_} ? $intersection{$_}++ : $Lonly{$_}++;
107                                                       }
108                                                   
109           53                                541       foreach (keys %seenR) {
110          257                                668           $union{$_}++;
111          257    100                        1379           $Ronly{$_}++ unless (exists $intersection{$_});
112                                                       }
113                                                   
114           53                                264       $LorRonly{$_}++ foreach ( (keys %Lonly), (keys %Ronly) );
              53                                631   
115                                                   
116           53    100                         530       $LequivalentR_status = 1 if ( (keys %LorRonly) == 0);
117                                                   
118           53                                249       foreach (@left) {
119          182    100                        1072           if (! exists $seenR{$_}) {
120           42                                160               $LsubsetR_status = 0;
121           42                                332               last;
122                                                           }
123                                                       }
124           53                                285       foreach (@right) {
125          254    100                        1290           if (! exists $seenL{$_}) {
126           31                                108               $RsubsetL_status = 0;
127           31                                133               last;
128                                                           }
129                                                       }
130                                                   
131           53                                439       $data{'seenL'}                = \%seenL; 
132           53                                308       $data{'seenR'}                = \%seenR; 
133           53    100                        1128       $data{'intersection'}         = $unsortflag ? [      keys %intersection ] 
134                                                                                                   : [ sort keys %intersection ];
135           53    100                        1319       $data{'union'}                = $unsortflag ? [      keys %union ]
136                                                                                                   : [ sort keys %union ];
137           53    100                         962       $data{'unique'}               = $unsortflag ? [      keys %Lonly ] 
138                                                                                                   : [ sort keys %Lonly ];
139           53    100                         654       $data{'complement'}           = $unsortflag ? [      keys %Ronly ] 
140                                                                                                   : [ sort keys %Ronly ];
141           53    100                         726       $data{'symmetric_difference'} = $unsortflag ? [      keys %LorRonly ] 
142                                                                                                   : [ sort keys %LorRonly ];
143           53                                307       $data{'LsubsetR_status'}      = $LsubsetR_status;
144           53                                468       $data{'RsubsetL_status'}      = $RsubsetL_status;
145           53                                292       $data{'LequivalentR_status'}  = $LequivalentR_status;
146           53    100                         443       $data{'LdisjointR_status'}    = keys %intersection == 0 ? 1 : 0;
147           53                                283       $data{'bag'}                  = \@bag;
148           53                              98511       return \%data;
149                                                   }
150                                                   
151                                                   sub get_intersection {
152   ***     20                  100      0    117       return @{ get_intersection_ref(shift) };
              20                                255   
153                                                   }
154                                                   
155                                                   sub get_intersection_ref {
156   ***     40                  100      0    236       my $class = shift;
157           40                               1423       my %data = %$class;
158           40                                927       return $data{'intersection'};
159                                                   }
160                                                   
161                                                   sub get_union {
162   ***     16                  100      0     84       return @{ get_union_ref(shift) };
              16                                130   
163                                                   }
164                                                   
165                                                   sub get_union_ref {
166   ***     32                  100      0    181       my $class = shift;
167           32                                980       my %data = %$class;
168           32                               1002       return $data{'union'};
169                                                   }
170                                                   
171                                                   sub get_shared {
172   ***      8                  100      0     63       my $class = shift;
173            8                                177       my $method = (caller(0))[3];
174            8                                204       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_union()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
175            8                                324       get_union($class);
176                                                   }
177                                                   
178                                                   sub get_shared_ref {
179   ***      8                  100      0     61       my $class = shift;
180            8                                160       my $method = (caller(0))[3];
181            8                                191       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_union_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
182            8                                314       get_union_ref($class);
183                                                   }
184                                                   
185                                                   sub get_unique {
186   ***     24                  100      0    120       return @{ get_unique_ref(shift) };
              24                                182   
187                                                   }
188                                                   
189                                                   sub get_unique_ref {
190   ***     48                  100      0    260       my $class = shift;
191           48                               2518       my %data = %$class;
192           48                                931       return $data{'unique'};
193                                                   }
194                                                   
195                                                   sub get_unique_all {
196   ***      8                  100      0     70       my $class = shift;
197            8                                282       my %data = %$class;
198            8                                162       return [ $data{'unique'}, $data{'complement'} ];
199                                                   }
200                                                   
201                                                   *get_Lonly = \&get_unique;
202                                                   *get_Aonly = \&get_unique;
203                                                   *get_Lonly_ref = \&get_unique_ref;
204                                                   *get_Aonly_ref = \&get_unique_ref;
205                                                   
206                                                   sub get_complement {
207   ***     24                  100      0    129       return @{ get_complement_ref(shift) };
              24                                185   
208                                                   }
209                                                   
210                                                   sub get_complement_ref {
211   ***     48                  100      0    290       my $class = shift;
212           48                               1683       my %data = %$class;
213           48                                970       return $data{'complement'};
214                                                   }
215                                                   
216                                                   sub get_complement_all {
217   ***      8                  100      0     62       my $class = shift;
218            8                                302       my %data = %$class;
219            8                                170       return [ $data{'complement'}, $data{'unique'} ];
220                                                   }
221                                                   
222                                                   *get_Ronly = \&get_complement;
223                                                   *get_Bonly = \&get_complement;
224                                                   *get_Ronly_ref = \&get_complement_ref;
225                                                   *get_Bonly_ref = \&get_complement_ref;
226                                                   
227                                                   sub get_symmetric_difference {
228   ***     40                  100      0    194       return @{ get_symmetric_difference_ref(shift) };
              40                                357   
229                                                   }
230                                                   
231                                                   sub get_symmetric_difference_ref {
232   ***     80                  100      0    454       my $class = shift;
233           80                               2982       my %data = %$class;
234           80                               8881       return $data{'symmetric_difference'};
235                                                   }
236                                                   
237                                                   *get_symdiff  = \&get_symmetric_difference;
238                                                   *get_LorRonly = \&get_symmetric_difference;
239                                                   *get_AorBonly = \&get_symmetric_difference;
240                                                   *get_symdiff_ref  = \&get_symmetric_difference_ref;
241                                                   *get_LorRonly_ref = \&get_symmetric_difference_ref;
242                                                   *get_AorBonly_ref = \&get_symmetric_difference_ref;
243                                                   
244                                                   sub get_nonintersection {
245   ***      8                  100      0     63       my $class = shift;
246            8                                246       my $method = (caller(0))[3];
247            8                                336       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_symmetric_difference()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
248            8                                276       get_symmetric_difference($class);
249                                                   }
250                                                   
251                                                   sub get_nonintersection_ref {
252   ***      8                  100      0    137       my $class = shift;
253            8                                171       my $method = (caller(0))[3];
254            8                                193       carp "When comparing only 2 lists, $method defaults to \n  ", 'get_symmetric_difference_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
255            8                                397       get_symmetric_difference_ref($class);
256                                                   }
257                                                   
258                                                   sub is_LsubsetR {
259   ***     32                  100      0    222       my $class = shift;
260           32                               1558       my %data = %$class;
261           32                                474       return $data{'LsubsetR_status'};
262                                                   }
263                                                   
264                                                   *is_AsubsetB = \&is_LsubsetR;
265                                                   
266                                                   sub is_RsubsetL {
267   ***     32                  100      0    212       my $class = shift;
268           32                               1684       my %data = %$class;
269           32                                514       return $data{'RsubsetL_status'};
270                                                   }
271                                                   
272                                                   *is_BsubsetA = \&is_RsubsetL;
273                                                   
274                                                   sub is_LequivalentR {
275   ***     48                  100      0    304       my $class = shift;
276           48                               1489       my %data = %$class;
277           48                                676       return $data{'LequivalentR_status'};
278                                                   }
279                                                   
280                                                   *is_LeqvlntR = \&is_LequivalentR;
281                                                   
282                                                   sub is_LdisjointR {
283   ***     36                  100      0    285       my $class = shift;
284           36                               1194       my %data = %$class;
285           36                                534       return $data{'LdisjointR_status'};
286                                                   }
287                                                   
288                                                   sub print_subset_chart {
289   ***      8                  100      0    558       my $class = shift;
290            8                                331       my %data = %$class;
291            8                                119       my @subset_array = ($data{'LsubsetR_status'}, $data{'RsubsetL_status'});
292            8                                 46       my $title = 'Subset';
293            8                                108       _chart_engine_regular(\@subset_array, $title);
294                                                   }
295                                                   
296                                                   sub print_equivalence_chart {
297   ***      8                  100      0     58       my $class = shift;
298            8                                372       my %data = %$class;
299            8                                123       my @equivalent_array = ($data{'LequivalentR_status'}, 
300                                                                               $data{'LequivalentR_status'});
301            8                                 45       my $title = 'Equivalence';
302            8                                 80       _chart_engine_regular(\@equivalent_array, $title);
303                                                   }
304                                                   
305                                                   sub is_member_which {
306   ***     88                  100      0    467       return @{ is_member_which_ref(@_) };
              88                                527   
307                                                   }    
308                                                   
309                                                   sub is_member_which_ref {
310   ***    177                  100      0   1026       my $class = shift;
311   ***    177    100     66                 3847       croak "Method call requires exactly 1 argument (no references):  $!"
312                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
313          176                               6088       my %data = %$class;
314          176                               1334       my ($arg, @found);
315          176                                788       $arg = shift;
316          176    100                         495       if (exists ${$data{'seenL'}}{$arg}) { push @found, 0; }
             176                               1474   
             112                                999   
317          176    100                         454       if (exists ${$data{'seenR'}}{$arg}) { push @found, 1; }
             176                               1378   
             112                                747   
318          176    100    100                  486       if ( (! exists ${$data{'seenL'}}{$arg}) &&
             176                               1267   
              64                                805   
319                                                            (! exists ${$data{'seenR'}}{$arg}) )
320           48                                340          { @found = (); }
321          176                               2569       return \@found;
322                                                   }    
323                                                   
324                                                   sub are_members_which {
325   ***      9                  100      0     64       my $class = shift;
326   ***      9    100     66                  274       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
327                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
328            8                                315       my %data = %$class;
329            8                                 78       my (@args, %found);
330            8                                 39       @args = @{$_[0]};
               8                                195   
331                                                       for (my $i=0; $i<=$#args; $i++) {
332           88    100                         192           if (exists ${$data{'seenL'}}{$args[$i]}) { push @{$found{$args[$i]}}, 0; }
              88                                485   
              56                                128   
              56                              19672   
333           88    100                         214           if (exists ${$data{'seenR'}}{$args[$i]}) { push @{$found{$args[$i]}}, 1; }
              88                               4730   
              56                                130   
              56                                436   
334           88    100    100                  212           if ( (! exists ${$data{'seenL'}}{$args[$i]}) &&
              88                                857   
              32                                294   
335                                                                (! exists ${$data{'seenR'}}{$args[$i]}) )
336           24                                 67              { @{$found{$args[$i]}} = (); }
              24                                623   
337            8                                 86       }
338            8                                211       return \%found;
339                                                   }    
340                                                   
341                                                   sub is_member_any {
342   ***     89                  100      0    533       my $class = shift;
343   ***     89    100     66                 1314       croak "Method call requires exactly 1 argument (no references):  $!"
344                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
345           88                               3229       my %data = %$class;
346           88                                695       my $arg = shift;
347           88    100    100                 1984       ( defined $data{'seenL'}{$arg} ) ||
348                                                       ( defined $data{'seenR'}{$arg} ) ? return 1 : return 0;
349                                                   }    
350                                                   
351                                                   sub are_members_any {
352   ***      9                  100      0     59       my $class = shift;
353   ***      9    100     66                  252       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
354                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
355            8                                241       my %data = %$class;
356            8                                 68       my (@args, %present);
357            8                                 41       @args = @{$_[0]};
               8                                312   
358                                                       for (my $i=0; $i<=$#args; $i++) {
359           88    100    100                23137       $present{$args[$i]} = ( defined $data{'seenL'}{$args[$i]} ) ||
360                                                                             ( defined $data{'seenR'}{$args[$i]} )     ? 1 : 0;
361            8                                198       }
362            8                                202       return \%present;
363                                                   }    
364                                                   
365                                                   sub get_bag {
366   ***      8                  100      0     44       return @{ get_bag_ref(shift) };
               8                                 71   
367                                                   }
368                                                   
369                                                   sub get_bag_ref {
370   ***     16                  100      0    101       my $class = shift;
371           16                                651       my %data = %$class;
372           16                                747       return $data{'bag'};
373                                                   }
374                                                   
375                                                   sub get_version {
376   ***      8                  100      0     72       return $List::Compare::VERSION;
377                                                   }
378                                                   
379                                                   1;
380                                                   
381                                                   ################################################################################
382                                                   
383                                                   package List::Compare::Accelerated;
384           26                  100           981   use Carp;
              26                                165   
              26                                693   
385           26                  100           500   use List::Compare::Base::_Auxiliary qw(
386                                                       _validate_2_seenhashes
387                                                       _argument_checker_0
388                                                       _chart_engine_regular
389                                                       _calc_seen
390                                                       _equiv_engine 
391           26                                111   );
              26                                490   
392                                                   
393                                                   sub _init {
394           89                  100          4823       my $self = shift;
395           89                                493       my ($unsortflag, $refL, $refR) = @_;
396           89                                239       my %data = ();
397           89                                786       ($data{'L'}, $data{'R'}) = _argument_checker_0($refL, $refR);
398           83    100                         613       $data{'unsort'} = $unsortflag ? 1 : 0;
399           83                               5199       return \%data;
400                                                   }    
401                                                   
402                                                   sub get_intersection {
403   ***     12                  100      0     70       return @{ get_intersection_ref(shift) };
              12                                107   
404                                                   }
405                                                   
406                                                   sub get_intersection_ref {
407   ***     24                  100      0    147       my $class = shift;
408           24                                455       my %data = %$class;
409           16                                138       $data{'unsort'} 
410                                                         ? return          _intersection_engine($data{'L'}, $data{'R'})   
411           24    100                         303         : return [ sort @{_intersection_engine($data{'L'}, $data{'R'})} ];
412                                                   }
413                                                   
414                                                   sub get_union {
415   ***      8                  100      0     49       return @{ get_union_ref(shift) };
               8                                 77   
416                                                   }
417                                                   
418                                                   sub get_union_ref {
419   ***     32                  100      0    225       my $class = shift;
420           32                                537       my %data = %$class;
421           20                                179       $data{'unsort'} 
422                                                         ? return          _union_engine($data{'L'}, $data{'R'})   
423           32    100                         390         : return [ sort @{_union_engine($data{'L'}, $data{'R'})} ];
424                                                   }
425                                                   
426                                                   sub get_shared {
427   ***      8                  100      0     47       return @{ get_shared_ref(shift) };
               8                                 81   
428                                                   }
429                                                   
430                                                   sub get_shared_ref {
431   ***     16                  100      0     98       my $class = shift;
432           16                                477       my $method = (caller(0))[3];
433           16                                804       $method =~ s/.*::(\w*)$/$1/;
434           16                                436       carp "When comparing only 2 lists, \&$method defaults to \n  \&get_union_ref.  Though the results returned are valid, \n    please consider re-coding with that method: $!";
435           16                                547       &get_union_ref($class);
436                                                   }
437                                                   
438                                                   sub get_unique {
439   ***     24                  100      0    234       return @{ get_unique_ref(shift) };
              24                                216   
440                                                   }
441                                                   
442                                                   sub get_unique_ref {
443   ***     64                  100      0    431       my $class = shift;
444           64                               1390       my %data = %$class;
445           38                                312       $data{'unsort'} 
446                                                         ? return          _unique_engine($data{'L'}, $data{'R'})   
447           64    100                        5385         : return [ sort @{_unique_engine($data{'L'}, $data{'R'})} ];
448                                                   }
449                                                   
450                                                   sub get_unique_all {
451   ***      8                  100      0    116       my $class = shift;
452            8                                 66       return [ get_unique_ref($class), get_complement_ref($class) ];
453                                                   }
454                                                   
455                                                   *get_Lonly = \&get_unique;
456                                                   *get_Aonly = \&get_unique;
457                                                   *get_Lonly_ref = \&get_unique_ref;
458                                                   *get_Aonly_ref = \&get_unique_ref;
459                                                   
460                                                   sub get_complement {
461   ***     24                  100      0    142       return @{ get_complement_ref(shift) };
              24                                216   
462                                                   }
463                                                   
464                                                   sub get_complement_ref {
465   ***     64                  100      0    375       my $class = shift;
466           64                               1160       my %data = %$class;
467           38                                296       $data{'unsort'} 
468                                                         ? return          _complement_engine($data{'L'}, $data{'R'})   
469           64    100                         753         : return [ sort @{_complement_engine($data{'L'}, $data{'R'})} ];
470                                                   }
471                                                   
472                                                   sub get_complement_all {
473   ***      8                  100      0     64       my $class = shift;
474            8                                 60       return [ get_complement_ref($class), get_unique_ref($class) ];
475                                                   }
476                                                   
477                                                   *get_Ronly = \&get_complement;
478                                                   *get_Bonly = \&get_complement;
479                                                   *get_Ronly_ref = \&get_complement_ref;
480                                                   *get_Bonly_ref = \&get_complement_ref;
481                                                   
482                                                   sub get_symmetric_difference {
483   ***     32                  100      0    171       return @{ get_symmetric_difference_ref(shift) };
              32                                300   
484                                                   }
485                                                   
486                                                   sub get_symmetric_difference_ref {
487   ***     80                  100      0    453       my $class = shift;
488           80                               1839       my %data = %$class;
489           50                                499       $data{'unsort'} 
490                                                         ? return          _symmetric_difference_engine($data{'L'}, $data{'R'})  
491           80    100                         893         : return [ sort @{_symmetric_difference_engine($data{'L'}, $data{'R'})} ];
492                                                   }
493                                                   
494                                                   *get_symdiff  = \&get_symmetric_difference;
495                                                   *get_LorRonly = \&get_symmetric_difference;
496                                                   *get_AorBonly = \&get_symmetric_difference;
497                                                   *get_symdiff_ref  = \&get_symmetric_difference_ref;
498                                                   *get_LorRonly_ref = \&get_symmetric_difference_ref;
499                                                   *get_AorBonly_ref = \&get_symmetric_difference_ref;
500                                                   
501                                                   sub get_nonintersection {
502   ***      8                  100      0     41       return @{ get_nonintersection_ref(shift) };
               8                                 77   
503                                                   }
504                                                   
505                                                   sub get_nonintersection_ref {
506   ***     16                  100      0     94       my $class = shift;
507           16                                373       my $method = (caller(0))[3];
508           16                                740       $method =~ s/.*::(\w*)$/$1/;
509           16                                360       carp "When comparing only 2 lists, \&$method defaults to \n  \&get_symmetric_difference_ref.  Though the results returned are valid, \n    please consider re-coding with that method: $!";
510           16                                544       &get_symmetric_difference_ref($class);
511                                                   }
512                                                   
513                                                   sub is_LsubsetR {
514   ***     32                  100      0    260       my $class = shift;
515           32                                648       my %data = %$class;
516           32                                331       return _is_LsubsetR_engine($data{'L'}, $data{'R'});
517                                                   }
518                                                   
519                                                   *is_AsubsetB  = \&is_LsubsetR;
520                                                   
521                                                   sub is_RsubsetL {
522   ***     32                  100      0    225       my $class = shift;
523           32                                600       my %data = %$class;
524           32                                298       return _is_RsubsetL_engine($data{'L'}, $data{'R'});
525                                                   }
526                                                   
527                                                   *is_BsubsetA  = \&is_RsubsetL;
528                                                   
529                                                   sub is_LequivalentR {
530   ***     48                  100      0    352       my $class = shift;
531           48                                903       my %data = %$class;
532           48                                476       return _is_LequivalentR_engine($data{'L'}, $data{'R'});
533                                                   }
534                                                   
535                                                   *is_LeqvlntR = \&is_LequivalentR;
536                                                   
537                                                   sub is_LdisjointR {
538   ***     28                  100      0    216       my $class = shift;
539           28                                504       my %data = %$class;
540           28                                291       return _is_LdisjointR_engine($data{'L'}, $data{'R'});
541                                                   }
542                                                   
543                                                   sub print_subset_chart {
544   ***      8                  100      0     64       my $class = shift;
545            8                                137       my %data = %$class;
546            8                                 88       _print_subset_chart_engine($data{'L'}, $data{'R'});
547                                                   }
548                                                   
549                                                   sub print_equivalence_chart {
550   ***      8                  100      0     68       my $class = shift;
551            8                                152       my %data = %$class;
552            8                                 90       _print_equivalence_chart_engine($data{'L'}, $data{'R'});
553                                                   }
554                                                   
555                                                   sub is_member_which {
556   ***     88                  100      0    394       return @{ is_member_which_ref(@_) };
              88                                480   
557                                                   }    
558                                                   
559                                                   sub is_member_which_ref {
560   ***    177                  100      0   1068       my $class = shift;
561   ***    177    100     66                29403       croak "Method call requires exactly 1 argument (no references):  $!"
562                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
563          176                               4639       my %data = %$class;
564          176                               7898       return _is_member_which_engine($data{'L'}, $data{'R'}, shift);
565                                                   }    
566                                                   
567                                                   sub are_members_which {
568   ***      9                  100      0     72       my $class = shift;
569   ***      9    100     66                  343       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
570                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
571            8                                156       my %data = %$class;
572            8                                 50       my (@args);
573            8                                 39       @args = @{$_[0]};
               8                                381   
574            8                                163       return _are_members_which_engine($data{'L'}, $data{'R'}, \@args);
575                                                   }
576                                                   
577                                                   sub is_member_any {
578   ***     89                  100      0    641       my $class = shift;
579   ***     89    100     66                 1591       croak "Method call requires exactly 1 argument (no references):  $!"
580                                                           unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
581           88                               1451       my %data = %$class;
582           88                                825       return _is_member_any_engine($data{'L'}, $data{'R'}, shift);
583                                                   }    
584                                                   
585                                                   sub are_members_any {
586   ***      9                  100      0     67       my $class = shift;
587   ***      9    100     66                  303       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
588                                                           unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
589            8                                135       my %data = %$class;
590            8                                 50       my (@args);
591            8                                 39       @args = @{$_[0]};
               8                                288   
592            8                                158       return _are_members_any_engine($data{'L'}, $data{'R'}, \@args);
593                                                   }    
594                                                   
595                                                   sub get_bag {
596   ***      8                  100      0     90       return @{ get_bag_ref(shift) };
               8                                 78   
597                                                   }
598                                                   
599                                                   sub get_bag_ref {
600   ***     16                  100      0    102       my $class = shift;
601           16                                294       my %data = %$class;
602           16    100                         245       if (ref($data{'L'}) eq 'ARRAY') {
603            4                                 27           $data{'unsort'} ? return [      @{$data{'L'}}, @{$data{'R'}}  ]
               4                                248   
               4                                 32   
604            8    100                          63                           : return [ sort(@{$data{'L'}}, @{$data{'R'}}) ];
               4                                280   
605                                                       } else {
606            8                                 36           my (@left, @right);
607            8                                 35           foreach my $key (keys %{$data{'L'}}) {
               8                                130   
608          120                                916               for (my $j=1; $j <= ${$data{'L'}}{$key}; $j++) {
609           64                                320                   push(@left, $key);
610           56                                140               }
611                                                           }
612            8                                 99           foreach my $key (keys %{$data{'R'}}) {
               8                                 81   
613          120                                789               for (my $j=1; $j <= ${$data{'R'}}{$key}; $j++) {
614           64                                315                   push(@right, $key);
615           56                                135               }
616                                                           }
617            8    100                         651           $data{'unsort'} ? return [      @left, @right  ]
618                                                                           : return [ sort(@left, @right) ];
619                                                       }
620                                                   }
621                                                   
622                                                   sub get_version {
623   ***      8                  100      0     76       return $List::Compare::VERSION;
624                                                   }
625                                                   
626                                                   sub _intersection_engine {
627           24                  100           197       my ($l, $r) = @_;
628           24                                242       my ($hrefL, $hrefR) = _calc_seen($l, $r);
629           24                                105       my %intersection = ();
630           24                                141       foreach (keys %{$hrefL}) {
              24                                294   
631          144    100                         308           $intersection{$_}++ if (exists ${$hrefR}{$_});
             144                               6631   
632                                                       }
633           24                               1332       return [ keys %intersection ];
634                                                   }
635                                                   
636                                                   sub _union_engine {
637           32                  100           191       my ($l, $r) = @_;
638           32                                335       my ($hrefL, $hrefR) = _calc_seen($l, $r);
639           32                                127       my %union = ();
640           32                                 99       $union{$_}++ foreach ( (keys %{$hrefL}), (keys %{$hrefR}) );
              32                                110   
              32                                344   
              32                               1687   
641           32                               2161       return [ keys %union ];
642                                                   }
643                                                   
644                                                   sub _unique_engine {
645           64                  100           438       my ($l, $r) = @_;
646           64                                711       my ($hrefL, $hrefR) = _calc_seen($l, $r);
647           64                                269       my (%Lonly);
648           64                                235       foreach (keys %{$hrefL}) {
              64                               5750   
649          448    100                        1532           $Lonly{$_}++ unless exists ${$hrefR}{$_};
             448                               3108   
650                                                       }
651           64                               1998       return [ keys %Lonly ];
652                                                   }
653                                                   
654                                                   sub _complement_engine {
655           64                  100           384       my ($l, $r) = @_;
656           64                                605       my ($hrefL, $hrefR) = _calc_seen($l, $r);
657           64                                266       my (%Ronly);
658           64                                233       foreach (keys %{$hrefR}) {
              64                               1011   
659          448    100                         935           $Ronly{$_}++ unless (exists ${$hrefL}{$_});
             448                               2969   
660                                                       }
661           64                               1816       return [ keys %Ronly ];
662                                                   }
663                                                   
664                                                   sub _symmetric_difference_engine {
665           80                  100          1093       my ($l, $r) = @_;
666           80                               7055       my ($hrefL, $hrefR) = _calc_seen($l, $r);
667           80                                309       my (%LorRonly);
668           80                                237       foreach (keys %{$hrefL}) {
              80                               2452   
669          560    100                        1204           $LorRonly{$_}++ unless (exists ${$hrefR}{$_});
             560                               5518   
670                                                       }
671           80                                523       foreach (keys %{$hrefR}) {
              80                                668   
672          560    100                        1173           $LorRonly{$_}++ unless (exists ${$hrefL}{$_});
             560                               9576   
673                                                       }
674           80                               3350       return [ keys %LorRonly ];
675                                                   }
676                                                   
677                                                   sub _is_LsubsetR_engine {
678           32                  100           176       my ($l, $r) = @_;
679           32                                284       my ($hrefL, $hrefR) = _calc_seen($l, $r);
680           32                                145       my $LsubsetR_status = 1;
681           32                                171       foreach (keys %{$hrefL}) {
              32                                418   
682          144    100                         406           if (! exists ${$hrefR}{$_}) {
             144                                951   
683           32                                 94               $LsubsetR_status = 0;
684           32                                252               last;
685                                                           }
686                                                       }
687           32                                458       return $LsubsetR_status;
688                                                   }
689                                                   
690                                                   sub _is_RsubsetL_engine {
691           32                  100           224       my ($l, $r) = @_;
692           32                                258       my ($hrefL, $hrefR) = _calc_seen($l, $r);
693           32                                131       my $RsubsetL_status = 1;
694           32                                178       foreach (keys %{$hrefR}) {
              32                               5723   
695          128    100                         298           if (! exists ${$hrefL}{$_}) {
             128                                886   
696           16                                 53               $RsubsetL_status = 0;
697           16                                 92               last;
698                                                           }
699                                                       }
700           32                                469       return $RsubsetL_status;
701                                                   }
702                                                   
703                                                   sub _is_LequivalentR_engine {
704           48                  100           229       my ($l, $r) = @_;
705           48                                859       my ($hrefL, $hrefR) = _calc_seen($l, $r);
706           48                                545       return _equiv_engine($hrefL, $hrefR);
707                                                   }
708                                                   
709                                                   sub _is_LdisjointR_engine {
710           28                  100           153       my ($l, $r) = @_;
711           28                                230       my ($hrefL, $hrefR) = _calc_seen($l, $r);
712           28                                117       my %intersection = ();
713           28                               1210       foreach (keys %{$hrefL}) {
              28                                448   
714          144    100                         313           $intersection{$_}++ if (exists ${$hrefR}{$_});
             144                               1540   
715                                                       }
716           28    100                         655       keys %intersection == 0 ? 1 : 0;
717                                                   }
718                                                   
719                                                   sub _print_subset_chart_engine {
720            8                  100            46       my ($l, $r) = @_;
721            8                                 74       my ($hrefL, $hrefR) = _calc_seen($l, $r);
722            8                                 86       my $LsubsetR_status = my $RsubsetL_status = 1;
723            8                                 34       foreach (keys %{$hrefL}) {
               8                                122   
724           40    100                          97           if (! exists ${$hrefR}{$_}) {
              40                                319   
725            8                                 27               $LsubsetR_status = 0;
726            8                                 56               last;
727                                                           }
728                                                       }
729            8                                 55       foreach (keys %{$hrefR}) {
               8                                 75   
730           32    100                          75           if (! exists ${$hrefL}{$_}) {
              32                                202   
731            8                                 34               $RsubsetL_status = 0;
732            8                                 29               last;
733                                                           }
734                                                       }
735            8                                984       my @subset_array = ($LsubsetR_status, $RsubsetL_status);
736            8                                 92       my $title = 'Subset';
737            8                                 89       _chart_engine_regular(\@subset_array, $title);
738                                                   }
739                                                   
740                                                   sub _print_equivalence_chart_engine {
741            8                  100            47       my ($l, $r) = @_;
742            8                                 71       my ($hrefL, $hrefR) = _calc_seen($l, $r);
743            8                                 63       my $LequivalentR_status = _equiv_engine($hrefL, $hrefR);
744            8                                 65       my @equivalent_array = ($LequivalentR_status, $LequivalentR_status);
745            8                                 37       my $title = 'Equivalence';
746            8                                 64       _chart_engine_regular(\@equivalent_array, $title);
747                                                   }    
748                                                   
749                                                   sub _is_member_which_engine {
750          176                  100           959       my ($l, $r, $arg) = @_;
751          176                               1819       my ($hrefL, $hrefR) = _calc_seen($l, $r);
752          176                                681       my (@found);
753          176    100                         469       if (exists ${$hrefL}{$arg}) { push @found, 0; }
             176                               1328   
             112                               5627   
754          176    100                         531       if (exists ${$hrefR}{$arg}) { push @found, 1; }
             176                               1079   
             112                                773   
755          176    100    100                  568       if ( (! exists ${$hrefL}{$arg}) &&
             176                               1218   
              64                                610   
756                                                            (! exists ${$hrefR}{$arg}) )
757           48                                402          { @found = (); }
758          176                               3090       return \@found;
759                                                   }    
760                                                   
761                                                   sub _are_members_which_engine {
762            8                  100            49       my ($l, $r, $arg) = @_;
763            8                                 70       my ($hrefL, $hrefR) = _calc_seen($l, $r);
764            8                                 38       my @args = @{$arg};
               8                                171   
765            8                                 39       my (%found);
766                                                       for (my $i=0; $i<=$#args; $i++) {
767           88    100                         194           if (exists ${$hrefL}{$args[$i]}) { push @{$found{$args[$i]}}, 0; }
              88                                501   
              56                               5486   
              56                                637   
768           88    100                         218           if (exists ${$hrefR}{$args[$i]}) { push @{$found{$args[$i]}}, 1; }
              88                                502   
              56                                123   
              56                                494   
769           88    100    100                  210           if ( (! exists ${$hrefL}{$args[$i]}) &&
              88                                761   
              32                                281   
770                                                                (! exists ${$hrefR}{$args[$i]}) )
771           24                                 66              { @{$found{$args[$i]}} = (); }
              24                                548   
772            8                                 33       }
773            8                                218       return \%found;
774                                                   }
775                                                   
776                                                   sub _is_member_any_engine {
777           88                  100           507       my ($l, $r, $arg) = @_;
778           88                                695       my ($hrefL, $hrefR) = _calc_seen($l, $r);
779           88                               1628       ( defined ${$hrefL}{$arg} ) ||
              32                                672   
780           88    100    100                  343       ( defined ${$hrefR}{$arg} ) ? return 1 : return 0;
781                                                   }
782                                                   
783                                                   sub _are_members_any_engine {
784            8                  100           113       my ($l, $r, $arg) = @_;
785            8                                 70       my ($hrefL, $hrefR) = _calc_seen($l, $r);
786            8                                 37       my @args = @{$arg};
               8                                637   
787            8                                 44       my (%present);
788                                                       for (my $i=0; $i<=$#args; $i++) {
789           88                                804           $present{$args[$i]} = ( defined ${$hrefL}{$args[$i]} ) ||
              32                                631   
790           88    100    100                  184                                 ( defined ${$hrefR}{$args[$i]} ) ? 1 : 0;
791            8                                 37       }
792            8                                187       return \%present;
793                                                   }
794                                                   
795                                                   1;
796                                                   
797                                                   ################################################################################
798                                                   
799                                                   package List::Compare::Multiple;
800           26                  100           866   use Carp;
              26                                200   
              26                                720   
801           26                  100           454   use List::Compare::Base::_Auxiliary qw(
802                                                       _validate_seen_hash
803                                                       _index_message1
804                                                       _index_message2
805                                                       _chart_engine_multiple
806           26                                123   );
              26                                474   
807                                                   
808                                                   sub _init {
809           35                  100           169       my $self = shift;
810           35                                164       my $unsortflag = shift;
811           35                                349       my @listrefs = @_;
812           35                                126       my (@arrayrefs);
813           35                                261       my $maxindex = $#listrefs;
814           35    100                         308       if (ref($listrefs[0]) eq 'ARRAY') {
815           15                                166           @arrayrefs = @listrefs;
816                                                       } else {
817           20                                216           _validate_seen_hash(@listrefs);
818           14                                117           foreach my $href (@listrefs) {
819           74                                160               my (@temp);
820           74                                200               foreach my $key (keys %{$href}) {
              74                                497   
821          850                               5057                  for (my $j=1; $j <= ${$href}{$key}; $j++) {
822          460                               2800                      push(@temp, $key);
823          390                                834                  }
824                                                               }
825           74                                556               push(@arrayrefs, \@temp);
826                                                           }
827                                                       }
828                                                   
829           29                                116       my @bag = ();
830           29                                187       foreach my $aref (@arrayrefs) {
831          154                                323           push @bag, $_ foreach @$aref;
             154                              58785   
832                                                       }
833           29    100                         781       @bag = sort(@bag) unless $unsortflag;
834                                                   
835           29                                126       my (@intersection, @union);
836                                                           # will hold overall intersection/union
837           29                                120       my @nonintersection = ();
838                                                           # will hold all items except those found in each source list
839                                                           # @intersection + @nonintersection = @union
840           29                                 93       my @shared = ();
841                                                           # will hold all items found in at least 2 lists
842           29                                110       my @symmetric_difference = ();
843                                                           # will hold each item found in only one list regardless of list;
844                                                           # equivalent to @union minus all items found in the lists 
845                                                           # underlying %xintersection
846           29                                127       my (%intersection, %union);
847                                                           # will be used to generate @intersection & @union
848           29                                 97       my %seen = ();
849                                                           # will be hash of hashes, holding seen-hashes corresponding to 
850                                                           # the source lists
851           29                                 97       my %xintersection = ();
852                                                           # will be hash of hashes, holding seen-hashes corresponding to 
853                                                           # the lists containing the intersections of each permutation of 
854                                                           # the source lists
855           29                                101       my %shared = ();
856                                                           # will be used to generate @shared
857           29                                 92       my @xunique = ();
858                                                           # will be array of arrays, holding the items that are unique to 
859                                                           # the list whose index number is passed as an argument
860           29                                152       my @xcomplement = ();
861                                                           # will be array of arrays, holding the items that are found in 
862                                                           # any list other than the list whose index number is passed 
863                                                           # as an argument
864           29                                109       my @xdisjoint = ();
865                                                           # will be an array of arrays, holding an indicator as to whether 
866                                                           # any pair of lists are disjoint, i.e., have no intersection
867                                                   
868                                                       # Calculate overall union and take steps needed to calculate overall 
869                                                       # intersection, unique, difference, etc.
870                                                       for (my $i = 0; $i <= $#arrayrefs; $i++) {
871          154                                388           my %seenthis = ();
872          154                                373           foreach (@{$arrayrefs[$i]}) {
             154                                809   
873          955                               6345               $seenthis{$_}++;
874          955                               4437               $union{$_}++;
875                                                           }
876          154                               1112           $seen{$i} = \%seenthis;
877                                                           for (my $j = $i+1; $j <=$#arrayrefs; $j++) {
878          335                                851               my (%seenthat, %seenintersect);
879          335                               4581               my $ilabel = $i . '_' . $j;
880          335                                618               $seenthat{$_}++ foreach (@{$arrayrefs[$j]});
             335                                718   
             335                               4413   
881          335                               2260               foreach (keys %seenthat) {
882         1440    100                       14772                   $seenintersect{$_}++ if (exists $seenthis{$_});
883                                                               }
884          335                              44924               $xintersection{$ilabel} = \%seenintersect;
885          154                                565           }
886           29                                143       }
887           29    100                        1419       @union = $unsortflag ? keys %union : sort(keys %union);
888                                                   
889                                                       # At this point we now have %seen, @union and %xintersection available 
890                                                       # for use in other calculations.
891                                                   
892                                                       # Calculate overall intersection
893                                                       # Inputs:  %xintersection
894           29                                874       my @xkeys = keys %xintersection;
895           29                                236       %intersection = %{$xintersection{$xkeys[0]}};
              29                                450   
896                                                       for (my $m = 1; $m <= $#xkeys; $m++) {
897          306                                697           my %compare = %{$xintersection{$xkeys[$m]}};
             306                               2911   
898          306                               1238           my %result = ();
899          306                               1758           foreach (keys %compare) {
900          899    100                        5475               $result{$_}++ if (exists $intersection{$_});
901                                                           }
902          306                               4031           %intersection = %result;
903           29                                195       }
904           29    100                         365       @intersection = $unsortflag ? keys %intersection : sort(keys %intersection);
905                                                   
906                                                       # Calculate nonintersection
907                                                       # Inputs:  @union    %intersection
908           29                                207       foreach (@union) {
909          317    100                        2667           push(@nonintersection, $_) unless (exists $intersection{$_});
910                                                       }
911                                                   
912                                                       # Calculate @xunique and @xdisjoint
913                                                       # Inputs:  @arrayrefs    %seen    %xintersection
914                                                       for (my $i = 0; $i <= $#arrayrefs; $i++) {
915          154                                381           my %seenthis = %{$seen{$i}};
             154                               1879   
916          154                                774           my (@uniquethis, %deductions, %alldeductions);
917                                                           # Get those elements of %xintersection which we'll need 
918                                                           # to subtract from %seenthis
919          154                               1935           foreach (keys %xintersection) {
920         1810                              10689               my ($left, $right) = split /_/, $_;
921         1810    100    100                23973               if ($left == $i || $right == $i) {
922          670                               5547                   $deductions{$_} = $xintersection{$_};
923                                                               }
924         1810                              16855               $xdisjoint[$left][$right] = $xdisjoint[$right][$left] = 
925         1810    100                        3668                   ! (keys %{$xintersection{$_}}) ? 1 : 0;
926                                                           }
927          154                               1672           foreach my $ded (keys %deductions) {
928          670                               1494               foreach (keys %{$deductions{$ded}}) {
             670                               4536   
929         1914                             122745                   $alldeductions{$_}++;
930                                                               }
931                                                           }
932          154                               1178           foreach (keys %seenthis) {
933          810    100                        4273               push(@uniquethis, $_) unless ($alldeductions{$_});
934                                                           }
935          154                               1740           $xunique[$i] = \@uniquethis;
936          154                               2680           $xdisjoint[$i][$i] = 0; 
937           29                                151       }
938                                                       # @xunique is now available for use in further calculations, 
939                                                       # such as returning the items unique to a particular source list.
940                                                   
941                                                       # Calculate @xcomplement
942                                                       # Inputs:  @arrayrefs    %seen    @union
943                                                       for (my $i = 0; $i <= $#arrayrefs; $i++) {
944          154                                415           my %seenthis = %{$seen{$i}};
             154                               1794   
945          154                                600           my @complementthis = ();
946          154                                542           foreach (@union) {
947         1702    100                       11868               push(@complementthis, $_) unless (exists $seenthis{$_});
948                                                           }
949          154                               5359           $xcomplement[$i] = \@complementthis;
950           29                                118       }
951                                                       # @xcomplement is now available for use in further calculations, 
952                                                       # such as returning the items in all lists different from those in a 
953                                                       # particular source list.
954                                                   
955                                                       # Calculate @shared and @symmetric_difference
956                                                       # Inputs:  %xintersection    @union
957           29                               5980       foreach my $q (keys %xintersection) {
958          335                                668           $shared{$_}++ foreach (keys %{$xintersection{$q}});
             335                               6597   
             335                               4659   
959                                                       }
960           29    100                        1185       @shared = $unsortflag ? keys %shared : sort(keys %shared);
961           29                                575       foreach (@union) {
962          317    100                        7382           push(@symmetric_difference, $_) unless (exists $shared{$_});
963                                                       }
964                                                       # @shared and @symmetric_difference are now available.
965                                                   
966           29                                165       my @xsubset = ();
967           29                               1565       foreach my $i (keys %seen) {
968          154                                435           my %tempi = %{$seen{$i}};
             154                               1563   
969          154                               1193           foreach my $j (keys %seen) {
970          824                               1727               my %tempj = %{$seen{$j}};
             824                              29866   
971          824                               6040               $xsubset[$i][$j] = 1;
972          824                              12692               foreach (keys %tempi) {
973         4320    100                      200309                   $xsubset[$i][$j] = 0 if (! $tempj{$_});
974                                                               }
975                                                           }
976                                                       }
977                                                       # @xsubset is now available
978                                                   
979           29                                194       my @xequivalent = ();
980                                                       for (my $f = 0; $f <= $#xsubset; $f++) {
981                                                           for (my $g = 0; $g <= $#xsubset; $g++) {
982          824                               2990               $xequivalent[$f][$g] = 0;
983          824    100    100                17477               $xequivalent[$f][$g] = 1
984                                                                   if ($xsubset[$f][$g] and $xsubset[$g][$f]);
985          154                                409           }
986           29                                117       }
987                                                   
988           29                                114       my (%data);
989           29                               5084       $data{'seen'}                   = \%seen;
990           29                                269       $data{'maxindex'}               = $maxindex;
991           29                                282       $data{'intersection'}           = \@intersection;
992           29                                175       $data{'nonintersection'}        = \@nonintersection;
993           29                                233       $data{'union'}                  = \@union;
994           29                                449       $data{'shared'}                 = \@shared;
995           29                                211       $data{'symmetric_difference'}   = \@symmetric_difference;
996           29                                183       $data{'xunique'}                = \@xunique;
997           29                                408       $data{'xcomplement'}            = \@xcomplement;
998           29                                204       $data{'xsubset'}                = \@xsubset;
999           29                                216       $data{'xequivalent'}            = \@xequivalent;
1000          29                                183       $data{'xdisjoint'}              = \@xdisjoint;
1001          29                                201       $data{'bag'}                    = \@bag;
1002          29                               2873       return \%data;
1003                                                  }    
1004                                                  
1005                                                  sub get_intersection {
1006  ***      8                  100      0    119       return @{ get_intersection_ref(shift) };
               8                                 73   
1007                                                  }
1008                                                  
1009                                                  sub get_intersection_ref {
1010  ***     16                  100      0     98       my $class = shift;
1011          16                                629       my %data = %$class;
1012          16                                342       return $data{'intersection'};
1013                                                  }
1014                                                  
1015                                                  sub get_union {
1016  ***      8                  100      0     52       return @{ get_union_ref(shift) };
               8                                 79   
1017                                                  }
1018                                                  
1019                                                  sub get_union_ref {
1020  ***     16                  100      0    102       my $class = shift;
1021          16                                617       my %data = %$class;
1022          16                                520       return $data{'union'};
1023                                                  }
1024                                                  
1025                                                  sub get_shared {
1026  ***      8                  100      0     42       return @{ get_shared_ref(shift) };
               8                                 73   
1027                                                  }
1028                                                  
1029                                                  sub get_shared_ref {
1030  ***     16                  100      0    103       my $class = shift;
1031          16                                612       my %data = %$class;
1032          16                                471       return $data{'shared'};
1033                                                  }
1034                                                  
1035                                                  sub get_unique {
1036  ***     44                  100      0    307       my $class = shift;
1037          44                               1681       my %data = %$class;
1038          44    100                         608       my $index = defined $_[0] ? shift : 0;
1039          44                                166       return @{ get_unique_ref($class, $index) };
              44                                255   
1040                                                  }
1041                                                  
1042                                                  sub get_unique_ref {
1043  ***     93                  100      0    472       my $class = shift;
1044          93                               2972       my %data = %$class;
1045          93    100                        8828       my $index = defined $_[0] ? shift : 0;
1046          93                               1051       _index_message1($index, \%data);
1047          92                                386       return ${$data{'xunique'}}[$index];
              92                               4011   
1048                                                  }
1049                                                  
1050                                                  sub get_unique_all {
1051  ***      8                  100      0     83       my $class = shift;
1052           8                                350       my %data = %$class;
1053           8                                141       return $data{'xunique'};
1054                                                  }
1055                                                  
1056                                                  sub get_Lonly {
1057  ***     28                  100      0    208       my ($class, $index) = @_;
1058          28                                588       my $method = (caller(0))[3];
1059          28                               1338       $method =~ s/.*::(\w*)$/$1/;
1060          28                                548       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1061          28                                811       get_unique($class, $index);
1062                                                  }    
1063                                                  
1064                                                  sub get_Lonly_ref {
1065  ***     32                  100      0    231       my ($class, $index) = @_;
1066          32                                719       my $method = (caller(0))[3];
1067          32                               6672       $method =~ s/.*::(\w*)$/$1/;
1068          32                                729       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1069          32                               1104       get_unique_ref($class, $index);
1070                                                  }    
1071                                                  
1072                                                  *get_Aonly = \&get_Lonly;
1073                                                  *get_Aonly_ref = \&get_Lonly_ref;
1074                                                  
1075                                                  sub get_complement {
1076  ***     48                  100      0    308       my $class = shift;
1077          48                               2541       my %data = %$class;
1078          48    100                         655       my $index = defined $_[0] ? shift : 0;
1079          48                                185       return @{ get_complement_ref($class, $index) };
              48                                266   
1080                                                  }
1081                                                  
1082                                                  sub get_complement_ref {
1083  ***     97                  100      0    474       my $class = shift;
1084          97                               3177       my %data = %$class;
1085          97    100                        1122       my $index = defined $_[0] ? shift : 0;
1086          97                               1599       _index_message1($index, \%data);
1087          96                                371       return ${$data{'xcomplement'}}[$index];
              96                               2914   
1088                                                  }
1089                                                  
1090                                                  sub get_complement_all {
1091  ***      8                  100      0     64       my $class = shift;
1092           8                                346       my %data = %$class;
1093           8                                133       return $data{'xcomplement'};
1094                                                  }
1095                                                  
1096                                                  sub get_Ronly {
1097  ***     32                  100      0    239       my ($class, $index) = @_;
1098          32                                904       my $method = (caller(0))[3];
1099          32                               1433       $method =~ s/.*::(\w*)$/$1/;
1100          32                                629       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1101          32                               1090       &get_complement($class, $index);
1102                                                  }    
1103                                                  
1104                                                  sub get_Ronly_ref {
1105  ***     32                  100      0    248       my ($class, $index) = @_;
1106          32                                769       my $method = (caller(0))[3];
1107          32                               1383       $method =~ s/.*::(\w*)$/$1/;
1108          32                              42979       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1109          32                                968       &get_complement_ref($class, $index);
1110                                                  }    
1111                                                  
1112                                                  *get_Bonly = \&get_Ronly;
1113                                                  *get_Bonly_ref = \&get_Ronly_ref;
1114                                                  
1115                                                  sub get_symmetric_difference {
1116  ***     32                  100      0    157       return @{ get_symmetric_difference_ref(shift) };
              32                                331   
1117                                                  }
1118                                                  
1119                                                  sub get_symmetric_difference_ref {
1120  ***     64                  100      0    344       my $class = shift;
1121          64                               2497       my %data = %$class;
1122          64                               1638       return $data{'symmetric_difference'};
1123                                                  }
1124                                                  
1125                                                  *get_symdiff  = \&get_symmetric_difference;
1126                                                  *get_symdiff_ref  = \&get_symmetric_difference_ref;
1127                                                  
1128                                                  sub get_LorRonly {
1129  ***     16                  100      0    659       my $class = shift;
1130          16                                874       my $method = (caller(0))[3];
1131          16                                719       $method =~ s/.*::(\w*)$/$1/;
1132          16                                315       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1133          16                                521       get_symmetric_difference($class);
1134                                                  }    
1135                                                  
1136                                                  sub get_LorRonly_ref {
1137  ***     16                  100      0    118       my $class = shift;
1138          16                                335       my $method = (caller(0))[3];
1139          16                                699       $method =~ s/.*::(\w*)$/$1/;
1140          16                                321       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1141          16                                502       get_symmetric_difference_ref($class);
1142                                                  }    
1143                                                  
1144                                                  *get_AorBonly = \&get_LorRonly;
1145                                                  *get_AorBonly_ref = \&get_LorRonly_ref;
1146                                                  
1147                                                  sub get_nonintersection {
1148  ***      8                  100      0     47       return @{ get_nonintersection_ref(shift) };
               8                                 75   
1149                                                  }
1150                                                  
1151                                                  sub get_nonintersection_ref {
1152  ***     16                  100      0    104       my $class = shift;
1153          16                                867       my %data = %$class;
1154          16                                488       return $data{'nonintersection'};
1155                                                  }
1156                                                  
1157                                                  sub is_LsubsetR {
1158  ***     42                  100      0   1828       my $class = shift;
1159          42                               1952       my %data = %$class;
1160          42                               6226       my ($index_left, $index_right) = _index_message2(\%data, @_);
1161          40                                185       my @subset_array = @{$data{'xsubset'}};
              40                                449   
1162          40                                257       my $subset_status = $subset_array[$index_left][$index_right];
1163          40                                537       return $subset_status;
1164                                                  }
1165                                                  
1166                                                  *is_AsubsetB = \&is_LsubsetR;
1167                                                  
1168                                                  sub is_RsubsetL {
1169  ***     16                  100      0    112       my $class = shift;
1170          16                                789       my %data = %$class;
1171          16                                591       my $method = (caller(0))[3];
1172          16                                742       $method =~ s/.*::(\w*)$/$1/;
1173          16                                375       carp "When comparing 3 or more lists, \&$method or its alias is restricted to \n  asking if the list which is the 2nd argument to the constructor \n    is a subset of the list which is the 1st argument.\n      For greater flexibility, please re-code with \&is_LsubsetR: $!";
1174          16                                518       @_ = (1,0);
1175          16                                200       my ($index_left, $index_right) = _index_message2(\%data, @_);
1176          16                                 80       my @subset_array = @{$data{'xsubset'}};
              16                                160   
1177          16                                106       my $subset_status = $subset_array[$index_left][$index_right];
1178          16                               6848       return $subset_status;
1179                                                  }
1180                                                  
1181                                                  *is_BsubsetA = \&is_RsubsetL;
1182                                                  
1183                                                  sub is_LequivalentR {
1184  ***     26                  100      0    183       my $class = shift;
1185          26                               1173       my %data = %$class;
1186          26                                359       my ($index_left, $index_right) = _index_message2(\%data, @_);
1187          24                                121       my @equivalent_array = @{$data{'xequivalent'}};
              24                                216   
1188          24                                135       my $equivalent_status = $equivalent_array[$index_left][$index_right];
1189          24                                294       return $equivalent_status;
1190                                                  }
1191                                                  
1192                                                  *is_LeqvlntR = \&is_LequivalentR;
1193                                                  
1194                                                  sub is_LdisjointR {
1195  ***     29                  100      0    230       my $class = shift;
1196          29                               1424       my %data = %$class;
1197          29                                465       my ($index_left, $index_right) = _index_message2(\%data, @_);
1198          27                                132       my @disjoint_array = @{$data{'xdisjoint'}};
              27                                258   
1199          27                                165       my $disjoint_status = $disjoint_array[$index_left][$index_right];
1200          27                                337       return $disjoint_status;
1201                                                  }
1202                                                  
1203                                                  sub is_member_which {
1204  ***     88                  100      0    424       return @{ is_member_which_ref(@_) };
              88                                483   
1205                                                  }    
1206                                                  
1207                                                  sub is_member_which_ref {
1208  ***    177                  100      0   6437       my $class = shift;
1209  ***    177    100     66                 3010       croak "Method call requires exactly 1 argument (no references):  $!"
1210                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1211         176                              11651       my %data = %$class;
1212         176                               1326       my %seen = %{$data{'seen'}};
             176                               3137   
1213         176                                992       my ($arg, @found);
1214         176                                816       $arg = shift;
1215         176                               4585       foreach (sort keys %seen) {
1216         880    100                       13473           push @found, $_ if (exists $seen{$_}{$arg});
1217                                                      }
1218         176                               4083       return \@found;
1219                                                  }    
1220                                                  
1221                                                  sub are_members_which {
1222  ***      9                  100      0   2279       my $class = shift;
1223  ***      9    100     66                 6751       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
1224                                                          unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
1225           8                                377       my %data = %$class;
1226           8                                 89       my %seen = %{$data{'seen'}};
               8                                154   
1227           8                              90938       my (@args, %found);
1228           8                                 73       @args = @{$_[0]};
               8                                257   
1229                                                      for (my $i=0; $i<=$#args; $i++) {
1230          88                                193           my (@not_found);
1231          88                               1095           foreach (sort keys %seen) {
1232         440                               8173               exists ${$seen{$_}}{$args[$i]}
             216                               1619   
1233         440    100                         860                   ? push @{$found{$args[$i]}}, $_
1234                                                                  : push @not_found, $_;
1235                                                          }
1236          88    100                        1389           $found{$args[$i]} = [] if (@not_found == keys %seen);
1237           8                                101       }
1238           8                                259       return \%found;
1239                                                  }    
1240                                                  
1241                                                  sub is_member_any {
1242  ***     89                  100      0    566       my $class = shift;
1243  ***     89    100     66                 1645       croak "Method call requires exactly 1 argument (no references):  $!"
1244                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1245          88                               3377       my %data = %$class;
1246          88                                676       my %seen = %{$data{'seen'}};
              88                               1321   
1247          88                                447       my ($arg, $k);
1248          88                                394       $arg = shift;
1249          88                                752       while ( $k = each %seen ) {
1250         176    100                        2643           return 1 if (defined $seen{$k}{$arg});
1251                                                      }
1252           8                                133       return 0;
1253                                                  }    
1254                                                  
1255                                                  sub are_members_any {
1256  ***      9                  100      0     69       my $class = shift;
1257  ***      9    100     66                  313       croak "Method call requires exactly 1 argument which must be an anonymous array\n    holding the items to be tested:  $!"
1258                                                          unless (@_ == 1 and ref($_[0]) eq 'ARRAY');
1259           8                                351       my %data = %$class;
1260           8                                 70       my %seen = %{$data{'seen'}};
               8                                131   
1261           8                                 56       my (@args, %present);
1262           8                                 30       @args = @{$_[0]};
               8                                686   
1263                                                      for (my $i=0; $i<=$#args; $i++) {
1264          88                                541           foreach (keys %seen) {
1265         440    100                        1857               unless (defined $present{$args[$i]}) {
1266         176    100                        2005                   $present{$args[$i]} = 1 if $seen{$_}{$args[$i]};
1267                                                              }
1268                                                          }
1269          88    100                        1125           $present{$args[$i]} = 0 if (! defined $present{$args[$i]});
1270           8                                 99       }
1271           8                                208       return \%present;
1272                                                  }    
1273                                                  
1274                                                  sub print_subset_chart {
1275  ***      8                  100      0     78       my $class = shift;
1276           8                                428       my %data = %$class;
1277           8                                 86       my @subset_array = @{$data{'xsubset'}};
               8                                115   
1278           8                                 59       my $title = 'subset';
1279           8                                104       _chart_engine_multiple(\@subset_array, $title);
1280                                                  }
1281                                                  
1282                                                  sub print_equivalence_chart {
1283  ***      8                  100      0     70       my $class = shift;
1284           8                                370       my %data = %$class;
1285           8                                 75       my @equivalent_array = @{$data{'xequivalent'}};
               8                                157   
1286           8                                 44       my $title = 'Equivalence';
1287           8                                 84       _chart_engine_multiple(\@equivalent_array, $title);
1288                                                  }
1289                                                  
1290                                                  sub get_bag {
1291  ***      8                  100      0     42       return @{ get_bag_ref(shift) };
               8                                 72   
1292                                                  }
1293                                                  
1294                                                  sub get_bag_ref {
1295  ***     16                  100      0    105       my $class = shift;
1296          16                                711       my %data = %$class;
1297          16                               1153       return $data{'bag'};
1298                                                  }
1299                                                  
1300                                                  sub get_version {
1301  ***      8                  100      0     75       return $List::Compare::VERSION;
1302                                                  }
1303                                                  
1304                                                  1;
1305                                                  
1306                                                  ################################################################################
1307                                                  
1308                                                  package List::Compare::Multiple::Accelerated;
1309          26                  100           896   use Carp;
              26                                849   
              26                                730   
1310          26                  100           464   use List::Compare::Base::_Auxiliary qw(
1311                                                      _argument_checker_0
1312                                                      _prepare_listrefs
1313                                                      _subset_subengine
1314                                                      _chart_engine_multiple
1315                                                      _equivalent_subengine
1316                                                      _index_message3
1317                                                      _index_message4
1318                                                      _prepare_listrefs 
1319                                                      _subset_engine_multaccel 
1320          26                                120   );
              26                               1672   
1321          26                  100           473   use List::Compare::Base::_Auxiliary qw(:calculate);
              26                                101   
              26                                296   
1322          26                  100         17841   use List::Compare::Base::_Engine    qw(
1323                                                      _unique_all_engine
1324                                                      _complement_all_engine
1325          26                                263   );
              26                                843   
1326                                                  
1327                                                  sub _init {
1328          28                  100           155       my $self = shift;
1329          28                                121       my $unsortflag = shift;
1330          28                               5108       my @listrefs = _argument_checker_0(@_);
1331          22                                110       my %data = ();
1332                                                      for (my $i=0; $i<=$#listrefs; $i++) {
1333         109                               1311           $data{$i} = $listrefs[$i]; 
1334          22                                149       }
1335          22    100                         212       $data{'unsort'} = $unsortflag ? 1 : 0;
1336          22                                272       return \%data;
1337                                                  }    
1338                                                  
1339                                                  sub get_union {
1340  ***      8                  100      0     59       return @{ get_union_ref(shift) };
               8                                 80   
1341                                                  }
1342                                                  
1343                                                  sub get_union_ref {
1344  ***     16                  100      0    114       my $class = shift;
1345          16                                497       my %data = %$class;
1346          16                                129       my $unsortflag = $data{'unsort'};
1347          16                                198       my $aref = _prepare_listrefs(\%data);
1348                                                  
1349          16                                148       my $unionref = _calculate_union_only($aref);
1350          16    100                         111       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
               8                                179   
               8                               1721   
1351          16                                634       return \@union;
1352                                                  }
1353                                                  
1354                                                  sub get_intersection {
1355  ***      8                  100      0     59       return @{ get_intersection_ref(shift) };
               8                                 82   
1356                                                  }
1357                                                  
1358                                                  sub get_intersection_ref {
1359  ***     16                  100      0    141       my $class = shift;
1360          16                                631       my %data = %$class;
1361          16                                152       my $unsortflag = $data{'unsort'};
1362          16                                215       my $aref = _prepare_listrefs(\%data);
1363                                                  
1364                                                      # Calculate overall intersection
1365                                                      # Inputs:  %xintersection
1366          16                                164       my $xintersectionref = _calculate_xintersection_only($aref);
1367          16                                153       my $intersectionref = _calculate_hash_intersection($xintersectionref);
1368           8                                 85       my @intersection = 
1369          16    100                         664           $unsortflag ? keys %{$intersectionref} : sort(keys %{$intersectionref});
               8                                195   
1370          16                                846       return \@intersection;
1371                                                  }
1372                                                  
1373                                                  sub get_nonintersection {
1374  ***      8                  100      0     57       return @{ get_nonintersection_ref(shift) };
               8                                 86   
1375                                                  }
1376                                                  
1377                                                  sub get_nonintersection_ref {
1378  ***     16                  100      0    120       my $class = shift;
1379          16                                572       my %data = %$class;
1380          16                                139       my $unsortflag = $data{'unsort'};
1381          16                                193       my $aref = _prepare_listrefs(\%data);
1382                                                  
1383          16                                171       my ($unionref, $xintersectionref) = 
1384                                                          _calculate_union_xintersection_only($aref);
1385          16    100                         144       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
               8                                237   
               8                                327   
1386          16                                211       my $intersectionref = _calculate_hash_intersection($xintersectionref);
1387                                                  
1388                                                      # Calculate nonintersection
1389                                                      # Inputs:  @union    %intersection
1390          16                                 84       my (@nonintersection);
1391          16                                102       foreach (@union) {
1392         160    100                         340           push(@nonintersection, $_) unless exists ${$intersectionref}{$_};
             160                               1558   
1393                                                      }
1394          16                               1227       return \@nonintersection;
1395                                                  }
1396                                                  
1397                                                  sub get_shared {
1398  ***      8                  100      0     50       return @{ get_shared_ref(shift) };
               8                                 79   
1399                                                  }
1400                                                  
1401                                                  sub get_shared_ref {
1402  ***     16                  100      0    129       my $class = shift;
1403          16                                488       my %data = %$class;
1404          16                                128       my $unsortflag = $data{'unsort'};
1405          16                                197       my $aref = _prepare_listrefs(\%data);
1406                                                  
1407                                                      # Calculate @shared
1408                                                      # Inputs:  %xintersection
1409          16                                149       my $xintersectionref = _calculate_xintersection_only($aref);
1410          16                                151       my $sharedref = _calculate_hash_shared($xintersectionref);
1411          16    100                         130       my @shared = $unsortflag ? keys %{$sharedref} : sort(keys %{$sharedref});
               8                                166   
               8                               1406   
1412          16                               1017       return \@shared;
1413                                                  }
1414                                                  
1415                                                  sub get_symmetric_difference {
1416  ***     32                  100      0    180       return @{ get_symmetric_difference_ref(shift) };
              32                                334   
1417                                                  }
1418                                                  
1419                                                  sub get_symmetric_difference_ref {
1420  ***     64                  100      0    541       my $class = shift;
1421          64                               1840       my %data = %$class;
1422          64                                489       my $unsortflag = $data{'unsort'};
1423          64                                742       my $aref = _prepare_listrefs(\%data);
1424                                                  
1425          64                                627       my ($unionref, $xintersectionref) = 
1426                                                          _calculate_union_xintersection_only($aref);
1427          64    100                         440       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
              32                               6435   
              32                               1615   
1428                                                  
1429          64                                811       my $sharedref = _calculate_hash_shared($xintersectionref);
1430          64                                279       my (@symmetric_difference);
1431          64                                339       foreach (@union) {
1432         640    100                        1310           push(@symmetric_difference, $_) unless exists ${$sharedref}{$_};
             640                               3780   
1433                                                      }
1434          64                               4384       return \@symmetric_difference;
1435                                                  }
1436                                                  
1437                                                  *get_symdiff = \&get_symmetric_difference;
1438                                                  *get_symdiff_ref = \&get_symmetric_difference_ref;
1439                                                  
1440                                                  sub get_LorRonly {
1441  ***     16                  100      0    175       my $class = shift;
1442          16                                578       my $method = (caller(0))[3];
1443          16                                872       $method =~ s/.*::(\w*)$/$1/;
1444          16                                353       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1445          16                               1145       get_symmetric_difference($class);
1446                                                  }    
1447                                                  
1448                                                  sub get_LorRonly_ref {
1449  ***     16                  100      0    188       my $class = shift;
1450          16                                537       my $method = (caller(0))[3];
1451          16                                875       $method =~ s/.*::(\w*)$/$1/;
1452          16                                424       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_symmetric_difference_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1453          16                                616       get_symmetric_difference_ref($class);
1454                                                  }    
1455                                                  
1456                                                  *get_AorBonly = \&get_LorRonly;
1457                                                  *get_AorBonly_ref = \&get_LorRonly_ref;
1458                                                  
1459                                                  sub get_unique {
1460  ***     44                  100      0    368       my $class = shift;
1461          44                               5780       my %data = %$class;
1462          44    100                         540       my $index = defined $_[0] ? shift : 0;
1463          44                                189       return @{ get_unique_ref($class, $index) };
              44                                884   
1464                                                  }
1465                                                  
1466                                                  sub get_unique_ref {
1467  ***     93                  100      0    567       my $class = shift;
1468          93                               2051       my %data = %$class;
1469          93    100                        1018       my $index = defined $_[0] ? shift : 0;
1470          93                               1064       my $aref = _prepare_listrefs(\%data);
1471          93                                458       _index_message3($index, $#{$aref});
              93                               1269   
1472                                                  
1473          92                               1054       my $unique_all_ref = _unique_all_engine($aref);
1474          92                                398       return ${$unique_all_ref}[$index];
              92                               3872   
1475                                                  }
1476                                                  
1477                                                  sub get_unique_all {
1478  ***      8                  100      0     74       my $class = shift;
1479           8                                231       my %data = %$class;
1480           8                               1205       my $aref = _prepare_listrefs(\%data);
1481           8                                104       return _unique_all_engine($aref);
1482                                                  }
1483                                                  
1484                                                  sub get_Lonly {
1485  ***     28                  100      0    255       my ($class, $index) = @_;
1486          28                                920       my $method = (caller(0))[3];
1487          28                               2870       $method =~ s/.*::(\w*)$/$1/;
1488          28                                684       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1489          28                                818       get_unique($class, $index);
1490                                                  }    
1491                                                  
1492                                                  sub get_Lonly_ref {
1493  ***     32                  100      0    262       my ($class, $index) = @_;
1494          32                                987       my $method = (caller(0))[3];
1495          32                               1769       $method =~ s/.*::(\w*)$/$1/;
1496          32                                698       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_unique_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1497          32                               1099       get_unique_ref($class, $index);
1498                                                  }    
1499                                                  
1500                                                  *get_Aonly = \&get_Lonly;
1501                                                  *get_Aonly_ref = \&get_Lonly_ref;
1502                                                  
1503                                                  sub get_complement {
1504  ***     48                  100      0    393       my $class = shift;
1505          48                               1359       my %data = %$class;
1506          48    100                         581       my $index = defined $_[0] ? shift : 0;
1507          48                                201       return @{ get_complement_ref($class, $index) };
              48                                296   
1508                                                  }
1509                                                  
1510                                                  sub get_complement_ref {
1511  ***     97                  100      0    572       my $class = shift;
1512          97                               8556       my %data = %$class;
1513          97    100                        1023       my $index = defined $_[0] ? shift : 0;
1514          97                                484       my $unsortflag = $data{'unsort'};
1515          97                               1092       my $aref = _prepare_listrefs(\%data);
1516          97                               7450       _index_message3($index, $#{$aref});
              97                               1378   
1517                                                  
1518          96                               1749       my $complement_all_ref = _complement_all_engine($aref, $unsortflag );
1519          96                                383       return ${$complement_all_ref}[$index];
              96                               4149   
1520                                                  }
1521                                                  
1522                                                  sub get_complement_all {
1523  ***      8                  100      0     72       my $class = shift;
1524           8                                257       my %data = %$class;
1525           8                                117       my $aref = _prepare_listrefs(\%data);
1526           8                                102       return _complement_all_engine($aref);
1527                                                  }
1528                                                  
1529                                                  sub get_Ronly {
1530  ***     32                  100      0    276       my ($class, $index) = @_;
1531          32                                846       my $method = (caller(0))[3];
1532          32                               6896       $method =~ s/.*::(\w*)$/$1/;
1533          32                                776       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1534          32                                982       &get_complement($class, $index);
1535                                                  }    
1536                                                  
1537                                                  sub get_Ronly_ref {
1538  ***     32                  100      0    267       my ($class, $index) = @_;
1539          32                               1028       my $method = (caller(0))[3];
1540          32                               1842       $method =~ s/.*::(\w*)$/$1/;
1541          32                                700       carp "When comparing 3 or more lists, \&$method or its alias defaults to \n  ", 'get_complement_ref()', ".  Though the results returned are valid, \n    please consider re-coding with that method: $!";
1542          32                               7466       &get_complement_ref($class, $index);
1543                                                  }    
1544                                                  
1545                                                  *get_Bonly = \&get_Ronly;
1546                                                  *get_Bonly_ref = \&get_Ronly_ref;
1547                                                  
1548                                                  sub is_LsubsetR {
1549  ***     42                  100      0    348       my $class = shift;
1550          42                               1355       my %data = %$class;
1551          42                                614       my $subset_status = _subset_engine_multaccel(\%data, @_);
1552          40                                777       return $subset_status;
1553                                                  }
1554                                                  
1555                                                  *is_AsubsetB = \&is_LsubsetR;
1556                                                  
1557                                                  sub is_RsubsetL {
1558  ***     16                  100      0   1565       my $class = shift;
1559          16                               3308       my %data = %$class;
1560                                                  
1561          16                               5191       my $method = (caller(0))[3];
1562          16                                892       $method =~ s/.*::(\w*)$/$1/;
1563          16                               6172       carp "When comparing 3 or more lists, \&$method or its alias is restricted to \n  asking if the list which is the 2nd argument to the constructor \n    is a subset of the list which is the 1st argument.\n      For greater flexibility, please re-code with \&is_LsubsetR: $!";
1564          16                                667       @_ = (1,0);
1565                                                  
1566          16                                208       my $subset_status = _subset_engine_multaccel(\%data, @_);
1567          16                                479       return $subset_status;
1568                                                  }
1569                                                  
1570                                                  *is_BsubsetA = \&is_RsubsetL;
1571                                                  
1572                                                  sub is_LequivalentR {
1573  ***     26                  100      0    249       my $class = shift;
1574          26                                878       my %data = %$class;
1575          26                                372       my $aref = _prepare_listrefs(\%data);
1576          26                                119       my ($index_left, $index_right) = _index_message4($#{$aref}, @_);
              26                                360   
1577                                                  
1578          24                                243       my $xequivalentref = _equivalent_subengine($aref);
1579          24                                103       return ${$xequivalentref}[$index_left][$index_right];
              24                                434   
1580                                                  }
1581                                                  
1582                                                  *is_LeqvlntR = \&is_LequivalentR;
1583                                                  
1584                                                  sub is_LdisjointR {
1585  ***      3                  100      0     30       my $class = shift;
1586           3                                 99       my %data = %$class;
1587           3                                 45       my $aref = _prepare_listrefs(\%data);
1588           3                                 12       my ($index_left, $index_right) = _index_message4($#{$aref}, @_);
               3                                 43   
1589                                                  
1590           3                                 16       my (@xdisjoint);
1591           3                                 23       my $xintersectionref = _calculate_xintersection_only($aref);
1592          21                                159       for (my $i = 0; $i <= $#{$aref}; $i++) {
1593          18                                 40           foreach (keys %{$xintersectionref}) {
              18                                195   
1594         270                               1259               my ($left, $right) = split /_/, $_;
1595         270                               2223               $xdisjoint[$left][$right] = $xdisjoint[$right][$left] = 
1596         270    100                         864                   ! scalar(keys %{${$xintersectionref}{$_}}) ? 1 : 0;
             270                                505   
1597                                                          }
1598          18                                165           $xdisjoint[$i][$i] = 0; 
1599           3                                 16       }
1600           3                                 16       my $disjoint_status = $xdisjoint[$index_left][$index_right];
1601           3                                172       return $disjoint_status;
1602                                                  }
1603                                                  
1604                                                  sub is_member_which {
1605  ***     88                  100      0    551       return @{ is_member_which_ref(@_) };
              88                                685   
1606                                                  }    
1607                                                  
1608                                                  sub is_member_which_ref {
1609  ***    177                  100      0   1386       my $class = shift;
1610  ***    177    100     66                 9677       croak "Method call requires exactly 1 argument (no references):  $!"
1611                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1612         176                                673       my %data = %{$class};
             176                              11541   
1613         176                               3445       my $aref = _prepare_listrefs(\%data);
1614         176                               1537       my $seenref = _calculate_seen_only($aref);
1615         176                                899       my ($arg, @found);
1616         176                               6124       $arg = shift;
1617         176                                621       foreach (sort keys %{$seenref}) {
             176                               3281   
1618         880    100                        1887           push @found, $_ if (exists ${$seenref}{$_}{$arg});
             880                               7972   
1619                                                      }
1620         176                               6689       return \@found;
1621                                                  }    
1622                                                  
1623                                                  sub are_members_which {
1624  ***      9                  100      0     80       my $class = shift;
1625           9    100                         130       croak "Method call needs at least one argument:  $!" unless (@_);
1626           8                                 45       my %data = %{$class};
               8                                785   
1627           8                                119       my $aref = _prepare_listrefs(\%data);
1628           8                                 73       my $seenref = _calculate_seen_only($aref);
1629           8                                 47       my (@args, %found);
1630           8                                195       @args = (@_ == 1 and ref($_[0]) eq 'ARRAY') 
1631  ***      8     50     33                  246           ?  @{$_[0]}
1632                                                          :  @_;
1633                                                      for (my $i=0; $i<=$#args; $i++) {
1634          88                                187           my (@not_found);
1635          88                                257           foreach (sort keys %{$seenref}) {
              88                                993   
1636         440                                843               exists ${${$seenref}{$_}}{$args[$i]}
             440                              15405   
             216                               7403   
1637         440    100                         909                   ? push @{$found{$args[$i]}}, $_
1638                                                                  : push @not_found, $_;
1639                                                          }
1640          88    100                         552           $found{$args[$i]} = [] if (@not_found == keys %{$seenref});
              88                               1248   
1641           8                                 90       }
1642           8                                402       return \%found;
1643                                                  }    
1644                                                  
1645                                                  sub is_member_any {
1646  ***     89                  100      0    787       my $class = shift;
1647  ***     89    100     66                 2190       croak "Method call requires exactly 1 argument (no references):  $!"
1648                                                          unless (@_ == 1 and ref($_[0]) ne 'ARRAY');
1649          88                               2336       my %data = %$class;
1650          88                               1111       my $aref = _prepare_listrefs(\%data);
1651          88                                782       my $seenref = _calculate_seen_only($aref);
1652          88                                999       my ($arg, $k);
1653          88                                449       $arg = shift;
1654          88                                315       while ( $k = each %{$seenref} ) {
             216                               2086   
1655         208    100                         637           return 1 if (defined ${$seenref}{$k}{$arg});
             208                               2525   
1656                                                      }
1657           8                                275       return 0;
1658                                                  }    
1659                                                  
1660                                                  sub are_members_any {
1661  ***      9                  100      0     77       my $class = shift;
1662           9    100                         121       croak "Method call needs at least one argument:  $!" unless (@_);
1663           8                                263       my %data = %$class;
1664           8                                114       my $aref = _prepare_listrefs(\%data);
1665           8                                 75       my $seenref = _calculate_seen_only($aref);
1666           8                                 48       my (@args, %present);
1667           8                                258       @args = (@_ == 1 and ref($_[0]) eq 'ARRAY') 
1668  ***      8     50     33                  248           ?  @{$_[0]}
1669                                                          :  @_;
1670                                                      for (my $i=0; $i<=$#args; $i++) {
1671          88                                201           foreach (keys %{$seenref}) {
              88                                603   
1672         440    100                        1863               unless (defined $present{$args[$i]}) {
1673         208    100                        5589                   $present{$args[$i]} = 1 if ${$seenref}{$_}{$args[$i]};
             208                               2301   
1674                                                              }
1675                                                          }
1676          88    100                        1381           $present{$args[$i]} = 0 if (! defined $present{$args[$i]});
1677           8                                 92       }
1678           8                                322       return \%present;
1679                                                  }    
1680                                                  
1681                                                  sub print_subset_chart {
1682  ***      8                  100      0     81       my $class = shift;
1683           8                                275       my %data = %$class;
1684           8                                123       my $aref = _prepare_listrefs(\%data);
1685           8                                 72       my $xsubsetref = _subset_subengine($aref);
1686           8                                 45       my $title = 'subset';
1687           8                                 86       _chart_engine_multiple($xsubsetref, $title);
1688                                                  }
1689                                                  
1690                                                  sub print_equivalence_chart {
1691  ***      8                  100      0     80       my $class = shift;
1692           8                                561       my %data = %$class;
1693           8                                129       my $aref = _prepare_listrefs(\%data);
1694           8                                 77       my $xequivalentref = _equivalent_subengine($aref);
1695           8                                 58       my $title = 'Equivalence';
1696           8                                 92       _chart_engine_multiple($xequivalentref, $title);
1697                                                  }
1698                                                  
1699                                                  sub get_bag {
1700  ***      8                  100      0     49       return @{ get_bag_ref(shift) };
               8                                 84   
1701                                                  }
1702                                                  
1703                                                  sub get_bag_ref {
1704  ***     16                  100      0    131       my $class = shift;
1705          16                               5704       my %data = %$class;
1706          16                                143       my $unsortflag = $data{'unsort'};
1707          16                                211       my $aref = _prepare_listrefs(\%data);
1708          16                                 74       my (@bag);
1709          16                                147       my @listrefs = @{$aref};
              16                                144   
1710          16    100                         225       if (ref($listrefs[0]) eq 'ARRAY') { 
1711           8                                 41           foreach my $lref (@listrefs) {
1712          40                                 96               foreach my $el (@{$lref}) {
              40                                749   
1713         256                               1180                   push(@bag, $el);
1714                                                              }
1715                                                          }
1716                                                      } else {
1717           8                                 47           foreach my $lref (@listrefs) {
1718          40                                 95               foreach my $key (keys %{$lref}) {
              40                                414   
1719         472                               8307                   for (my $j=1; $j <= ${$lref}{$key}; $j++) {
1720         256                               1249                       push(@bag, $key);
1721         216                                534                   }
1722                                                              }
1723                                                          }
1724                                                      }
1725          16    100                         361       @bag = sort(@bag) unless $unsortflag;
1726          16                               1247       return \@bag;
1727                                                  }
1728                                                  
1729                                                  sub get_version {
1730  ***      8                  100      0     81       return $List::Compare::VERSION;
1731                                                  }
1732                                                  
1733                                                  1;
1734                                                  
1735                                                  
1736                                                  __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
15           100    111    119   if (@_ == 1 and ref $_[0] eq 'HASH') { }
19           100      1    110   unless ${$argref;}{'lists'} and ref ${$argref;}{'lists'} eq 'ARRAY'
21           100     54     56   ${$argref;}{'unsorted'} ? :
22           100     64     46   ${$argref;}{'accelerated'} ? :
25           100     54     65   $args[0] eq '-u' || $args[0] eq '--unsorted' ? :
27           100     65     54   if $args[0] eq '-a' or $args[0] eq '--accelerated'
32           100    226      3   if (ref $args[0] eq 'ARRAY' or ref $args[0] eq 'HASH') { }
34           100     14    391   unless (ref $nextarg eq ref $args[0])
42           100     17    212   unless $argument_error_status
46           100     63    149   if (@args > 2) { }
             100    148      1   elsif (@args == 2) { }
47           100     28     35   if ($accelerated) { }
55           100     89     59   if ($accelerated) { }
67           100    108    103   $unsorted ? :
79           100     35     24   if (ref $refL eq 'HASH') { }
99           100     32     21   $unsortflag ? :
106          100    202     78   exists $seenR{$_} ? :
111          100     55    202   unless exists $intersection{$_}
116          100     11     42   if keys %LorRonly == 0
119          100     42    140   if (not exists $seenR{$_})
125          100     31    223   if (not exists $seenL{$_})
133          100     32     21   $unsortflag ? :
135          100     32     21   $unsortflag ? :
137          100     32     21   $unsortflag ? :
139          100     32     21   $unsortflag ? :
141          100     32     21   $unsortflag ? :
146          100     12     41   keys %intersection == 0 ? :
311          100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
316          100    112     64   if (exists ${$data{'seenL'};}{$arg})
317          100    112     64   if (exists ${$data{'seenR'};}{$arg})
318          100     48    128   if (not exists ${$data{'seenL'};}{$arg} and not exists ${$data{'seenR'};}{$arg})
326          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
332          100     56     32   if (exists ${$data{'seenL'};}{$args[$i]})
333          100     56     32   if (exists ${$data{'seenR'};}{$args[$i]})
334          100     24     64   if (not exists ${$data{'seenL'};}{$args[$i]} and not exists ${$data{'seenR'};}{$args[$i]})
343          100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
347          100     64     24   defined $data{'seenL'}{$arg} || defined $data{'seenR'}{$arg} ? :
353          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
359          100     64     24   defined $data{'seenL'}{$args[$i]} || defined $data{'seenR'}{$args[$i]} ? :
398          100     49     34   $unsortflag ? :
411          100      8     16   $data{'unsort'} ? :
423          100     12     20   $data{'unsort'} ? :
447          100     26     38   $data{'unsort'} ? :
469          100     26     38   $data{'unsort'} ? :
491          100     30     50   $data{'unsort'} ? :
561          100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
569          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
579          100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
587          100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
602          100      8      8   if (ref $data{'L'} eq 'ARRAY') { }
604          100      4      4   $data{'unsort'} ? :
617          100      2      6   $data{'unsort'} ? :
631          100     96     48   if exists ${$hrefR;}{$_}
649          100     64    384   unless exists ${$hrefR;}{$_}
659          100     64    384   unless exists ${$hrefL;}{$_}
669          100     80    480   unless exists ${$hrefR;}{$_}
672          100     80    480   unless exists ${$hrefL;}{$_}
682          100     32    112   if (not exists ${$hrefR;}{$_})
695          100     16    112   if (not exists ${$hrefL;}{$_})
714          100    112     32   if exists ${$hrefR;}{$_}
716          100      4     24   keys %intersection == 0 ? :
724          100      8     32   if (not exists ${$hrefR;}{$_})
730          100      8     24   if (not exists ${$hrefL;}{$_})
753          100    112     64   if (exists ${$hrefL;}{$arg})
754          100    112     64   if (exists ${$hrefR;}{$arg})
755          100     48    128   if (not exists ${$hrefL;}{$arg} and not exists ${$hrefR;}{$arg})
767          100     56     32   if (exists ${$hrefL;}{$args[$i]})
768          100     56     32   if (exists ${$hrefR;}{$args[$i]})
769          100     24     64   if (not exists ${$hrefL;}{$args[$i]} and not exists ${$hrefR;}{$args[$i]})
780          100     64     24   defined ${$hrefL;}{$arg} || defined ${$hrefR;}{$arg} ? :
790          100     64     24   defined ${$hrefL;}{$args[$i]} || defined ${$hrefR;}{$args[$i]} ? :
814          100     15     20   if (ref $listrefs[0] eq 'ARRAY') { }
833          100     15     14   unless $unsortflag
882          100    957    483   if exists $seenthis{$_}
887          100     14     15   $unsortflag ? :
900          100    378    521   if exists $intersection{$_}
904          100     14     15   $unsortflag ? :
909          100    277     40   unless exists $intersection{$_}
921          100    670   1140   if ($left == $i or $right == $i)
925          100    270   1540   !keys(%{$xintersection{$_};}) ? :
933          100     85    725   unless $alldeductions{$_}
947          100    892    810   unless exists $seenthis{$_}
960          100     14     15   $unsortflag ? :
962          100     85    232   unless exists $shared{$_}
973          100   1596   2724   if not $tempj{$_}
983          100    212    612   if $xsubset[$f][$g] and $xsubset[$g][$f]
1038         100     20     24   defined $_[0] ? :
1045         100     69     24   defined $_[0] ? :
1078         100     24     24   defined $_[0] ? :
1085         100     73     24   defined $_[0] ? :
1209         100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1216         100    432    448   if exists $seen{$_}{$arg}
1223         100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
1233         100    216    224   exists ${$seen{$_};}{$args[$i]} ? :
1236         100      8     80   if @not_found == keys %seen
1243         100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1250         100     80     96   if defined $seen{$k}{$arg}
1257         100      1      8   unless @_ == 1 and ref $_[0] eq 'ARRAY'
1265         100    176    264   unless (defined $present{$args[$i]})
1266         100     80     96   if $seen{$_}{$args[$i]}
1269         100      8     80   if not defined $present{$args[$i]}
1335         100     13      9   $unsortflag ? :
1350         100      8      8   $unsortflag ? :
1369         100      8      8   $unsortflag ? :
1385         100      8      8   $unsortflag ? :
1392         100    128     32   unless exists ${$intersectionref;}{$_}
1411         100      8      8   $unsortflag ? :
1427         100     32     32   $unsortflag ? :
1432         100    128    512   unless exists ${$sharedref;}{$_}
1462         100     20     24   defined $_[0] ? :
1469         100     69     24   defined $_[0] ? :
1506         100     24     24   defined $_[0] ? :
1513         100     73     24   defined $_[0] ? :
1596         100     90    180   !scalar(keys %{${$xintersectionref;}{$_};}) ? :
1610         100      1    176   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1618         100    432    448   if exists ${$seenref;}{$_}{$arg}
1625         100      1      8   unless @_
1631  ***     50      8      0   @_ == 1 && ref $_[0] eq 'ARRAY' ? :
1637         100    216    224   exists ${${$seenref;}{$_};}{$args[$i]} ? :
1640         100      8     80   if @not_found == keys %{$seenref;}
1647         100      1     88   unless @_ == 1 and ref $_[0] ne 'ARRAY'
1655         100     80    128   if defined ${$seenref;}{$k}{$arg}
1662         100      1      8   unless @_
1668  ***     50      8      0   @_ == 1 && ref $_[0] eq 'ARRAY' ? :
1672         100    208    232   unless (defined $present{$args[$i]})
1673         100     80    128   if ${$seenref;}{$_}{$args[$i]}
1676         100      8     80   if not defined $present{$args[$i]}
1710         100      8      8   if (ref $listrefs[0] eq 'ARRAY') { }
1725         100      8      8   unless $unsortflag


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
15           100    118      1    111   @_ == 1 and ref $_[0] eq 'HASH'
18    ***     66      0      1    110   ${$argref;}{'lists'} and ref ${$argref;}{'lists'} eq 'ARRAY'
311   ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
318          100    112     16     48   not exists ${$data{'seenL'};}{$arg} and not exists ${$data{'seenR'};}{$arg}
326   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
334          100     56      8     24   not exists ${$data{'seenL'};}{$args[$i]} and not exists ${$data{'seenR'};}{$args[$i]}
343   ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
353   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
561   ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
569   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
579   ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
587   ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
755          100    112     16     48   not exists ${$hrefL;}{$arg} and not exists ${$hrefR;}{$arg}
769          100     56      8     24   not exists ${$hrefL;}{$args[$i]} and not exists ${$hrefR;}{$args[$i]}
983          100    554     58    212   $xsubset[$f][$g] and $xsubset[$g][$f]
1209  ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
1223  ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
1243  ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
1257  ***     66      0      1      8   @_ == 1 and ref $_[0] eq 'ARRAY'
1610  ***     66      1      0    176   @_ == 1 and ref $_[0] ne 'ARRAY'
1631  ***     33      0      0      8   @_ == 1 && ref $_[0] eq 'ARRAY'
1647  ***     66      1      0     88   @_ == 1 and ref $_[0] ne 'ARRAY'
1668  ***     33      0      0      8   @_ == 1 && ref $_[0] eq 'ARRAY'

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
25           100     32     22     65   $args[0] eq '-u' || $args[0] eq '--unsorted'
27           100     45     20     54   $args[0] eq '-a' or $args[0] eq '--accelerated'
32           100    101    125      3   ref $args[0] eq 'ARRAY' or ref $args[0] eq 'HASH'
49    ***     33      0     28      0   ref $class || $class
52    ***     33      0     35      0   ref $class || $class
57    ***     33      0     89      0   ref $class || $class
59    ***     33      0     59      0   ref $class || $class
347          100     56      8     24   defined $data{'seenL'}{$arg} || defined $data{'seenR'}{$arg}
359          100     56      8     24   defined $data{'seenL'}{$args[$i]} || defined $data{'seenR'}{$args[$i]}
780          100     56      8     24   defined ${$hrefL;}{$arg} || defined ${$hrefR;}{$arg}
790          100     56      8     24   defined ${$hrefL;}{$args[$i]} || defined ${$hrefR;}{$args[$i]}
921          100    335    335   1140   $left == $i or $right == $i


Covered Subroutines
-------------------

Subroutine                      Location                     
------------------------------- -----------------------------
BEGIN                           blib/lib/List/Compare.pm:1309
BEGIN                           blib/lib/List/Compare.pm:1310
BEGIN                           blib/lib/List/Compare.pm:1321
BEGIN                           blib/lib/List/Compare.pm:1322
BEGIN                           blib/lib/List/Compare.pm:3   
BEGIN                           blib/lib/List/Compare.pm:384 
BEGIN                           blib/lib/List/Compare.pm:385 
BEGIN                           blib/lib/List/Compare.pm:5   
BEGIN                           blib/lib/List/Compare.pm:6   
BEGIN                           blib/lib/List/Compare.pm:800 
BEGIN                           blib/lib/List/Compare.pm:801 
_are_members_any_engine         blib/lib/List/Compare.pm:784 
_are_members_which_engine       blib/lib/List/Compare.pm:762 
_complement_engine              blib/lib/List/Compare.pm:655 
_init                           blib/lib/List/Compare.pm:1328
_init                           blib/lib/List/Compare.pm:394 
_init                           blib/lib/List/Compare.pm:76  
_init                           blib/lib/List/Compare.pm:809 
_intersection_engine            blib/lib/List/Compare.pm:627 
_is_LdisjointR_engine           blib/lib/List/Compare.pm:710 
_is_LequivalentR_engine         blib/lib/List/Compare.pm:704 
_is_LsubsetR_engine             blib/lib/List/Compare.pm:678 
_is_RsubsetL_engine             blib/lib/List/Compare.pm:691 
_is_member_any_engine           blib/lib/List/Compare.pm:777 
_is_member_which_engine         blib/lib/List/Compare.pm:750 
_print_equivalence_chart_engine blib/lib/List/Compare.pm:741 
_print_subset_chart_engine      blib/lib/List/Compare.pm:720 
_symmetric_difference_engine    blib/lib/List/Compare.pm:665 
_union_engine                   blib/lib/List/Compare.pm:637 
_unique_engine                  blib/lib/List/Compare.pm:645 
are_members_any                 blib/lib/List/Compare.pm:1256
are_members_any                 blib/lib/List/Compare.pm:1661
are_members_any                 blib/lib/List/Compare.pm:352 
are_members_any                 blib/lib/List/Compare.pm:586 
are_members_which               blib/lib/List/Compare.pm:1222
are_members_which               blib/lib/List/Compare.pm:1624
are_members_which               blib/lib/List/Compare.pm:325 
are_members_which               blib/lib/List/Compare.pm:568 
get_Lonly                       blib/lib/List/Compare.pm:1057
get_Lonly                       blib/lib/List/Compare.pm:1485
get_Lonly_ref                   blib/lib/List/Compare.pm:1065
get_Lonly_ref                   blib/lib/List/Compare.pm:1493
get_LorRonly                    blib/lib/List/Compare.pm:1129
get_LorRonly                    blib/lib/List/Compare.pm:1441
get_LorRonly_ref                blib/lib/List/Compare.pm:1137
get_LorRonly_ref                blib/lib/List/Compare.pm:1449
get_Ronly                       blib/lib/List/Compare.pm:1097
get_Ronly                       blib/lib/List/Compare.pm:1530
get_Ronly_ref                   blib/lib/List/Compare.pm:1105
get_Ronly_ref                   blib/lib/List/Compare.pm:1538
get_bag                         blib/lib/List/Compare.pm:1291
get_bag                         blib/lib/List/Compare.pm:1700
get_bag                         blib/lib/List/Compare.pm:366 
get_bag                         blib/lib/List/Compare.pm:596 
get_bag_ref                     blib/lib/List/Compare.pm:1295
get_bag_ref                     blib/lib/List/Compare.pm:1704
get_bag_ref                     blib/lib/List/Compare.pm:370 
get_bag_ref                     blib/lib/List/Compare.pm:600 
get_complement                  blib/lib/List/Compare.pm:1076
get_complement                  blib/lib/List/Compare.pm:1504
get_complement                  blib/lib/List/Compare.pm:207 
get_complement                  blib/lib/List/Compare.pm:461 
get_complement_all              blib/lib/List/Compare.pm:1091
get_complement_all              blib/lib/List/Compare.pm:1523
get_complement_all              blib/lib/List/Compare.pm:217 
get_complement_all              blib/lib/List/Compare.pm:473 
get_complement_ref              blib/lib/List/Compare.pm:1083
get_complement_ref              blib/lib/List/Compare.pm:1511
get_complement_ref              blib/lib/List/Compare.pm:211 
get_complement_ref              blib/lib/List/Compare.pm:465 
get_intersection                blib/lib/List/Compare.pm:1006
get_intersection                blib/lib/List/Compare.pm:1355
get_intersection                blib/lib/List/Compare.pm:152 
get_intersection                blib/lib/List/Compare.pm:403 
get_intersection_ref            blib/lib/List/Compare.pm:1010
get_intersection_ref            blib/lib/List/Compare.pm:1359
get_intersection_ref            blib/lib/List/Compare.pm:156 
get_intersection_ref            blib/lib/List/Compare.pm:407 
get_nonintersection             blib/lib/List/Compare.pm:1148
get_nonintersection             blib/lib/List/Compare.pm:1374
get_nonintersection             blib/lib/List/Compare.pm:245 
get_nonintersection             blib/lib/List/Compare.pm:502 
get_nonintersection_ref         blib/lib/List/Compare.pm:1152
get_nonintersection_ref         blib/lib/List/Compare.pm:1378
get_nonintersection_ref         blib/lib/List/Compare.pm:252 
get_nonintersection_ref         blib/lib/List/Compare.pm:506 
get_shared                      blib/lib/List/Compare.pm:1026
get_shared                      blib/lib/List/Compare.pm:1398
get_shared                      blib/lib/List/Compare.pm:172 
get_shared                      blib/lib/List/Compare.pm:427 
get_shared_ref                  blib/lib/List/Compare.pm:1030
get_shared_ref                  blib/lib/List/Compare.pm:1402
get_shared_ref                  blib/lib/List/Compare.pm:179 
get_shared_ref                  blib/lib/List/Compare.pm:431 
get_symmetric_difference        blib/lib/List/Compare.pm:1116
get_symmetric_difference        blib/lib/List/Compare.pm:1416
get_symmetric_difference        blib/lib/List/Compare.pm:228 
get_symmetric_difference        blib/lib/List/Compare.pm:483 
get_symmetric_difference_ref    blib/lib/List/Compare.pm:1120
get_symmetric_difference_ref    blib/lib/List/Compare.pm:1420
get_symmetric_difference_ref    blib/lib/List/Compare.pm:232 
get_symmetric_difference_ref    blib/lib/List/Compare.pm:487 
get_union                       blib/lib/List/Compare.pm:1016
get_union                       blib/lib/List/Compare.pm:1340
get_union                       blib/lib/List/Compare.pm:162 
get_union                       blib/lib/List/Compare.pm:415 
get_union_ref                   blib/lib/List/Compare.pm:1020
get_union_ref                   blib/lib/List/Compare.pm:1344
get_union_ref                   blib/lib/List/Compare.pm:166 
get_union_ref                   blib/lib/List/Compare.pm:419 
get_unique                      blib/lib/List/Compare.pm:1036
get_unique                      blib/lib/List/Compare.pm:1460
get_unique                      blib/lib/List/Compare.pm:186 
get_unique                      blib/lib/List/Compare.pm:439 
get_unique_all                  blib/lib/List/Compare.pm:1051
get_unique_all                  blib/lib/List/Compare.pm:1478
get_unique_all                  blib/lib/List/Compare.pm:196 
get_unique_all                  blib/lib/List/Compare.pm:451 
get_unique_ref                  blib/lib/List/Compare.pm:1043
get_unique_ref                  blib/lib/List/Compare.pm:1467
get_unique_ref                  blib/lib/List/Compare.pm:190 
get_unique_ref                  blib/lib/List/Compare.pm:443 
get_version                     blib/lib/List/Compare.pm:1301
get_version                     blib/lib/List/Compare.pm:1730
get_version                     blib/lib/List/Compare.pm:376 
get_version                     blib/lib/List/Compare.pm:623 
is_LdisjointR                   blib/lib/List/Compare.pm:1195
is_LdisjointR                   blib/lib/List/Compare.pm:1585
is_LdisjointR                   blib/lib/List/Compare.pm:283 
is_LdisjointR                   blib/lib/List/Compare.pm:538 
is_LequivalentR                 blib/lib/List/Compare.pm:1184
is_LequivalentR                 blib/lib/List/Compare.pm:1573
is_LequivalentR                 blib/lib/List/Compare.pm:275 
is_LequivalentR                 blib/lib/List/Compare.pm:530 
is_LsubsetR                     blib/lib/List/Compare.pm:1158
is_LsubsetR                     blib/lib/List/Compare.pm:1549
is_LsubsetR                     blib/lib/List/Compare.pm:259 
is_LsubsetR                     blib/lib/List/Compare.pm:514 
is_RsubsetL                     blib/lib/List/Compare.pm:1169
is_RsubsetL                     blib/lib/List/Compare.pm:1558
is_RsubsetL                     blib/lib/List/Compare.pm:267 
is_RsubsetL                     blib/lib/List/Compare.pm:522 
is_member_any                   blib/lib/List/Compare.pm:1242
is_member_any                   blib/lib/List/Compare.pm:1646
is_member_any                   blib/lib/List/Compare.pm:342 
is_member_any                   blib/lib/List/Compare.pm:578 
is_member_which                 blib/lib/List/Compare.pm:1204
is_member_which                 blib/lib/List/Compare.pm:1605
is_member_which                 blib/lib/List/Compare.pm:306 
is_member_which                 blib/lib/List/Compare.pm:556 
is_member_which_ref             blib/lib/List/Compare.pm:1208
is_member_which_ref             blib/lib/List/Compare.pm:1609
is_member_which_ref             blib/lib/List/Compare.pm:310 
is_member_which_ref             blib/lib/List/Compare.pm:560 
new                             blib/lib/List/Compare.pm:12  
print_equivalence_chart         blib/lib/List/Compare.pm:1283
print_equivalence_chart         blib/lib/List/Compare.pm:1691
print_equivalence_chart         blib/lib/List/Compare.pm:297 
print_equivalence_chart         blib/lib/List/Compare.pm:550 
print_subset_chart              blib/lib/List/Compare.pm:1275
print_subset_chart              blib/lib/List/Compare.pm:1682
print_subset_chart              blib/lib/List/Compare.pm:289 
print_subset_chart              blib/lib/List/Compare.pm:544 


blib/lib/List/Compare/Base/_Auxiliary.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare::Base::_Auxiliary;
2                                                     $VERSION = 0.31;
3                                                     # As of:  08/15/2004
4             28                  100           559   use Carp;
              28                                114   
              28                               2477   
5                                                     @ISA = qw(Exporter);
6                                                     @EXPORT_OK = qw|
7                                                         _validate_2_seenhashes
8                                                         _validate_seen_hash
9                                                         _validate_multiple_seenhashes
10                                                        _calculate_union_xintersection_only
11                                                        _calculate_seen_xintersection_only
12                                                        _calculate_seen_only
13                                                        _calculate_xintersection_only
14                                                        _calculate_union_only
15                                                        _calculate_union_seen_only
16                                                        _calculate_hash_intersection
17                                                        _calculate_hash_shared
18                                                        _subset_subengine
19                                                        _chart_engine_regular 
20                                                        _chart_engine_multiple
21                                                        _equivalent_subengine
22                                                        _index_message1
23                                                        _index_message2
24                                                        _index_message3
25                                                        _index_message4
26                                                        _prepare_listrefs 
27                                                        _subset_engine_multaccel 
28                                                        _calc_seen
29                                                        _calc_seen1
30                                                        _equiv_engine 
31                                                        _argument_checker_0 
32                                                        _argument_checker 
33                                                        _argument_checker_1 
34                                                        _argument_checker_2 
35                                                        _argument_checker_3 
36                                                        _argument_checker_3a 
37                                                        _argument_checker_4
38                                                        _alt_construct_tester 
39                                                        _alt_construct_tester_1 
40                                                        _alt_construct_tester_2 
41                                                        _alt_construct_tester_3 
42                                                        _alt_construct_tester_4 
43                                                        _alt_construct_tester_5 
44                                                    |;
45                                                    %EXPORT_TAGS = (
46                                                        calculate => [ qw(
47                                                            _calculate_union_xintersection_only
48                                                            _calculate_seen_xintersection_only
49                                                            _calculate_seen_only
50                                                            _calculate_xintersection_only
51                                                            _calculate_union_only
52                                                            _calculate_union_seen_only
53                                                            _calculate_hash_intersection
54                                                            _calculate_hash_shared
55                                                        ) ],
56                                                        checker => [ qw(
57                                                            _argument_checker_0 
58                                                            _argument_checker 
59                                                            _argument_checker_1 
60                                                            _argument_checker_2 
61                                                            _argument_checker_3 
62                                                            _argument_checker_3a 
63                                                            _argument_checker_4
64                                                        ) ],
65                                                        tester => [ qw(
66                                                            _alt_construct_tester 
67                                                            _alt_construct_tester_1 
68                                                            _alt_construct_tester_2 
69                                                            _alt_construct_tester_3 
70                                                            _alt_construct_tester_4 
71                                                            _alt_construct_tester_5 
72                                                        ) ],
73                                                    );
74            28                  100           561   use strict;
              28                                649   
              28                                316   
75                                                    
76                                                    sub _validate_2_seenhashes {
77            35                  100           221       my ($refL, $refR) = @_;
78            35                                124       my (%seenL, %seenR);
79            35                                132       my (%badentriesL, %badentriesR);
80            35                                736       foreach (keys %$refL) {
81    ***    174    100     66                  402           if (${$refL}{$_} =~ /^\d+$/ and ${$refL}{$_} > 0) {
             174                               5144   
             174                               6961   
82           170                                387               $seenL{$_} = ${$refL}{$_};
             170                               2022   
83                                                            } else {
84             4                                 16               $badentriesL{$_} = ${$refL}{$_};
               4                                 46   
85                                                            }
86                                                        } 
87            35                                502       foreach (keys %$refR) {
88           161    100    100                  441           if (${$refR}{$_} =~ /^\d+$/ and ${$refR}{$_} > 0) {
             161                               1434   
             159                               1272   
89           157                                362               $seenR{$_} = ${$refR}{$_};
             157                               1145   
90                                                            } else {
91             4                                 16               $badentriesR{$_} = ${$refR}{$_};
               4                                 40   
92                                                            }
93                                                        }
94            35    100    100                  542       if ( (keys %badentriesL) or (keys %badentriesR) ) {
95             6                               1944           print "\nValues in a 'seen-hash' may only be positive integers.\n";
96             6                                884           print "  These elements have invalid values:\n\n";
97             6    100                          91           if (keys %badentriesL) {
98             4                                500               print "  First hash in arguments:\n\n";
99                                                                print "     Key:  $_\tValue:  $badentriesL{$_}\n" 
100            4                                 19                   foreach (sort keys %badentriesL);
               4                                461   
101                                                           } 
102            6    100                          61           if (keys %badentriesR) {
103            4                                508               print "  Second hash in arguments:\n\n";
104                                                               print "     Key:  $_\tValue:  $badentriesR{$_}\n" 
105            4                                 15                   foreach (sort keys %badentriesR);
               4                                455   
106                                                           }
107            6                                194           croak "Correct invalid values before proceeding:  $!";
108                                                       }
109           29                                538       return (\%seenL, \%seenR);
110                                                   }
111                                                   
112                                                   sub _validate_seen_hash {
113          503    100           100          5139       if (@_ > 2) {
114          258                               4292           _validate_multiple_seenhashes( [@_] );
115                                                       } else { 
116          245                               1294           my ($l, $r) = @_;
117          245                               6979           my (%badentriesL, %badentriesR);
118          245                               5544           foreach (keys %$l) {
119            4                                 60               $badentriesL{$_} = ${$l}{$_} 
            1592                              14925   
120   ***   1592    100     66                 3396                   unless (${$l}{$_} =~ /^\d+$/ and ${$l}{$_} > 0);
            1592                              19761   
121                                                           } 
122          245                               3369           foreach (keys %$r) {
123            4                                128               $badentriesR{$_} = ${$r}{$_} 
            1569                               9627   
124         1569    100    100                22079                   unless (${$r}{$_} =~ /^\d+$/ and ${$r}{$_} > 0);
            1567                              12681   
125                                                           }
126          245    100    100                 5924           if ( (keys %badentriesL) or (keys %badentriesR) ) {
127            6                               1817               print "\nValues in a 'seen-hash' may only be numeric.\n";
128            6                                886               print "  These elements have invalid values:\n\n";
129            6    100                          89               if (keys %badentriesL) {
130            4                                502                   print "  First hash in arguments:\n\n";
131                                                                   print "     Key:  $_\tValue:  $badentriesL{$_}\n" 
132            4                                 17                       foreach (sort keys %badentriesL);
               4                                469   
133                                                               } 
134            6    100                          62               if (keys %badentriesR) {
135            4                                552                   print "  Second hash in arguments:\n\n";
136                                                                   print "     Key:  $_\tValue:  $badentriesR{$_}\n" 
137            4                                 20                       foreach (sort keys %badentriesR);
               4                                467   
138                                                               }
139            6                                133               croak "Correct invalid values before proceeding:  $!";
140                                                           }
141                                                       }
142                                                   }
143                                                   
144                                                   sub _validate_multiple_seenhashes {
145          258                  100          1243       my $hashrefsref = shift;
146          258                               1398       my @hashrefs = @{$hashrefsref};
             258                               1930   
147          258                               1269       my (%badentries, $badentriesflag);
148                                                       for (my $i = 0; $i <= $#hashrefs; $i++) {
149         1276                               4416           my %seenhash = %{$hashrefs[$i]};
            1276                              27206   
150         1276                              11342           foreach (keys %seenhash) {
151         6804    100    100               163461               unless ($seenhash{$_} =~ /^\d+$/ and $seenhash{$_} > 0) {
152           24                                221                   $badentries{$i}{$_} = $seenhash{$_};
153           24                                455                   $badentriesflag++;
154                                                               }
155                                                           }
156          258                               1015       }
157          258    100                       10216       if ($badentriesflag) {
158           12                               2995           print "\nValues in a 'seen-hash' may only be positive integers.\n";
159           12                               1436           print "  These elements have invalid values:\n\n";
160           12                                355           foreach (sort keys %badentries) {
161           24                               1775               print "    Hash $_:\n";
162           24                                 93               my %pairs = %{$badentries{$_}};
              24                                293   
163           24                                170               foreach my $val (sort keys %pairs) {
164           24                               2033                   print "        Bad key-value pair:  $val\t$pairs{$val}\n";
165                                                               }
166                                                           }
167           12                                259           croak "Correct invalid values before proceeding:  $!";
168                                                       }
169                                                   }
170                                                   
171                                                   sub _list_builder {
172        10467                  100         65255       my ($aref, $x) = @_;
173        10467    100                       39045       if (ref(${$aref}[$x]) eq 'HASH') {
           10467                             146524   
174         7474                              25058           return keys %{${$aref}[$x]};
            7474                             112823   
            7474                             170844   
175                                                       } else {
176         2993                               7974           return      @{${$aref}[$x]};
            2993                              18564   
            2993                              75439   
177                                                       }
178                                                   }
179                                                   
180                                                   sub _calculate_union_xintersection_only {
181          200                  100          1065       my $aref = shift;
182          200                                896       my (%union, %xintersection);
183         1020                               9950       for (my $i = 0; $i <= $#{$aref}; $i++) {
184          820                               7223           my %seenthis = ();
185          820                               3438           foreach my $h ( _list_builder($aref, $i) ) {
186         4820                              51828               $seenthis{$h}++;
187         4820                              37586               $union{$h}++;
188                                                           }
189         2280                              24129           for (my $j = $i+1; $j <=$#{$aref}; $j++) {
190         1460                               3148               my %seenthat = ();
191         1460                               2995               my %seenintersect = ();
192         1460                              22812               my $ilabel = $i . '_' . $j;
193         1460                               2959               $seenthat{$_}++ foreach ( _list_builder($aref, $j) );
            1460                               5099   
194         1460                              14133               foreach my $k (keys %seenthat) {
195         6720    100                      111068                   $seenintersect{$k}++ if (exists $seenthis{$k});
196                                                               }
197         1460                              35907               $xintersection{$ilabel} = \%seenintersect;
198          820                              10146           }
199          200                                980       }
200          200                               3018       return (\%union, \%xintersection);
201                                                   }
202                                                   
203                                                   sub _calculate_seen_xintersection_only {
204          179                  100           725       my $aref = shift;
205          179                                786       my (%xintersection, %seen);
206          990                              13685       for (my $i = 0; $i <= $#{$aref}; $i++) {
207          811                               1876           my %seenthis = ();
208          811                              10060           foreach my $h ( _list_builder($aref, $i) ) {
209         4747                              20024               $seenthis{$h}++;
210                                                           }
211          811                               7959           $seen{$i} = \%seenthis;
212         2349                              27224           for (my $j = $i+1; $j <=$#{$aref}; $j++) {
213         1538                              10535               my (%seenthat, %seenintersect);
214         1538                               7026               my $ilabel = $i . '_' . $j;
215         1538                               9364               $seenthat{$_}++ foreach ( _list_builder($aref, $j) );
            1538                              12713   
216         1538                              14654               foreach (keys %seenthat) {
217         6991    100                       89972                   $seenintersect{$_}++ if (exists $seenthis{$_});
218                                                               }
219         1538                              25165               $xintersection{$ilabel} = \%seenintersect;
220          811                               9308           }
221          179                                754       }
222          179                               2106       return (\%seen, \%xintersection);
223                                                   }
224                                                   
225                                                   sub _calculate_seen_only {
226          754                  100          4008       my $aref = shift;
227          754                               2441       my (%seen);
228         3960                              50828       for (my $i = 0; $i <= $#{$aref}; $i++) {
229         3206                              12885           my %seenthis = ();
230         3206                              19617           foreach my $h ( _list_builder($aref, $i) ) {
231        18726                             100066               $seenthis{$h}++;
232                                                           }
233         3206                              55348           $seen{$i} = \%seenthis;
234          754                               3356       }
235          754                              11510       return \%seen;
236                                                   }
237                                                   
238                                                   sub _calculate_xintersection_only {
239          142                  100           794       my $aref = shift;
240          142                                599       my (%xintersection);
241          711                               8027       for (my $i = 0; $i <= $#{$aref}; $i++) {
242          569                               1392           my %seenthis = ();
243          569                               6974           foreach my $h ( _list_builder($aref, $i) ) {
244         3246                              24607               $seenthis{$h}++;
245                                                           }
246         1596                              14447           for (my $j = $i+1; $j <=$#{$aref}; $j++) {
247         1027                               2743               my (%seenthat, %seenintersect);
248         1027                              13962               my $ilabel = $i . '_' . $j;
249         1027                               6796               $seenthat{$_}++ foreach ( _list_builder($aref, $j) );
            1027                               4097   
250         1027                               9849               foreach (keys %seenthat) {
251         4611    100                       56819                   $seenintersect{$_}++ if (exists $seenthis{$_});
252                                                               }
253         1027                              18144               $xintersection{$ilabel} = \%seenintersect;
254          569                              10943           }
255          142                                593       }
256          142                               1335       return \%xintersection;
257                                                   }
258                                                   
259                                                   sub _calculate_union_only {
260           56                  100           265       my $aref = shift;
261           56                                204       my (%union);
262          276                               2651       for (my $i = 0; $i <= $#{$aref}; $i++) {
263          220                                901           foreach my $h ( _list_builder($aref, $i) ) {
264         1292                               5804               $union{$h}++;
265                                                           }
266           56                                246       }
267           56                               3771       return \%union;
268                                                   }
269                                                   
270                                                   sub _calculate_union_seen_only {
271          180                  100           844       my $aref = shift;
272          180                               1437       my (%union, %seen);
273          996                               8785       for (my $i = 0; $i <= $#{$aref}; $i++) {
274          816                               1860           my %seenthis = ();
275          816                               4051           foreach my $h ( _list_builder($aref, $i) ) {
276         4784                              68128               $seenthis{$h}++;
277         4784                              32228               $union{$h}++;
278                                                           }
279          816                              10131           $seen{$i} = \%seenthis;
280          180                                783       }
281          180                               2364       return (\%union, \%seen);
282                                                   }
283                                                   
284                                                   sub _calculate_hash_intersection {
285          115                  100           643       my $xintersectionref = shift;
286          115                                549       my @xkeys = keys %{$xintersectionref};
             115                               2206   
287          115                                719       my %intersection = %{${$xintersectionref}{$xkeys[0]}};
             115                                473   
             115                               1538   
288                                                       for (my $m = 1; $m <= $#xkeys; $m++) {
289          675                               7036           my %compare = %{${$xintersectionref}{$xkeys[$m]}};
             675                               1391   
             675                               6625   
290          675                               2575           my %result = ();
291          675                               3408           foreach (keys %compare) {
292         2325    100                       22115               $result{$_}++ if (exists $intersection{$_});
293                                                           }
294          675                              11558           %intersection = %result;
295          115                                684       }
296          115                               1669       return \%intersection;
297                                                   }
298                                                   
299                                                   sub _calculate_hash_shared {
300          200                  100          1105       my $xintersectionref = shift;
301          200                                747       my (%shared);
302          200                                809       foreach my $q (keys %{$xintersectionref}) {
             200                               2427   
303         1460                              17619           $shared{$_}++ foreach (keys %{${$xintersectionref}{$q}});
            1460                               3443   
            1460                               3078   
            1460                              25099   
304                                                       }
305          200                               2709       return \%shared;
306                                                   }
307                                                   
308                                                   sub _subset_subengine {
309          194                  100           897       my $aref = shift;
310          194                                626       my (@xsubset);
311          194                               2365       my $seenref = _calculate_seen_only($aref);
312          194                                733       my %seen = %{$seenref};
             194                               2461   
313          194                               7521       foreach my $i (keys %seen) {
314          826                               2089           my %tempi = %{$seen{$i}};
             826                              19055   
315          826                               6721           foreach my $j (keys %seen) {
316         3842                              15685               my %tempj = %{$seen{$j}};
            3842                              54765   
317         3842                              58489               $xsubset[$i][$j] = 1;
318         3842                              57069               foreach my $k (keys %tempi) {
319        20798    100                      231171                   $xsubset[$i][$j] = 0 if (! $tempj{$k});
320                                                               }
321                                                           }
322                                                       }
323          194                              11277       return \@xsubset;
324                                                   }
325                                                   
326                                                   sub _chart_engine_regular {
327           32                  100           142       my $aref = shift;
328           32                                175       my @sub_or_eqv = @$aref;
329           32                                166       my $title = shift;
330           32                                129       my ($v, $w, $t);
331           32                              11850       print "\n";
332           32                               3317       print $title, ' Relationships', "\n\n";
333           32                               2384       print '   Right:    0    1', "\n\n";
334           32                               2879       print 'Left:  0:    1    ', $sub_or_eqv[0], "\n\n";
335           32                               3700       print '       1:    ', $sub_or_eqv[1], '    1', "\n\n";
336                                                   }
337                                                   
338                                                   sub _chart_engine_multiple {
339           48                  100           253       my $aref = shift;
340           48                                390       my @sub_or_eqv = @$aref;
341           48                                268       my $title = shift;
342           48                                222       my ($v, $w, $t);
343           48                              10859       print "\n";
344           48                               7866       print $title, ' Relationships', "\n\n";
345           48                               8143       print '   Right:';
346                                                       for ($v = 0; $v <= $#sub_or_eqv; $v++) {
347          216                               6902           print '    ', $v;
348           48                                304       }
349           48                               6815       print "\n\n";
350           48                               1239       print 'Left:  0:';
351           48                                206       my @firstrow = @{$sub_or_eqv[0]};
              48                                542   
352                                                       for ($t = 0; $t <= $#firstrow; $t++) {
353          216                              18671           print '    ', $firstrow[$t];
354           48                                237       }
355           48                               9494       print "\n\n";
356                                                       for ($w = 1; $w <= $#sub_or_eqv; $w++) {
357          168                               1449           my $length_left = length($w);
358          168                               5937           my $x = '';
359          168                               5293           print ' ' x (8 - $length_left), $w, ':';
360          168                                530           my @row = @{$sub_or_eqv[$w]};
             168                               1452   
361                                                           for ($x = 0; $x <= $#row; $x++) {
362          816                              36660               print '    ', $row[$x];
363          168                               6309           }
364          168                              29026           print "\n\n";
365           48                                264       }
366           48                              10795       1; # force return true value
367                                                   }
368                                                   
369                                                   sub _equivalent_subengine {
370           80                  100           394       my $aref = shift;
371           80                                526       my $xsubsetref = _subset_subengine($aref);
372           80                                329       my @xsubset = @{$xsubsetref};
              80                                583   
373           80                               6233       my (@xequivalent);
374                                                       for (my $f = 0; $f <= $#xsubset; $f++) {
375                                                           for (my $g = 0; $g <= $#xsubset; $g++) {
376         1412                               6096               $xequivalent[$f][$g] = 0;
377         1412    100    100                33442               $xequivalent[$f][$g] = 1
378                                                                   if ($xsubset[$f][$g] and $xsubset[$g][$f]);
379          316                                804           }
380           80                                331       }
381           80                               1536       return \@xequivalent;
382                                                   }
383                                                   
384                                                   sub _index_message1 {
385          190                  100          1059       my ($index, $dataref) = @_;
386          190                              11304       my $method = (caller(1))[3];
387   ***    188            66                 3501       croak "Argument to method $method must be the array index of the target list \n  in list of arrays passed as arguments to the constructor: $!"
388                                                           unless (
389                                                                   $index =~ /^\d+$/ 
390                                                              and  0 <= $index 
391   ***    190    100     66                12288              and  $index <= ${$dataref}{'maxindex'}
392                                                           );
393                                                   }
394                                                   
395                                                   sub _index_message2 {
396          113                  100           459       my $dataref = shift;
397          113                                431       my ($index_left, $index_right);
398          113                              30525       my $method = (caller(1))[3];
399          113    100    100                 2159       croak "Method $method requires 2 arguments: $!"
400                                                           unless (@_ == 0 || @_ == 2);
401          109    100                         666       if (@_ == 0) {
402           17                                 88           $index_left = 0;
403           17                              29922           $index_right = 1;
404                                                       } else {
405           92                               5919           ($index_left, $index_right) = @_;
406           92                                827           foreach ($index_left, $index_right) {
407   ***    182            66                 2142               croak "Each argument to method $method must be a valid array index for the target list \n  in list of arrays passed as arguments to the constructor: $!"
408                                                                   unless (
409                                                                           $_ =~ /^\d+$/ 
410                                                                      and  0 <= $_ 
411   ***    182    100     33                 3529                      and  $_ <= ${$dataref}{'maxindex'}
412                                                                   );
413                                                           }
414                                                       }
415          107                               1393       return ($index_left, $index_right);
416                                                   }
417                                                   
418                                                   sub _index_message3 {
419          190                  100          2207       my ($index, $maxindex) = @_;
420          190                               9819       my $method = (caller(1))[3];
421   ***    190    100     33                 8854       croak "Argument to method $method must be the array index of the target list \n  in list of arrays passed as arguments to the constructor: $!"
      ***                   66                        
422                                                           unless (
423                                                                   $index =~ /^\d+$/ 
424                                                              and  0 <= $index 
425                                                              and  $index <= $maxindex
426                                                           );
427                                                   }
428                                                   
429                                                   sub _index_message4 {
430           87                  100           663       my $maxindex = shift;
431           87                                356       my ($index_left, $index_right);
432           87                               2229       my $method = (caller(1))[3];
433           87    100    100                 1699       croak "Method $method requires 2 arguments: $!"
434                                                           unless (@_ == 0 || @_ == 2);
435           85    100                         526       if (@_ == 0) {
436            9                                 46           $index_left = 0;
437            9                                 48           $index_right = 1;
438                                                       } else {
439           76                                476           ($index_left, $index_right) = @_;
440           76                                469           foreach ($index_left, $index_right) {
441   ***    150    100     33                 5984               croak "Each argument to method $method must be a valid array index for the target list \n  in list of arrays passed as arguments to the constructor: $!"
      ***                   66                        
442                                                                   unless (
443                                                                           $_ =~ /^\d+$/ 
444                                                                      and  0 <= $_ 
445                                                                      and  $_ <= $maxindex
446                                                                   );
447                                                           }
448                                                       }
449           83                                997       return ($index_left, $index_right);
450                                                   }
451                                                   
452                                                   sub _prepare_listrefs {
453          733                  100         52749       my $dataref = shift;
454          733                               3801       delete ${$dataref}{'unsort'};
             733                               8310   
455          733                               8468       my (@listrefs);
456          733                               2780       foreach my $lref (sort {$a <=> $b} keys %{$dataref}) {
            5873                              68183   
             733                               6241   
457         3668                              15165           push(@listrefs, ${$dataref}{$lref});
            3668                              26766   
458                                                       };
459          733                              20663       return \@listrefs;
460                                                   }
461                                                   
462                                                   sub _subset_engine_multaccel {
463           58                  100           264       my $dataref = shift;
464           58                                355       my $aref = _prepare_listrefs($dataref);
465           58                                260       my ($index_left, $index_right) = _index_message4($#{$aref}, @_);
              58                                718   
466                                                   
467           56                                455       my $xsubsetref = _subset_subengine($aref);
468           56                                243       return ${$xsubsetref}[$index_left][$index_right];
              56                               6236   
469                                                   }
470                                                   
471                                                   sub _calc_seen {
472          700                  100         11817       my ($refL, $refR) = @_;
473   ***    700    100     66                15529       if (ref($refL) eq 'ARRAY' and ref($refR) eq 'ARRAY') {
      ***            50     33                        
474          353                              10565           my (%seenL, %seenR);
475          353                               3091           foreach (@$refL) { $seenL{$_}++ }
            2705                              28260   
476          353                               7792           foreach (@$refR) { $seenR{$_}++ }
            2659                              12677   
477          353                              10123           return (\%seenL, \%seenR); 
478                                                       } elsif (ref($refL) eq 'HASH' and ref($refR) eq 'HASH') {
479          347                               3978           return ($refL, $refR);
480                                                       } else {
481   ***      0                                  0           croak "Improper mixing of arguments; accelerated calculation not possible:  $!";
482                                                       }
483                                                   }
484                                                   
485                                                   sub _equiv_engine {
486           56                  100           288       my ($hrefL, $hrefR) = @_;
487           56                                232       my (%intersection, %Lonly, %Ronly, %LorRonly);
488           56                                215       my $LequivalentR_status = 0;
489                                                       
490           56                                168       foreach (keys %{$hrefL}) {
              56                               5439   
491          312    100                         661           exists ${$hrefR}{$_} ? $intersection{$_}++ : $Lonly{$_}++;
             312                               2326   
492                                                       }
493                                                   
494           56                                343       foreach (keys %{$hrefR}) {
              56                                428   
495          296    100                        1391           $Ronly{$_}++ unless (exists $intersection{$_});
496                                                       }
497                                                   
498           56                                285       $LorRonly{$_}++ foreach ( (keys %Lonly), (keys %Ronly) );
              56                              28188   
499           56    100                         552       $LequivalentR_status = 1 if ( (keys %LorRonly) == 0);
500           56                                873       return $LequivalentR_status;
501                                                   }
502                                                   
503                                                   sub _argument_checker_0 {
504          958                  100          6819       my @args = @_;
505          958                               9568       my $first_ref = ref($args[0]);
506   ***    958     50     66                32579       die "Improper argument: $!" 
507                                                           unless ($first_ref eq 'ARRAY' or $first_ref eq 'HASH');
508          958                              19981       my @temp = @args[1..$#args];
509          958                               9276       my ($testing);
510          958                               3744       my $condition = 1;
511          958                              12829       while (defined ($testing = shift(@temp)) ) {
512   ***   2376     50                       33076           unless (ref($testing) eq $first_ref) {
513   ***      0                                  0               $condition = 0;
514   ***      0                                  0               last;
515                                                           }
516                                                       }
517   ***    958     50                       12063       croak "Arguments must be either all array references or all hash references: $!"
518                                                           unless $condition;
519          958    100                        7665       _validate_seen_hash(@args) if $first_ref eq 'HASH';
520          946                              17752       return (@args);
521                                                   }
522                                                   
523                                                   sub _argument_checker {
524          843                  100          7463       my $argref = shift;
525          843                              13063       my @args = _argument_checker_0(@{$argref});
             843                               8080   
526          841                               9857       return (@args);
527                                                   }
528                                                   
529                                                   sub _argument_checker_1 {
530          270                  100          1401       my $argref = shift;
531          270                                888       my @args = @{$argref};
             270                               1697   
532          270    100                        1776       croak "Subroutine call requires 2 references as arguments:  $!"
533                                                           unless @args == 2;
534          266                               1819       return (_argument_checker($args[0]), ${$args[1]}[0]);
             264                               7202   
535                                                   }
536                                                   
537                                                   sub _argument_checker_2 {
538           16                  100           104       my $argref = shift;
539           16                                219       my @args = @$argref;
540   ***     16     50                         234       croak "Subroutine call requires 2 references as arguments:  $!"
541                                                           unless @args == 2;
542           16                                146       return (_argument_checker($args[0]), $args[1]);
543                                                   }
544                                                   
545                                                   # _argument_checker_3 is currently set-up to handle either 1 or 2 arguments
546                                                   # in get_unique and get_complement
547                                                   # The first argument is an arrayref holding refs to lists ('unsorted' has been 
548                                                   # stripped off).
549                                                   # The second argument is an arrayref holding a single item (index number of 
550                                                   # item being tested)
551                                                   sub _argument_checker_3 {
552          125                  100           753       my $argref = shift;
553          125                                510       my @args = @{$argref};
             125                                777   
554          125    100                        1108       if (@args == 1) {
                    100                               
555           80                                629           return (_argument_checker($args[0]), 0);
556                                                       } elsif (@args == 2) {
557           43                               1036           return (_argument_checker($args[0]), ${$args[1]}[0]);
              43                                658   
558                                                       } else {
559   ***      2     50     33                   77           croak "Subroutine call requires 1 or 2 references as arguments:  $!"
560                                                               unless (@args == 1 or @args == 2);
561                                                       }
562                                                   }
563                                                   
564                                                   sub _argument_checker_3a {
565           32                  100           162       my $argref = shift;
566           32                                105       my @args = @{$argref};
              32                                171   
567   ***     32     50                         216       if (@args == 1) {
568           32                                218           return [ _argument_checker($args[0]) ];
569                                                       } else {
570   ***      0                                  0           croak "Subroutine call requires exactly 1 reference as argument:  $!";
571                                                       }
572                                                   }
573                                                   
574                                                   sub _argument_checker_4 {
575          112                  100           673       my $argref = shift;
576          112                                365       my @args = @{$argref};
             112                                779   
577          112    100                         906       if (@args == 1) {
                    100                               
578           73                                543           return (_argument_checker($args[0]), [0,1]);
579                                                       } elsif (@args == 2) {
580   ***     36     50                         126           if (@{$args[1]} == 2) {
              36                                292   
581           36                                116               my $last_index = $#{$args[0]};
              36                                720   
582           36                                142               foreach my $i (@{$args[1]}) {
              36                                328   
583   ***     69    100     66                 2125   		croak "No element in index position $i in list of list references passed as first argument to function: $!"
584                                                                       unless ($i =~ /^\d+$/ and $i <= $last_index);
585                                                               }
586           33                                356               return (_argument_checker($args[0]), $args[1]);
587                                                           } else {
588   ***      0                                  0               croak "Must provide index positions corresponding to two lists: $!";
589                                                           }
590                                                       } else {
591   ***      3     50     33                  661           croak "Subroutine call requires 1 or 2 references as arguments: $!"
592                                                               unless (@args == 1 or @args == 2);
593                                                       }
594                                                   }
595                                                   
596                                                   sub _calc_seen1 {
597          768                  100          5115       my @listrefs = @_;
598                                                       # _calc_seen1() is applied after _argument_checker(), which checks to make
599                                                       # sure that the references in its output are either all arrayrefs 
600                                                       # or all seenhashrefs
601                                                       # hence, _calc_seen1 only needs to determine whether it's dealing with 
602                                                       # arrayrefs or seenhashrefs, then, if arrayrefs, calculate seenhashes
603          768    100                        9408       if (ref($listrefs[0]) eq 'ARRAY') {
      ***            50                               
604          384                              86228           my (@seenrefs);
605          384                               3589           foreach my $aref (@listrefs) {
606         1386                               3331               my (%seenthis);
607         1386                               3450               foreach my $j (@{$aref}) {
            1386                              19214   
608         9334                              46936                   $seenthis{$j}++;
609                                                               }
610         1386                              10751               push(@seenrefs, \%seenthis);
611                                                           }
612          384                              13308           return \@seenrefs;
613                                                       } elsif (ref($listrefs[0]) eq 'HASH') {
614          384                               3025           return \@listrefs;
615                                                       } else {
616   ***      0                                  0           croak "Indeterminate case in _calc_seen1: $!";
617                                                       }
618                                                   }
619                                                   
620                                                   # _alt_construct_tester prepares for _argument_checker in 
621                                                   # get_union get_intersection get_symmetric_difference get_shared get_nonintersection
622                                                   sub _alt_construct_tester {
623          286                  100          2508       my @args = @_;
624          286                               1327       my ($argref, $unsorted);
625          286    100    100                19536       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
626          115                                701          my $hashref = shift;
627          115                               1500          die "Need to define 'lists' key properly: $!"
628          114           100                 1501              unless ( ${$hashref}{'lists'}
629          115    100                         415                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
630          113                                473          $argref = ${$hashref}{'lists'};
             113                                524   
631          113    100                       15531          $unsorted = ${$hashref}{'unsorted'} ? 1 : '';
             113                               1060   
632                                                       } else {
633          171    100    100                 5720           $unsorted = shift(@args) 
634                                                               if ($args[0] eq '-u' or $args[0] eq '--unsorted');
635          171                               1235           $argref = shift(@args); 
636                                                       }
637          284                               2966       return ($argref, $unsorted);
638                                                   }
639                                                   
640                                                   # _alt_construct_tester_1 prepares for _argument_checker_1 in
641                                                   # is_member_which is_member_any
642                                                   sub _alt_construct_tester_1 {
643          272                  100          3240       my @args = @_;
644          272                                922       my ($argref);
645          272    100    100                12650       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
646          134                                378           my (@returns);
647          134                                544           my $hashref = $args[0];
648          134                               1288           die "Need to define 'lists' key properly: $!"
649          133           100                 1527              unless ( ${$hashref}{'lists'}
650          134    100                         507                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
651          132                                954           @returns = defined ${$hashref}{'item'}
             132                                613   
652          132                               1423                           ? (${$hashref}{'lists'}, [${$hashref}{'item'}])
      ***      0                                  0   
653   ***    132     50                         502                           : (${$hashref}{'lists'});
654          132                                947           $argref = \@returns;
655                                                       } else {
656          138                                750           $argref = \@args; 
657                                                       }
658          270                              30984       return $argref;
659                                                   }
660                                                   
661                                                   # _alt_construct_tester_2 prepares for _argument_checker_2 in
662                                                   # are_members_which are_members_any
663                                                   sub _alt_construct_tester_2 {
664           16                  100           182       my @args = @_;
665           16                                 69       my ($argref);
666   ***     16    100     66                  445       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
667            8                                 31           my (@returns);
668            8                                 39           my $hashref = $args[0];
669            8                                161           die "Need to define 'lists' key properly: $!"
670   ***      8            33                  111              unless ( ${$hashref}{'lists'}
671   ***      8     50                          32                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
672            8                                 78           @returns = defined ${$hashref}{'items'}
               8                                104   
673            8                                 71                           ? (${$hashref}{'lists'}, ${$hashref}{'items'})
      ***      0                                  0   
674   ***      8     50                          37                           : (${$hashref}{'lists'});
675            8                                 67           $argref = \@returns;
676                                                       } else {
677            8                                 47           $argref = \@args; 
678                                                       }
679           16                                251       return $argref;
680                                                   }
681                                                   
682                                                   # _alt_construct_tester_3 prepares for _argument_checker_3 in
683                                                   # get_unique get_complement 
684                                                   sub _alt_construct_tester_3 {
685          159                  100          1526       my @args = @_;
686          159                                757       my ($argref, $unsorted);
687          159    100    100                 3923       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
688           67                                236           my (@returns);
689           67                                295           my $hashref = $args[0];
690           67                                784           die "Need to define 'lists' key properly: $!"
691           66           100                 1326              unless ( ${$hashref}{'lists'}
692           67    100                         231                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
693           65                                521           @returns = defined ${$hashref}{'item'}
              17                                175   
694           17                                921                           ? (${$hashref}{'lists'}, [${$hashref}{'item'}])
              48                                374   
695           65    100                         307                           : (${$hashref}{'lists'});
696           65                                352           $argref = \@returns;
697           65    100                         236           $unsorted = ${$hashref}{'unsorted'} ? 1 : '';
              65                                645   
698                                                       } else {
699           92    100    100                 2676           $unsorted = shift(@args) if ($args[0] eq '-u' or $args[0] eq '--unsorted');
700           92                                631           $argref = \@args; 
701                                                       }
702          157                               1553       return ($argref, $unsorted);
703                                                   }
704                                                   
705                                                   # _alt_construct_tester_4 prepares for _argument_checker_4 in
706                                                   # is_LsubsetR is_RsubsetL is_LequivalentR is_LdisjointR
707                                                   sub _alt_construct_tester_4 {
708          114                  100          1145       my @args = @_;
709          114                                381       my ($argref);
710          114    100    100                 2605       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
711           54                                153           my (@returns);
712           54                                201           my $hashref = $args[0];
713           54                                520           die "Need to define 'lists' key properly: $!"
714           53           100                  563              unless ( ${$hashref}{'lists'}
715           54    100                         167                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
716           52                                378           @returns = defined ${$hashref}{'pair'}
              16                                 80   
717           16                                152                           ? (${$hashref}{'lists'}, ${$hashref}{'pair'})
              36                                280   
718           52    100                         278                           : (${$hashref}{'lists'});
719           52                                332           $argref = \@returns;
720                                                       } else {
721           60                                274           $argref = \@args; 
722                                                       }
723          112                                817       return $argref;
724                                                   }
725                                                   
726                                                   # _alt_construct_tester_5 prepares for _argument_checker in
727                                                   # print_subset_chart print_equivalence_chart
728                                                   sub _alt_construct_tester_5 {
729           18                  100           182       my @args = @_;
730           18                                 69       my ($argref);
731   ***     18    100     66                  536       if (@args == 1 and (ref($args[0]) eq 'HASH')) {
732           10                                 64          my $hashref = shift;
733           10                                110          die "Need to define 'lists' key properly: $!"
734            9           100                  195              unless ( ${$hashref}{'lists'}
735           10    100                          41                   and (ref(${$hashref}{'lists'}) eq 'ARRAY') );
736            8                                 36          $argref = ${$hashref}{'lists'};
               8                                 47   
737                                                       } else {
738            8                                 63           $argref = shift(@args); 
739                                                       }
740           16                                131       return $argref;
741                                                   }
742                                                   
743                                                   1;
744                                                   
745                                                   __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
81           100    170      4   if (${$refL;}{$_} =~ /^\d+$/ and ${$refL;}{$_} > 0) { }
88           100    157      4   if (${$refR;}{$_} =~ /^\d+$/ and ${$refR;}{$_} > 0) { }
94           100      6     29   if (keys %badentriesL or keys %badentriesR)
97           100      4      2   if (keys %badentriesL)
102          100      4      2   if (keys %badentriesR)
113          100    258    245   if (@_ > 2) { }
120          100      4   1588   unless ${$l;}{$_} =~ /^\d+$/ and ${$l;}{$_} > 0
124          100      4   1565   unless ${$r;}{$_} =~ /^\d+$/ and ${$r;}{$_} > 0
126          100      6    239   if (keys %badentriesL or keys %badentriesR)
129          100      4      2   if (keys %badentriesL)
134          100      4      2   if (keys %badentriesR)
151          100     24   6780   unless ($seenhash{$_} =~ /^\d+$/ and $seenhash{$_} > 0)
157          100     12    246   if ($badentriesflag)
173          100   7474   2993   if (ref ${$aref;}[$x] eq 'HASH') { }
195          100   4980   1740   if exists $seenthis{$k}
217          100   5151   1840   if exists $seenthis{$_}
251          100   3250   1361   if exists $seenthis{$_}
292          100   1350    975   if exists $intersection{$_}
319          100   6196  14602   if not $tempj{$k}
377          100    436    976   if $xsubset[$f][$g] and $xsubset[$g][$f]
391          100      2    188   unless $index =~ /^\d+$/ and 0 <= $index and $index <= ${$dataref;}{'maxindex'}
399          100      4    109   unless @_ == 0 or @_ == 2
401          100     17     92   if (@_ == 0) { }
411          100      2    180   unless $_ =~ /^\d+$/ and 0 <= $_ and $_ <= ${$dataref;}{'maxindex'}
421          100      2    188   unless $index =~ /^\d+$/ and 0 <= $index and $index <= $maxindex
433          100      2     85   unless @_ == 0 or @_ == 2
435          100      9     76   if (@_ == 0) { }
441          100      2    148   unless $_ =~ /^\d+$/ and 0 <= $_ and $_ <= $maxindex
473          100    353    347   if (ref $refL eq 'ARRAY' and ref $refR eq 'ARRAY') { }
      ***     50    347      0   elsif (ref $refL eq 'HASH' and ref $refR eq 'HASH') { }
491          100    272     40   exists ${$hrefR;}{$_} ? :
495          100     24    272   unless exists $intersection{$_}
499          100     16     40   if keys %LorRonly == 0
506   ***     50      0    958   unless $first_ref eq 'ARRAY' or $first_ref eq 'HASH'
512   ***     50      0   2376   unless (ref $testing eq $first_ref)
517   ***     50      0    958   unless $condition
519          100    483    475   if $first_ref eq 'HASH'
532          100      4    266   unless @args == 2
540   ***     50      0     16   unless @args == 2
554          100     80     45   if (@args == 1) { }
             100     43      2   elsif (@args == 2) { }
559   ***     50      2      0   unless @args == 1 or @args == 2
567   ***     50     32      0   if (@args == 1) { }
577          100     73     39   if (@args == 1) { }
             100     36      3   elsif (@args == 2) { }
580   ***     50     36      0   if (@{$args[1];} == 2) { }
583          100      3     66   unless $i =~ /^\d+$/ and $i <= $last_index
591   ***     50      3      0   unless @args == 1 or @args == 2
603          100    384    384   if (ref $listrefs[0] eq 'ARRAY') { }
      ***     50    384      0   elsif (ref $listrefs[0] eq 'HASH') { }
625          100    115    171   if (@args == 1 and ref $args[0] eq 'HASH') { }
629          100      2    113   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
631          100     57     56   ${$hashref;}{'unsorted'} ? :
633          100    114     57   if $args[0] eq '-u' or $args[0] eq '--unsorted'
645          100    134    138   if (@args == 1 and ref $args[0] eq 'HASH') { }
650          100      2    132   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
653   ***     50    132      0   defined ${$hashref;}{'item'} ? :
666          100      8      8   if (@args == 1 and ref $args[0] eq 'HASH') { }
671   ***     50      0      8   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
674   ***     50      8      0   defined ${$hashref;}{'items'} ? :
687          100     67     92   if (@args == 1 and ref $args[0] eq 'HASH') { }
692          100      2     65   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
695          100     17     48   defined ${$hashref;}{'item'} ? :
697          100     33     32   ${$hashref;}{'unsorted'} ? :
699          100     58     34   if $args[0] eq '-u' or $args[0] eq '--unsorted'
710          100     54     60   if (@args == 1 and ref $args[0] eq 'HASH') { }
715          100      2     52   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
718          100     16     36   defined ${$hashref;}{'pair'} ? :
731          100     10      8   if (@args == 1 and ref $args[0] eq 'HASH') { }
735          100      2      8   unless ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'


Conditions
----------

and 3 conditions

line  err      %     !l  l&&!r   l&&r   expr
----- --- ------ ------ ------ ------   ----
81    ***     66      0      4    170   ${$refL;}{$_} =~ /^\d+$/ and ${$refL;}{$_} > 0
88           100      2      2    157   ${$refR;}{$_} =~ /^\d+$/ and ${$refR;}{$_} > 0
120   ***     66      0      4   1588   ${$l;}{$_} =~ /^\d+$/ and ${$l;}{$_} > 0
124          100      2      2   1565   ${$r;}{$_} =~ /^\d+$/ and ${$r;}{$_} > 0
151          100      8     16   6780   $seenhash{$_} =~ /^\d+$/ and $seenhash{$_} > 0
377          100    864    112    436   $xsubset[$f][$g] and $xsubset[$g][$f]
387   ***     66      2      0    188   $index =~ /^\d+$/ and 0 <= $index and $index <= ${$dataref;}{'maxindex'}
391   ***     66      2      0    188   $index =~ /^\d+$/ and 0 <= $index
407   ***     66      0      2    180   $_ =~ /^\d+$/ and 0 <= $_ and $_ <= ${$dataref;}{'maxindex'}
411   ***     33      0      0    182   $_ =~ /^\d+$/ and 0 <= $_
421   ***     33      0      0    190   $index =~ /^\d+$/ and 0 <= $index
      ***     66      0      2    188   $index =~ /^\d+$/ and 0 <= $index and $index <= $maxindex
441   ***     33      0      0    150   $_ =~ /^\d+$/ and 0 <= $_
      ***     66      0      2    148   $_ =~ /^\d+$/ and 0 <= $_ and $_ <= $maxindex
473   ***     66    347      0    353   ref $refL eq 'ARRAY' and ref $refR eq 'ARRAY'
      ***     33      0      0    347   ref $refL eq 'HASH' and ref $refR eq 'HASH'
583   ***     66      0      3     66   $i =~ /^\d+$/ and $i <= $last_index
625          100    114     57    115   @args == 1 and ref $args[0] eq 'HASH'
628          100      1      1    113   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
645          100    136      2    134   @args == 1 and ref $args[0] eq 'HASH'
649          100      1      1    132   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
666   ***     66      8      0      8   @args == 1 and ref $args[0] eq 'HASH'
670   ***     33      0      0      8   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
687          100     68     24     67   @args == 1 and ref $args[0] eq 'HASH'
691          100      1      1     65   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
710          100     23     37     54   @args == 1 and ref $args[0] eq 'HASH'
714          100      1      1     52   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'
731   ***     66      0      8     10   @args == 1 and ref $args[0] eq 'HASH'
734          100      1      1      8   ${$hashref;}{'lists'} and ref ${$hashref;}{'lists'} eq 'ARRAY'

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
94           100      4      2     29   keys %badentriesL or keys %badentriesR
126          100      4      2    239   keys %badentriesL or keys %badentriesR
399          100     17     92      4   @_ == 0 or @_ == 2
433          100      9     76      2   @_ == 0 or @_ == 2
506   ***     66    475    483      0   $first_ref eq 'ARRAY' or $first_ref eq 'HASH'
559   ***     33      0      0      2   @args == 1 or @args == 2
591   ***     33      0      0      3   @args == 1 or @args == 2
633          100     56     58     57   $args[0] eq '-u' or $args[0] eq '--unsorted'
699          100     32     26     34   $args[0] eq '-u' or $args[0] eq '--unsorted'


Covered Subroutines
-------------------

Subroutine                          Location                                    
----------------------------------- --------------------------------------------
BEGIN                               blib/lib/List/Compare/Base/_Auxiliary.pm:4  
BEGIN                               blib/lib/List/Compare/Base/_Auxiliary.pm:74 
_alt_construct_tester               blib/lib/List/Compare/Base/_Auxiliary.pm:623
_alt_construct_tester_1             blib/lib/List/Compare/Base/_Auxiliary.pm:643
_alt_construct_tester_2             blib/lib/List/Compare/Base/_Auxiliary.pm:664
_alt_construct_tester_3             blib/lib/List/Compare/Base/_Auxiliary.pm:685
_alt_construct_tester_4             blib/lib/List/Compare/Base/_Auxiliary.pm:708
_alt_construct_tester_5             blib/lib/List/Compare/Base/_Auxiliary.pm:729
_argument_checker                   blib/lib/List/Compare/Base/_Auxiliary.pm:524
_argument_checker_0                 blib/lib/List/Compare/Base/_Auxiliary.pm:504
_argument_checker_1                 blib/lib/List/Compare/Base/_Auxiliary.pm:530
_argument_checker_2                 blib/lib/List/Compare/Base/_Auxiliary.pm:538
_argument_checker_3                 blib/lib/List/Compare/Base/_Auxiliary.pm:552
_argument_checker_3a                blib/lib/List/Compare/Base/_Auxiliary.pm:565
_argument_checker_4                 blib/lib/List/Compare/Base/_Auxiliary.pm:575
_calc_seen                          blib/lib/List/Compare/Base/_Auxiliary.pm:472
_calc_seen1                         blib/lib/List/Compare/Base/_Auxiliary.pm:597
_calculate_hash_intersection        blib/lib/List/Compare/Base/_Auxiliary.pm:285
_calculate_hash_shared              blib/lib/List/Compare/Base/_Auxiliary.pm:300
_calculate_seen_only                blib/lib/List/Compare/Base/_Auxiliary.pm:226
_calculate_seen_xintersection_only  blib/lib/List/Compare/Base/_Auxiliary.pm:204
_calculate_union_only               blib/lib/List/Compare/Base/_Auxiliary.pm:260
_calculate_union_seen_only          blib/lib/List/Compare/Base/_Auxiliary.pm:271
_calculate_union_xintersection_only blib/lib/List/Compare/Base/_Auxiliary.pm:181
_calculate_xintersection_only       blib/lib/List/Compare/Base/_Auxiliary.pm:239
_chart_engine_multiple              blib/lib/List/Compare/Base/_Auxiliary.pm:339
_chart_engine_regular               blib/lib/List/Compare/Base/_Auxiliary.pm:327
_equiv_engine                       blib/lib/List/Compare/Base/_Auxiliary.pm:486
_equivalent_subengine               blib/lib/List/Compare/Base/_Auxiliary.pm:370
_index_message1                     blib/lib/List/Compare/Base/_Auxiliary.pm:385
_index_message2                     blib/lib/List/Compare/Base/_Auxiliary.pm:396
_index_message3                     blib/lib/List/Compare/Base/_Auxiliary.pm:419
_index_message4                     blib/lib/List/Compare/Base/_Auxiliary.pm:430
_list_builder                       blib/lib/List/Compare/Base/_Auxiliary.pm:172
_prepare_listrefs                   blib/lib/List/Compare/Base/_Auxiliary.pm:453
_subset_engine_multaccel            blib/lib/List/Compare/Base/_Auxiliary.pm:463
_subset_subengine                   blib/lib/List/Compare/Base/_Auxiliary.pm:309
_validate_2_seenhashes              blib/lib/List/Compare/Base/_Auxiliary.pm:77 
_validate_multiple_seenhashes       blib/lib/List/Compare/Base/_Auxiliary.pm:145
_validate_seen_hash                 blib/lib/List/Compare/Base/_Auxiliary.pm:113


blib/lib/List/Compare/Base/_Engine.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare::Base::_Engine;
2                                                     $VERSION = 0.31;
3                                                     # Holds subroutines used within 
4                                                     # List::Compare::Base::Accelerated and List::Compare::Functional
5                                                     # As of 08/15/2004
6             28                  100           468   use Carp;
              28                                133   
              28                                705   
7             28                  100           442   use List::Compare::Base::_Auxiliary qw(
8                                                         _equiv_engine 
9                                                         _calculate_seen_xintersection_only
10                                                        _calculate_union_seen_only
11            28                                115   );
              28                                394   
12                                                    @ISA = qw(Exporter);
13                                                    @EXPORT_OK = qw|
14                                                        _unique_all_engine
15                                                        _complement_all_engine
16                                                    |;
17            28                  100           477   use strict;
              28                                117   
              28                                337   
18                                                    
19                                                    sub _unique_all_engine {
20           116                  100           595       my $aref = shift;
21           116                                907       my ($seenref, $xintersectionref) = 
22                                                            _calculate_seen_xintersection_only($aref);
23           116                               1077       my %seen = %{$seenref};
             116                               1675   
24           116                                679       my %xintersection = %{$xintersectionref};
             116                               2376   
25                                                    
26                                                        # Calculate @xunique
27                                                        # Inputs:  $aref    %seen    %xintersection
28           116                                770       my (@xunique);
29           672                               5296       for (my $i = 0; $i <= $#{$aref}; $i++) {
30           556                               1300           my %seenthis = %{$seen{$i}};
             556                               7289   
31           556                               2609           my (@uniquethis, %deductions, %alldeductions);
32                                                            # Get those elements of %xintersection which we'll need 
33                                                            # to subtract from %seenthis
34           556                               5651           foreach (keys %xintersection) {
35          5416                              34329               my ($left, $right) = split /_/, $_;
36          5416    100    100                52437               if ($left == $i || $right == $i) {
37          2176                              16502                   $deductions{$_} = $xintersection{$_};
38                                                                }
39                                                            }
40           556                               5555           foreach my $ded (keys %deductions) {
41          2176                               5210               foreach (keys %{$deductions{$ded}}) {
            2176                              12483   
42          7224                              35993                   $alldeductions{$_}++;
43                                                                }
44                                                            }
45           556                               4061           foreach (keys %seenthis) {
46          3028    100                       13210               push(@uniquethis, $_) unless ($alldeductions{$_});
47                                                            }
48           556                              13393           $xunique[$i] = \@uniquethis;
49           116                               1063       }
50           116                               7808       return \@xunique;
51                                                    }
52                                                    
53                                                    sub _complement_all_engine {
54           120                  100           727       my ($aref, $unsortflag) = @_;
55           120                                911       my ($unionref, $seenref) = _calculate_union_seen_only($aref);
56           120                                559       my %seen = %{$seenref};
             120                               2880   
57           120    100                         976       my @union = $unsortflag ? keys %{$unionref} : sort(keys %{$unionref});
              56                               2041   
              64                               2090   
58                                                    
59                                                        # Calculate @xcomplement
60                                                        # Inputs:  $aref @union %seen
61           120                                857       my (@xcomplement);
62           696                               5116       for (my $i = 0; $i <= $#{$aref}; $i++) {
63           576                               2838           my %seenthis = %{$seen{$i}};
             576                              18528   
64           576                               2364           my @complementthis = ();
65           576                               2148           foreach (@union) {
66          5728    100                       40837               push(@complementthis, $_) unless (exists $seenthis{$_});
67                                                            }
68           576                               5254           $xcomplement[$i] = \@complementthis;
69           120                                519       }
70           120                               4460       return \@xcomplement;
71                                                    }
72                                                    
73                                                    1;
74                                                    
75                                                    
76                                                    __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
36           100   2176   3240   if ($left == $i or $right == $i)
46           100    232   2796   unless $alldeductions{$_}
57           100     56     64   $unsortflag ? :
66           100   2592   3136   unless exists $seenthis{$_}


Conditions
----------

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
36           100   1088   1088   3240   $left == $i or $right == $i


Covered Subroutines
-------------------

Subroutine             Location                                
---------------------- ----------------------------------------
BEGIN                  blib/lib/List/Compare/Base/_Engine.pm:17
BEGIN                  blib/lib/List/Compare/Base/_Engine.pm:6 
BEGIN                  blib/lib/List/Compare/Base/_Engine.pm:7 
_complement_all_engine blib/lib/List/Compare/Base/_Engine.pm:54
_unique_all_engine     blib/lib/List/Compare/Base/_Engine.pm:20


blib/lib/List/Compare/Functional.pm

line  err   stmt branch   cond    sub    pod   time   code
1                                                     package List::Compare::Functional;
2                                                     $VERSION = 0.31;   # August 15, 2004 
3                                                     @ISA = qw(Exporter);
4                                                     @EXPORT_OK = qw|
5                                                         get_intersection
6                                                         get_intersection_ref
7                                                         get_union
8                                                         get_union_ref
9                                                         get_unique
10                                                        get_unique_ref
11                                                        get_unique_all
12                                                        get_complement
13                                                        get_complement_ref
14                                                        get_complement_all
15                                                        get_symmetric_difference
16                                                        get_symmetric_difference_ref
17                                                        is_LsubsetR
18                                                        is_RsubsetL
19                                                        is_LequivalentR
20                                                        is_LdisjointR
21                                                        is_member_which
22                                                        is_member_which_ref
23                                                        are_members_which
24                                                        is_member_any
25                                                        are_members_any
26                                                        print_subset_chart
27                                                        print_equivalence_chart
28                                                        get_shared
29                                                        get_shared_ref
30                                                        get_nonintersection
31                                                        get_nonintersection_ref
32                                                        get_symdiff
33                                                        get_symdiff_ref
34                                                        is_LeqvlntR
35                                                        get_bag
36                                                        get_bag_ref
37                                                        get_version
38                                                    |;
39                                                    %EXPORT_TAGS = (
40                                                        main => [ qw(
41                                                            get_intersection
42                                                            get_union
43                                                            get_unique
44                                                            get_complement
45                                                            get_symmetric_difference
46                                                            is_LsubsetR
47                                                        ) ],
48                                                        mainrefs => [ qw(
49                                                            get_intersection_ref
50                                                            get_union_ref
51                                                            get_unique_ref
52                                                            get_complement_ref
53                                                            get_symmetric_difference_ref
54                                                        ) ],
55                                                        originals => [ qw(
56                                                            get_intersection
57                                                            get_intersection_ref
58                                                            get_union
59                                                            get_union_ref
60                                                            get_unique
61                                                            get_unique_ref
62                                                            get_unique_all
63                                                            get_complement
64                                                            get_complement_ref
65                                                            get_complement_all
66                                                            get_symmetric_difference
67                                                            get_symmetric_difference_ref
68                                                            get_shared
69                                                            get_shared_ref
70                                                            get_nonintersection
71                                                            get_nonintersection_ref
72                                                            is_LsubsetR
73                                                            is_RsubsetL
74                                                            is_LequivalentR
75                                                            is_LdisjointR
76                                                            is_member_which
77                                                            is_member_which_ref
78                                                            are_members_which
79                                                            is_member_any
80                                                            are_members_any
81                                                            print_subset_chart
82                                                            print_equivalence_chart
83                                                            get_bag
84                                                            get_bag_ref
85                                                            get_version
86                                                        ) ],
87                                                        aliases => [ qw(
88                                                            get_symdiff
89                                                            get_symdiff_ref
90                                                            is_LeqvlntR
91                                                        ) ],
92                                                    );
93            10                  100           171   use strict;
              10                                 44   
              10                                174   
94            10                  100           141   use Carp;
              10                                 38   
              10                                215   
95            10                  100          1330   use List::Compare::Base::_Auxiliary qw(
96                                                        _subset_subengine
97                                                        _chart_engine_multiple
98                                                        _equivalent_subengine
99                                                        _calc_seen1
100           10                                 50   );
              10                                233   
101           10                  100           163   use List::Compare::Base::_Auxiliary qw(:calculate :checker :tester);
              10                                 45   
              10                                113   
102           10                  100          1435   use List::Compare::Base::_Engine qw( 
103                                                       _unique_all_engine 
104                                                       _complement_all_engine
105           10                                 48   );
              10                                182   
106                                                   
107                                                   
108                                                   sub get_union {
109   ***     20                  100      0    136       return @{ get_union_ref(@_) };
              20                                177   
110                                                   }
111                                                   
112                                                   sub get_union_ref {
113   ***     40                  100      0    499       my ($argref, $unsorted) = _alt_construct_tester(@_);
114           16                                143       $unsorted  
115                                                           ? return          _union_engine(_argument_checker($argref))
116           40    100                         438           : return [ sort @{_union_engine(_argument_checker($argref))} ];
117                                                   }
118                                                   
119                                                   sub _union_engine {
120           40                  100           333       my $seenrefsref = _calc_seen1(@_);
121           40                                315       my $unionhashref = _calculate_union_only($seenrefsref);
122           40                                193       return [ keys %{$unionhashref} ];
              40                               2590   
123                                                   }
124                                                   
125                                                   sub get_intersection {
126   ***     25                  100      0    149       return @{ get_intersection_ref(@_) };
              25                                199   
127                                                   }
128                                                   
129                                                   sub get_intersection_ref {
130   ***     45                  100      0    596       my ($argref, $unsorted) = _alt_construct_tester(@_);
131           16                                145       $unsorted  
132                                                           ? return          _intersection_engine(_argument_checker($argref))
133           43    100                         517           : return [ sort @{_intersection_engine(_argument_checker($argref))} ];
134                                                   }
135                                                   
136                                                   sub _intersection_engine {
137           43                  100           370       my $seenrefsref = _calc_seen1(@_);
138           43                                375       my $xintersectionref = _calculate_xintersection_only($seenrefsref);
139           43                                447       my $intersectionref = _calculate_hash_intersection($xintersectionref);
140           43                                752       return [ keys %{$intersectionref} ];
              43                               2466   
141                                                   }
142                                                   
143                                                   sub get_unique {
144   ***     35                  100      0    204       return @{ get_unique_ref(@_) };
              35                                286   
145                                                   }
146                                                   
147                                                   sub get_unique_ref {
148   ***     66                  100      0    864       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
149           25                                216       $unsorted
150                                                           ? return          _unique_engine(_argument_checker_3($argref))
151           64    100                         692           : return [ sort @{_unique_engine(_argument_checker_3($argref))} ];
152                                                   }
153                                                   
154                                                   sub get_unique_all {
155   ***     16                  100      0    182       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
156                                                       # currently it doesn't appear that &_unique_all_engine can make use of
157                                                       # $unsorted
158           16                                139       return _unique_all_engine(_argument_checker_3a($argref));
159                                                   }
160                                                   
161                                                   sub _unique_engine {
162           63                  100           400       my $tested = pop(@_);
163           63                               1073       my $seenrefsref = _calc_seen1(@_);
164           63                                536       my ($seenref, $xintersectionref) = 
165                                                           _calculate_seen_xintersection_only($seenrefsref);
166           63                                281       my %seen = %{$seenref};
              63                                911   
167           63                                347       my %xintersection = %{$xintersectionref};
              63                               1006   
168                                                   
169                                                       # Calculate %xunique
170           63                                354       my (%xunique);
171          318                               2598       for (my $i = 0; $i <= $#{$seenrefsref}; $i++) {
172          255                                665           my %seenthis = %{$seen{$i}};
             255                               3123   
173          255                               1304           my (@uniquethis, %deductions, %alldeductions);
174                                                           # Get those elements of %xintersection which we'll need 
175                                                           # to subtract from %seenthis
176          255                               3051           foreach (keys %xintersection) {
177         2190                              18107               my ($left, $right) = split /_/, $_;
178         2190    100    100                39182               if ($left == $i || $right == $i) {
179          900                               6589                   $deductions{$_} = $xintersection{$_};
180                                                               }
181                                                           }
182          255                               2388           foreach my $ded (keys %deductions) {
183          900                               1927               foreach (keys %{$deductions{$ded}}) {
             900                               5266   
184         3078                              11647                   $alldeductions{$_}++;
185                                                               }
186                                                           }
187          255                               2116           foreach (keys %seenthis) {
188         1441    100                        7126               push(@uniquethis, $_) unless ($alldeductions{$_});
189                                                           }
190          255                               4445           $xunique{$i} = \@uniquethis;
191           63                                259       }
192           63                                237       return [ @{$xunique{$tested}} ];
              63                               4537   
193                                                   }
194                                                   
195                                                   sub get_complement {
196   ***     30                  100      0    237       return @{ get_complement_ref(@_) };
              30                                249   
197                                                   }
198                                                   
199                                                   sub get_complement_ref {
200   ***     61                  100      0    775       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
201           25                                223       $unsorted
202                                                           ? return          _complement_engine(_argument_checker_3($argref))
203           61    100                         683           : return [ sort @{_complement_engine(_argument_checker_3($argref))} ];
204                                                   }
205                                                   
206                                                   sub get_complement_all {
207   ***     16                  100      0    190       my ($argref, $unsorted) = _alt_construct_tester_3(@_);
208           16                                137       return _complement_all_engine(_argument_checker_3a($argref), $unsorted);
209                                                   }
210                                                   
211                                                   sub _complement_engine {
212           60                  100           972       my $tested = pop(@_);
213           60                               1140       my $seenrefsref = _calc_seen1(@_);
214           60                                534       my ($unionref, $seenref) = _calculate_union_seen_only($seenrefsref);
215           60                                288       my %seen = %{$seenref};
              60                                785   
216           60                                308       my @union = keys %{$unionref};
              60                               1562   
217                                                   
218                                                       # Calculate %xcomplement
219                                                       # Inputs:  $seenrefsref @union %seen
220           60                              10927       my (%xcomplement);
221          300                              10330       for (my $i = 0; $i <= $#{$seenrefsref}; $i++) {
222          240                                625           my %seenthis = %{$seen{$i}};
             240                               3079   
223          240                               1084           my @complementthis = ();
224          240                                852           foreach (@union) {
225         2320    100                       27324               push(@complementthis, $_) unless (exists $seenthis{$_});
226                                                           }
227          240                               2380           $xcomplement{$i} = \@complementthis;
228           60                                403       }
229           60                                238       return [ @{$xcomplement{$tested}} ];
              60                               4555   
230                                                   }
231                                                   
232                                                   sub get_symmetric_difference {
233   ***     40                  100      0    236       return @{ get_symmetric_difference_ref(@_) };
              40                                274   
234                                                   }
235                                                   
236                                                   sub get_symmetric_difference_ref {
237   ***     80                  100      0   1028       my ($argref, $unsorted) = _alt_construct_tester(@_);
238           32                                285       $unsorted  
239                                                           ? return          _symmetric_difference_engine(_argument_checker($argref))
240           80    100                         844           : return [ sort @{_symmetric_difference_engine(_argument_checker($argref))} ];
241                                                   }
242                                                   
243                                                   sub _symmetric_difference_engine {
244           80                  100           647       my $seenrefsref = _calc_seen1(@_);
245           80                                742       my ($unionref, $xintersectionref) = 
246                                                           _calculate_union_xintersection_only($seenrefsref);
247           80                                356       my @union = keys %{$unionref};
              80                               1645   
248                                                   
249           80                                908       my $sharedref = _calculate_hash_shared($xintersectionref);
250           80                                311       my (@symmetric_difference);
251           80                                380       foreach (@union) {
252          720    100                        1512           push(@symmetric_difference, $_) unless exists ${$sharedref}{$_};
             720                               5668   
253                                                       }
254           80                              10213       return \@symmetric_difference;
255                                                   }
256                                                   
257                                                   *get_symdiff  = \&get_symmetric_difference;
258                                                   *get_symdiff_ref  = \&get_symmetric_difference_ref;
259                                                   
260                                                   sub get_shared {
261   ***     20                  100      0    118       return @{ get_shared_ref(@_) };
              20                                153   
262                                                   }
263                                                   
264                                                   sub get_shared_ref {
265   ***     40                  100      0    565       my ($argref, $unsorted) = _alt_construct_tester(@_);
266           16                                159       $unsorted  
267                                                           ? return          _shared_engine(_argument_checker($argref))
268           40    100                         467           : return [ sort @{_shared_engine(_argument_checker($argref))} ];
269                                                   }
270                                                   
271                                                   sub _shared_engine {
272           40                  100           366       my $seenrefsref = _calc_seen1(@_);
273                                                       # Calculate @shared
274                                                       # Inputs:  %xintersection
275           40                                363       my $xintersectionref = _calculate_xintersection_only($seenrefsref);
276           40                                354       my $sharedref = _calculate_hash_shared($xintersectionref);
277           40                                174       my @shared = keys %{$sharedref};
              40                                879   
278           40                              35499       return \@shared;
279                                                   }
280                                                   
281                                                   sub get_nonintersection {
282   ***     20                  100      0    125       return @{ get_nonintersection_ref(@_) };
              20                                153   
283                                                   }
284                                                   
285                                                   sub get_nonintersection_ref {
286   ***     40                  100      0    522       my ($argref, $unsorted) = _alt_construct_tester(@_);
287           16                                157       $unsorted  
288                                                           ? return          _nonintersection_engine(_argument_checker($argref))
289           40    100                         925           : return [ sort @{_nonintersection_engine(_argument_checker($argref))} ];
290                                                   }
291                                                   
292                                                   sub _nonintersection_engine {
293           40                  100           340       my $seenrefsref = _calc_seen1(@_);
294           40                                412       my ($unionref, $xintersectionref) = 
295                                                           _calculate_union_xintersection_only($seenrefsref);
296           40                                249       my @union = keys %{$unionref};
              40                                842   
297           40                                475       my $intersectionref = _calculate_hash_intersection($xintersectionref);
298                                                       # Calculate nonintersection
299                                                       # Inputs:  @union    %intersection
300           40                                159       my (@nonintersection);
301           40                                211       foreach (@union) {
302          360    100                         726           push(@nonintersection, $_) unless exists ${$intersectionref}{$_};
             360                               2889   
303                                                       }
304           40                               4966       return \@nonintersection;
305                                                   }
306                                                   
307                                                   sub is_LsubsetR {
308   ***     26                  100      0    344       my $argref = _alt_construct_tester_4(@_);
309           24                                252       return _is_LsubsetR_engine(_argument_checker_4($argref));
310                                                   }
311                                                   
312                                                   sub _is_LsubsetR_engine {
313           22                  100           119       my $testedref = pop(@_);
314           22                                168       my $xsubsetref = _subset_engine(@_);
315           22                                 97       return ${$xsubsetref}[${$testedref}[0]][${$testedref}[1]];
              22                                 97   
              22                                130   
              22                                235   
316                                                   }
317                                                   
318                                                   sub is_RsubsetL {
319   ***     20                  100      0    258       my $argref = _alt_construct_tester_4(@_);
320           20                                164       return _is_RsubsetL_engine(_argument_checker_4($argref));
321                                                   }
322                                                   
323                                                   sub _is_RsubsetL_engine {
324           20                  100           113       my $testedref = pop(@_);
325           20                                139       my $xsubsetref = _subset_engine(@_);
326           20                                 94       return ${$xsubsetref}[${$testedref}[1]][${$testedref}[0]];
              20                                 88   
              20                                121   
              20                                228   
327                                                   }
328                                                   
329                                                   sub _subset_engine {
330           42                  100           322       my $seenrefsref = _calc_seen1(@_);
331           42                                343       my $xsubsetref = _subset_subengine($seenrefsref);
332           42                                660       return $xsubsetref;
333                                                   }
334                                                   
335                                                   sub is_LequivalentR {
336   ***     42                  100      0    553       my $argref = _alt_construct_tester_4(@_);
337           42                                331       return _is_LequivalentR_engine(_argument_checker_4($argref));
338                                                   }
339                                                   
340                                                   *is_LeqvlntR = \&is_LequivalentR;
341                                                   
342                                                   sub _is_LequivalentR_engine {
343           40                  100           220       my $testedref = pop(@_);
344           40                                317       my $seenrefsref = _calc_seen1(@_);
345           40                                416       my $xequivalentref = _equivalent_subengine($seenrefsref);
346           40                                261       return ${$xequivalentref}[${$testedref}[1]][${$testedref}[0]];
              40                                164   
              40                                306   
              40                                734   
347                                                   }
348                                                   
349                                                   sub is_LdisjointR {
350   ***     26                  100      0    342       my $argref = _alt_construct_tester_4(@_);
351           26                                212       return _is_LdisjointR_engine(_argument_checker_4($argref));
352                                                   }
353                                                   
354                                                   sub _is_LdisjointR_engine {
355           24                  100           127       my $testedref = pop(@_);
356           24                                212       my $seenrefsref = _calc_seen1(@_);
357           24                                203       my $xintersectionref = _calculate_xintersection_only($seenrefsref);
358           24                                107       my (@xdisjoint);
359          144                               1049       for (my $i = 0; $i <= @{$seenrefsref}; $i++) {
360          120                                288           foreach (keys %{$xintersectionref}) {
             120                               1098   
361         1296                               7293               my ($left, $right) = split /_/, $_;
362         1296                              12658               $xdisjoint[$left][$right] = $xdisjoint[$right][$left] = 
363         1296    100                       29337                   ! scalar(keys %{${$xintersectionref}{$_}}) ? 1 : 0;
            1296                               2740   
364                                                           }
365          120                               1055           $xdisjoint[$i][$i] = 0; 
366           24                                102       }
367           24                                 93       my $disjoint_status = $xdisjoint[${$testedref}[1]][${$testedref}[0]];
              24                                127   
              24                                109   
368           24                               1758       return $disjoint_status;
369                                                   }
370                                                   
371                                                   sub print_subset_chart {
372   ***     10                  100      0    184       my $argref = _alt_construct_tester_5(@_);
373            8                               3348       _print_subset_chart_engine(_argument_checker($argref));
374                                                   }
375                                                   
376                                                   sub _print_subset_chart_engine {
377            8                  100            82       my $seenrefsref = _calc_seen1(@_);
378            8                                 75       my $xsubsetref = _subset_subengine($seenrefsref);
379            8                                 49       my $title = 'Subset';
380            8                                 85       _chart_engine_multiple($xsubsetref, $title);
381                                                   }
382                                                   
383                                                   sub print_equivalence_chart {
384   ***      8                  100      0    203       my $argref = _alt_construct_tester_5(@_);
385            8                                 83       _print_equivalence_chart_engine(_argument_checker($argref));
386                                                   }
387                                                   
388                                                   sub _print_equivalence_chart_engine {
389            8                  100            95       my $seenrefsref = _calc_seen1(@_);
390            8                                 75       my $xequivalentref = _equivalent_subengine($seenrefsref);
391            8                                 51       my $title = 'Subset';
392            8                                 79       _chart_engine_multiple($xequivalentref, $title);
393                                                   }    
394                                                   
395                                                   sub is_member_which {
396   ***     90                  100      0   1029       return @{ is_member_which_ref(@_) };
              90                                659   
397                                                   }    
398                                                   
399                                                   sub is_member_which_ref {
400   ***    181                  100      0   8417       my $argref = _alt_construct_tester_1(@_);
401          179                               4852       return _is_member_which_engine(_argument_checker_1($argref));
402                                                   }    
403                                                   
404                                                   sub _is_member_which_engine {
405          176                  100           962       my $arg = pop(@_);
406          176                               1317       my $seenrefsref = _calc_seen1(@_);
407          176                               1319       my $seenref = _calculate_seen_only($seenrefsref);
408          176                                677       my (@found);
409          176                                598       foreach (sort keys %{$seenref}) {
             176                               4393   
410          616    100                        2048           push @found, $_ if (exists ${$seenref}{$_}{$arg});
             616                              13164   
411                                                       }
412          176                               6936       return \@found;
413                                                   }
414                                                   
415                                                   sub is_member_any {
416   ***     91                  100      0   1157       my $argref = _alt_construct_tester_1(@_);
417           91                                783       return _is_member_any_engine(_argument_checker_1($argref));
418                                                   }    
419                                                   
420                                                   sub _is_member_any_engine {
421           88                  100           494       my $tested = pop(@_);
422           88                                733       my $seenrefsref = _calc_seen1(@_);
423           88                                678       my $seenref = _calculate_seen_only($seenrefsref);
424           88                                296       my ($k);
425           88                                315       while ( $k = each %{$seenref} ) {
             180                               2798   
426          164    100                         516           return 1 if (defined ${$seenref}{$k}{$tested});
             164                               2438   
427                                                       }
428           16                                517       return 0;
429                                                   }
430                                                   
431                                                   sub are_members_which {
432   ***      8                  100      0    114       my $argref = _alt_construct_tester_2(@_);
433            8                                 86       return _are_members_which_engine(_argument_checker_2($argref));
434                                                   }
435                                                   
436                                                   sub _are_members_which_engine {
437            8                  100            57       my $testedref = pop(@_);
438            8                                 79       my @tested = @{$testedref};
               8                                174   
439            8                                 85       my $seenrefsref = _calc_seen1(@_);
440            8                                148       my $seenref = _calculate_seen_only($seenrefsref);
441            8                                 37       my (%found);
442                                                       for (my $i=0; $i<=$#tested; $i++) {
443           88                                192           my (@not_found);
444           88                                268           foreach (sort keys %{$seenref}) {
              88                                903   
445          308                                606               exists ${${$seenref}{$_}}{$tested[$i]}
             308                               5555   
             164                               1098   
446          308    100                         599                   ? push @{$found{$tested[$i]}}, $_
447                                                                   : push @not_found, $_;
448                                                           }
449           88    100                         423           $found{$tested[$i]} = [] if (@not_found == keys %{$seenref});
              88                               1345   
450            8                                 44       }
451            8                                336       return \%found;
452                                                   }
453                                                   
454                                                   sub are_members_any {
455   ***      8                  100      0    115       my $argref = _alt_construct_tester_2(@_);
456            8                                 82       return _are_members_any_engine(_argument_checker_2($argref));
457                                                   }    
458                                                   
459                                                   sub _are_members_any_engine {
460            8                  100            62       my $testedref = pop(@_);
461            8                                 47       my @tested = @{$testedref};
               8                                135   
462            8                                 80       my $seenrefsref = _calc_seen1(@_);
463            8                                 76       my $seenref = _calculate_seen_only($seenrefsref);
464            8                                118       my (%present);
465                                                       for (my $i=0; $i<=$#tested; $i++) {
466           88                                215           foreach (keys %{$seenref}) {
              88                                606   
467          308    100                        1387               unless (defined $present{$tested[$i]}) {
468          164    100                         332                   $present{$tested[$i]} = 1 if ${$seenref}{$_}{$tested[$i]};
             164                              30307   
469                                                               }
470                                                           }
471           88    100                        1179           $present{$tested[$i]} = 0 if (! defined $present{$tested[$i]});
472            8                                 45       }
473            8                                360       return \%present;
474                                                   }
475                                                   
476                                                   sub get_bag {
477   ***     20                  100      0    124       return @{ get_bag_ref(@_) };
              20                                160   
478                                                   }
479                                                   
480                                                   sub get_bag_ref {
481   ***     41                  100      0   1732       my ($argref, $unsorted) = _alt_construct_tester(@_);
482           17                                162       $unsorted  
483                                                           ? return          _bag_engine(_argument_checker($argref))
484           41    100                         488           : return [ sort @{_bag_engine(_argument_checker($argref))} ];
485                                                   }
486                                                   
487                                                   sub _bag_engine {
488           41                  100           271       my @listrefs = @_;
489           41                                158       my (@bag);
490           41    100                         477       if (ref($listrefs[0]) eq 'ARRAY') { 
      ***            50                               
491           21                                159           foreach my $lref (@listrefs) {
492           75                                272               foreach my $el (@{$lref}) {
              75                                336   
493          512                               5955                   push(@bag, $el);
494                                                               }
495                                                           }
496                                                       } elsif (ref($listrefs[0]) eq 'HASH') {
497           20                                119           foreach my $lref (@listrefs) {
498           70                                237               foreach my $key (keys %{$lref}) {
              70                                533   
499          890                              10007                   for (my $j=1; $j <= ${$lref}{$key}; $j++) {
500          480                               2450                       push(@bag, $key);
501          410                                947                   }
502                                                               }
503                                                           }
504                                                       } else {
505   ***      0                                  0           croak "Indeterminate case in _bag_engine: $!";
506                                                       }
507           41                               3270       return \@bag;
508                                                   }
509                                                   
510                                                   sub get_version {
511   ***      8                  100      0    629       return $List::Compare::Functional::VERSION;
512                                                   }
513                                                   
514                                                   1;
515                                                   
516                                                   __END__


Branches
--------

line  err      %   true  false   branch
----- --- ------ ------ ------   ------
116          100     24     16   $unsorted ? :
133          100     27     16   $unsorted ? :
151          100     39     25   $unsorted ? :
178          100    900   1290   if ($left == $i or $right == $i)
188          100    126   1315   unless $alldeductions{$_}
203          100     36     25   $unsorted ? :
225          100    960   1360   unless exists $seenthis{$_}
240          100     48     32   $unsorted ? :
252          100    160    560   unless exists ${$sharedref;}{$_}
268          100     24     16   $unsorted ? :
289          100     24     16   $unsorted ? :
302          100    200    160   unless exists ${$intersectionref;}{$_}
363          100    432    864   !scalar(keys %{${$xintersectionref;}{$_};}) ? :
410          100    328    288   if exists ${$seenref;}{$_}{$arg}
426          100     72     92   if defined ${$seenref;}{$k}{$tested}
446          100    164    144   exists ${${$seenref;}{$_};}{$tested[$i]} ? :
449          100     16     72   if @not_found == keys %{$seenref;}
467          100    164    144   unless (defined $present{$tested[$i]})
468          100     72     92   if ${$seenref;}{$_}{$tested[$i]}
471          100     16     72   if not defined $present{$tested[$i]}
484          100     24     17   $unsorted ? :
490          100     21     20   if (ref $listrefs[0] eq 'ARRAY') { }
      ***     50     20      0   elsif (ref $listrefs[0] eq 'HASH') { }


Conditions
----------

or 3 conditions

line  err      %      l  !l&&r !l&&!r   expr
----- --- ------ ------ ------ ------   ----
178          100    450    450   1290   $left == $i or $right == $i


Covered Subroutines
-------------------

Subroutine                      Location                               
------------------------------- ---------------------------------------
BEGIN                           blib/lib/List/Compare/Functional.pm:101
BEGIN                           blib/lib/List/Compare/Functional.pm:102
BEGIN                           blib/lib/List/Compare/Functional.pm:93 
BEGIN                           blib/lib/List/Compare/Functional.pm:94 
BEGIN                           blib/lib/List/Compare/Functional.pm:95 
_are_members_any_engine         blib/lib/List/Compare/Functional.pm:460
_are_members_which_engine       blib/lib/List/Compare/Functional.pm:437
_bag_engine                     blib/lib/List/Compare/Functional.pm:488
_complement_engine              blib/lib/List/Compare/Functional.pm:212
_intersection_engine            blib/lib/List/Compare/Functional.pm:137
_is_LdisjointR_engine           blib/lib/List/Compare/Functional.pm:355
_is_LequivalentR_engine         blib/lib/List/Compare/Functional.pm:343
_is_LsubsetR_engine             blib/lib/List/Compare/Functional.pm:313
_is_RsubsetL_engine             blib/lib/List/Compare/Functional.pm:324
_is_member_any_engine           blib/lib/List/Compare/Functional.pm:421
_is_member_which_engine         blib/lib/List/Compare/Functional.pm:405
_nonintersection_engine         blib/lib/List/Compare/Functional.pm:293
_print_equivalence_chart_engine blib/lib/List/Compare/Functional.pm:389
_print_subset_chart_engine      blib/lib/List/Compare/Functional.pm:377
_shared_engine                  blib/lib/List/Compare/Functional.pm:272
_subset_engine                  blib/lib/List/Compare/Functional.pm:330
_symmetric_difference_engine    blib/lib/List/Compare/Functional.pm:244
_union_engine                   blib/lib/List/Compare/Functional.pm:120
_unique_engine                  blib/lib/List/Compare/Functional.pm:162
are_members_any                 blib/lib/List/Compare/Functional.pm:455
are_members_which               blib/lib/List/Compare/Functional.pm:432
get_bag                         blib/lib/List/Compare/Functional.pm:477
get_bag_ref                     blib/lib/List/Compare/Functional.pm:481
get_complement                  blib/lib/List/Compare/Functional.pm:196
get_complement_all              blib/lib/List/Compare/Functional.pm:207
get_complement_ref              blib/lib/List/Compare/Functional.pm:200
get_intersection                blib/lib/List/Compare/Functional.pm:126
get_intersection_ref            blib/lib/List/Compare/Functional.pm:130
get_nonintersection             blib/lib/List/Compare/Functional.pm:282
get_nonintersection_ref         blib/lib/List/Compare/Functional.pm:286
get_shared                      blib/lib/List/Compare/Functional.pm:261
get_shared_ref                  blib/lib/List/Compare/Functional.pm:265
get_symmetric_difference        blib/lib/List/Compare/Functional.pm:233
get_symmetric_difference_ref    blib/lib/List/Compare/Functional.pm:237
get_union                       blib/lib/List/Compare/Functional.pm:109
get_union_ref                   blib/lib/List/Compare/Functional.pm:113
get_unique                      blib/lib/List/Compare/Functional.pm:144
get_unique_all                  blib/lib/List/Compare/Functional.pm:155
get_unique_ref                  blib/lib/List/Compare/Functional.pm:148
get_version                     blib/lib/List/Compare/Functional.pm:511
is_LdisjointR                   blib/lib/List/Compare/Functional.pm:350
is_LequivalentR                 blib/lib/List/Compare/Functional.pm:336
is_LsubsetR                     blib/lib/List/Compare/Functional.pm:308
is_RsubsetL                     blib/lib/List/Compare/Functional.pm:319
is_member_any                   blib/lib/List/Compare/Functional.pm:416
is_member_which                 blib/lib/List/Compare/Functional.pm:396
is_member_which_ref             blib/lib/List/Compare/Functional.pm:400
print_equivalence_chart         blib/lib/List/Compare/Functional.pm:384
print_subset_chart              blib/lib/List/Compare/Functional.pm:372


